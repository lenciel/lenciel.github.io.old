<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@Lenciel]]></title>
  <link href="http://lenciel.cn/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2014-04-26T16:12:11+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用dnsmasq配置本地开发环境]]></title>
    <link href="http://lenciel.cn/2014/04/dnsmasq-on-mac/"/>
    <updated>2014-04-25T14:53:37+08:00</updated>
    <id>http://lenciel.cn/2014/04/dnsmasq-on-mac</id>
    <content type="html"><![CDATA[<p>做Web开发的时候经常需要修改<code>/etc/hosts</code>文件把<code>dev.cool.project</code>或者<code>cool.project.dev</code>这样的域名指向127.0.0.1(如果你从来没有这么做过那你可以跳过后面的内容了但, seriously? you are a web dev and never did this before?）。这样做有些麻烦：</p>

<ul>
  <li>每个项目需要修改hosts文件</li>
  <li>需要root权限才能修改这个文件</li>
</ul>

<p>这里记一下如何用<a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">dnsmasq</a>把所有<code>dev</code>结尾的域名都指向<code>127.0.0.1</code>。</p>

<h4 id="dnsmasq">安装dnsmasq</h4>

<p>在Mac下安装什么东西本座都用<a href="http://brew.sh/">homebrew</a>，先更新brew:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>brew up
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后安装dnsmasq。注意安装命令的输出，结尾是有配置的简单说明的。因为我用了<a href="http://lenciel.cn/2013/03/boxen-introduction/">boxen</a>所以路径不一定对每个人都适用，以你自己的输出为准：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>brew install <span class="nv">dnsmasq</span>
</span><span class="line"><span class="o">==</span>&gt; make install <span class="nv">PREFIX</span><span class="o">=</span>/opt/boxen/homebrew/Cellar/dnsmasq/2.69
</span><span class="line"><span class="o">==</span>&gt; Caveats
</span><span class="line">To configure dnsmasq, copy the example configuration to /opt/boxen/homebrew/etc/dnsmasq.conf
</span><span class="line">and edit to taste.
</span><span class="line">  cp /opt/boxen/homebrew/opt/dnsmasq/dnsmasq.conf.example /opt/boxen/homebrew/etc/dnsmasq.conf
</span><span class="line">To have launchd start dnsmasq at startup:
</span><span class="line">sudo cp -fv /opt/boxen/homebrew/opt/dnsmasq/*.plist /Library/LaunchDaemons
</span><span class="line">Then to load dnsmasq now:
</span><span class="line">sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist
</span><span class="line"><span class="o">==</span>&gt; Summary
</span><span class="line">/opt/boxen/homebrew/Cellar/dnsmasq/2.69: 7 files, 488K, built in 22 seconds
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="dnsmasq-1">配置dnsmasq</h4>

<p>在<code>dnsmasq.conf</code>里面添加一个配置<code>dev</code>的配置：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">address</span><span class="o">=</span>/dev/127.0.0.1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重启dnsmasq服务:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo launchctl stop homebrew.mxcl.dnsmasq
</span><span class="line"><span class="nv">$ </span>sudo launchctl start homebrew.mxcl.dnsmasq
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="osx">配置OSX</h4>

<p>安装了dnsmasq之后你有两个选择：</p>

<ol>
  <li>把操作系统所有的DNS查询都由dnsmasq处理</li>
  <li>把<code>.dev</code>的DNS查询交给dnsmasq处理</li>
</ol>

<p>第一个比较简单，在<code>System Preferences</code>里面配置一下就可以了。
第二个需要用/etc/reslov.conf文件来更精细的控制DNS查询:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>sudo mkdir -p /etc/resolver
</span><span class="line"><span class="nv">$ </span>sudo touch /etc/resolver/dev
</span><span class="line"><span class="nv">$ </span>sudo vi /etc/resolver/dev
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在<code>/etc/resolver/dev</code>里面添加一行<code>nameserver 127.0.0.1</code>就可以了。</p>

<h3 id="section">测试效果</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">    <span class="nv">$ </span>ping -c 1 www.sina.com.cn
</span><span class="line">    PING newscd.sina.com.cn <span class="o">(</span>221.236.31.145<span class="o">)</span>: 56 data bytes
</span><span class="line">
</span><span class="line">    <span class="nv">$ </span>ping -c 1 this.is.a.test.dev
</span><span class="line">    PING this.is.a.test.dev <span class="o">(</span>127.0.0.1<span class="o">)</span>: 56 data bytes
</span><span class="line">
</span><span class="line">    <span class="nv">$ </span>ping -c 1 this.is.cool.dev
</span><span class="line">    PING this.is.cool.dev <span class="o">(</span>127.0.0.1<span class="o">)</span>: 56 data bytes
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>嗯哼~</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[构建Deployment系统 (1)]]></title>
    <link href="http://lenciel.cn/2014/04/pipeline-for-deployment/"/>
    <updated>2014-04-22T02:49:38+08:00</updated>
    <id>http://lenciel.cn/2014/04/pipeline-for-deployment</id>
    <content type="html"><![CDATA[<p>对软件公司，特别是互联网软件公司来说，发布流程是企业的<a href="http://lenciel.cn/2013/05/the-importance-of-deploy-as-will/">核心竞争力</a>。</p>

<p>那么什么是一个好的发布流程呢？Github（别忘了它本身也是一家软件公司）的CTO在介绍<a href="http://lenciel.cn/2013/03/boxen-introduction/">Boxen
</a>的时候说过，他们公司新员工从拿电脑到可以开始编码只要30分钟，这给混过几家10w+员工公司的我带来的震撼特别强烈。</p>

<p>所以我觉得，一个好的软件发布流程应该是：</p>

<ol>
  <li>新员工在第一天入职就能push改动到production</li>
  <li>新员工在第一天入职就能学会怎么从production撤销一个错误的改动</li>
  <li>整个deployment流程是可预测的，也是可追溯的</li>
</ol>

<p>那么，如果你到了一个新公司，推开门发现那是一个蛮荒之地，应该怎么办呢？这篇先理一下基本的概念，然后后面分节描述一下讲到的这些工具具体要怎么配置怎么用。</p>

<h1 id="section">善其器</h1>

<p>先check一下东西齐不齐活:</p>

<ol>
  <li>代码repo是放在哪里： (<a href="http://git-scm.com/ (Git)">git</a>, <a href="http://mercurial.selenic.com/ (Mercurial)">hg</a>, …),</li>
  <li>hook到repo的一套有review功能的管理系统: (<a href="http://www.reviewboard.org">ReviewBoard</a>, <a href="https://www.gitlab.com/‎ (Gitlab)">Gitlab</a>, <a href="https://code.google.com/p/gerrit/ (Gerrit)">gerrit</a>, <a href="https://bitbucket.org/ (BitBucket)">bitbucket</a>, <a href="https://github.com/ (Github)">github</a>, …),</li>
  <li>hook到repo的一套CI管理系统:  (<a href="http://jenkins-ci.org/ (Jenkins)">Jenkins</a>, <a href="https://travis-ci.org/ (Travis CI)">Travis CI</a>, …),</li>
  <li>自动部署代码到服务器的系统 (<a href="https://puppetlabs.com/‎ (Puppet)">Puppet</a>, <a href="http://www.getchef.com/chef/ (Chef)">chef</a>, <a href="http://clusto.org/ (Clusto)">clusto</a>, …).</li>
</ol>

<p><img src="http://lenciel.cn/downloads/images/2014_04/deployment_phases.png" alt="Deployment Phases" title="Don't touch me..." /></p>

<p>你选择的工具当然对后面的流程有很大的影响。我们公司是采用<code>git</code>+<code>Gitlab</code>+<code>Reviewboard</code>+<code>Jenkins</code>+<code>fabric</code>来做部署。在搭建这套东西之前我也试过很多其他的东西，有的东西我放弃了是因为太复杂不够轻量(比如Puppet)，有的东西我放弃了是因为，长得太丑(比如Gerrit)。</p>

<h1 id="section-1">开发者视角</h1>

<p>假设你今天入职，写了段代码，从你的视角看到的deployment流程:</p>

<ol>
  <li>提交到本地repo。</li>
  <li>运行<a href="http://www.reviewboard.org/docs/rbtools/dev/">RBTools</a>生成一个Reviewboard的<code>review request</code></li>
  <li>代码通过了review拿到提交许可后，把代码merge然后push到Gitlab上的<code>alpha</code>分支</li>
  <li>Jenkins拿到change后做自动测试，然后部署到test服务器，发邮件通知QA</li>
  <li>QA或者是开发者自己玩一下test服务器，发现没有问题，手动运行Jenkins脚本。脚本会对代码打tag，并部署改动到staging服务器，发邮件通知QA和PO</li>
  <li>PO确认某个版本的所有代码都到了staging，QA做回归测试</li>
  <li>测试通过后，手动运行Jenkins脚本，脚本会部署某个staging服务器的版本到production服务器</li>
  <li>部署完毕后，Jenkins运行相应的冒烟测试，测试通过后邮件关键人士，表明production音容宛在</li>
</ol>

<p>整个流程里面，如果你是一个靠谱的开发者，需要花时间参与的步骤很少。但是如果是一个习惯不好的开发者，可能被review代码的人，Jenkins的自动测试，QA的集成测试或者是回归测试不断修理，惨痛的教训一定会让你成长起来的。</p>

<h1 id="section-2">机器视角</h1>

<p>很多重复性的事情，都是机器在干:</p>

<ol>
  <li>Reviewboard上被通过的代码被push上Gitlab的<code>alpha</code>分支后，Jenkins自动运行:
    <ol>
      <li>静态扫描工具</li>
      <li>单元测试</li>
      <li>有报错发邮件通知事主。没有报错， 部署<code>alpha</code>分支到test服务器</li>
      <li>部署test服务器后，运行集成测试集</li>
    </ol>
  </li>
  <li>有人手工触发staging的build:
    <ol>
      <li>merge<code>alpha</code>分支到<code>staging</code>分支</li>
      <li>部署<code>staging</code>分支到staging服务器</li>
      <li>部署服务器后，运行集成测试集</li>
    </ol>
  </li>
  <li>有人手工触发production的build:
    <ol>
      <li>merge<code>staging</code>分支到<code>production</code>分支</li>
      <li>部署<code>production</code>分支到production服务器</li>
      <li>after deployment, runs integration tests against production</li>
    </ol>
  </li>
</ol>

<p>这里很多具体的步骤需要通过Jenkins和它的插件甚至是自己写的各种脚本来配合完成</p>

<h1 id="section-3">考虑扩展性</h1>

<p>未知的未来，你可能会发现项目换了开发语言，项目换了JS框架，项目自动化测试改成手动了…在架构整套部署系统的时候，要做好和具体语言具体流程的解耦。</p>

<p>一些可能会有用的思路:</p>

<ol>
  <li>项目组足够小，成员能力足够好，可以不用review代码直接checkin到公共repo(成员能力足够好至少意味着，他有写靠谱的UT)</li>
  <li>你构建出来的系统，每个不同的build应该可以很容易的绑定不同的工具:
    1. 静态扫描工具是很好 (比如 <a href="http://www.pylint.org/ (PyLint)">pylint</a>, <a href="https://github.com/jcrocholl/pep8 (pep8.py)">pep8</a>或者<a href="http://www.jshint.com/ (JSHint)">jshint</a>)，但最好项目一开始就用它们。如果是旧项目不要往上套，费时费力
    2. 如果是用precommit的hook来跑测试，开发者本地可以不跑
    3. 如果是有特别要求的项目（安全性，健壮性等），可以很容易绑定其他的工具</li>
  <li>每个项目对应不同的deployment环境有不同的build配置</li>
  <li>三驾马车的服务器配置 (test, staging, production)什么时候应该祭出？个人经验是，如果研发团队超过3人了，再怎么省也得有两个(test+production)。如果有专职的QA团队，并且希望有稳定的版本部署出去，那三种环境的配置几乎是必须的。</li>
  <li>手动触发test到staging以及staging到production主要是为了手动测试的时间窗，让版本发布更可控。你也可以结合项目的具体情况决定要不要把这两步也自动化。</li>
</ol>

<p>如果是用了Jenkins，上面这些就非常方便了，因为说白了每个build不过就是当特定条件满足时执行的一堆特定脚本而已：当然，如果你发现公司还在用Ubuntu 12.04做build server，可能也没有那么方便。</p>

<h1 id="rants">Rants</h1>

<ol>
  <li><em>什么时候需要考虑上这种流程?</em> 如果是三个人的车库队伍，然后就队伍里面又没人有兴趣做对运维，那就算了吧。如果是正经开门做生意的公司，都该上。</li>
  <li><em>能不能允许”加急”?</em> 和很多大公司比，这套流程虽然已经精简了，但是总有时候我们有非常”紧急的”改动，能不能不走这套流程直接上？ 简单的回答就是，不能。如果你发现了有人要求加急，一定是目前的流程太慢。这种情况，一定是有什么东西坏掉了吧。比如之前的代码check不严格，很严重的错误很容易就到了production，或者你的员工们写的UT跑一年都跑不完或者是在build server上根本没法跑。</li>
  <li><em>为什么不自动部署?</em> 是，这里描述的流程只有到test服务器是自动部署的，后面到staging和production都是手动部署。因为据说，把自动merge和自动测试的代码部署到production服务器，是一个很容易让你半夜接到电话的举动，而且很多CEO鬓角的白头发都是因为这样的部署长出来的。当然如果你的manager已经在他老板那里夸口说你来了整个手动测试team都可以解散了，我就只能祝你好运了。</li>
  <li>静态扫描的工具（无论是lint还是style的检查），常常都会给团队带来比UT更好的提升：很多时候你在review的时候要不断告诉同事特别是新手同事你这段代码连style都不对，对两个人都是伤害…如果有个无情的机器用不妥协地负责做这件事情，嗯哼…</li>
</ol>

<p>Hope you have fun when setting up the pipeline for your company.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why look so sad]]></title>
    <link href="http://lenciel.cn/2014/04/why-look-so-sad/"/>
    <updated>2014-04-19T21:54:53+08:00</updated>
    <id>http://lenciel.cn/2014/04/why-look-so-sad</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/iwdrm/we_are_different.gif" alt="We are different" title="Don't touch me..." /></p>

<blockquote><p>&#8220;Why do you look so sad?&#8221;<br />&#8220;Because you speak to me in words and I look at you with feelings.&#8221;</p><footer><strong>Jean-Paul Belmondo</strong> <cite><a href="http://www.imdb.com/title/tt0059592/">Pierrot Le Fou (1965)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[People Empty Out]]></title>
    <link href="http://lenciel.cn/2014/04/people-empty-out/"/>
    <updated>2014-04-19T17:36:49+08:00</updated>
    <id>http://lenciel.cn/2014/04/people-empty-out</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_04/bukowski.jpg" alt="Bukowski" title="Don't touch me..." /></p>

<p>1969年，出版商<a href="http://en.wikipedia.org/wiki/John_Martin_(publisher)">John Martin</a>给了<a href="http://en.wikipedia.org/wiki/Charles_Bukowski">Charles Bukowski</a>一个月薪100刀的offer（当时的100刀大概是现在的500刀左右吧）： 只要他愿意从他当时上班的邮局辞职成为一名全职的作家。时年49岁的Bukowski接受了这份offer，并在1971年出版了他的首部小说<a href="http://en.wikipedia.org/wiki/Post_Office_(novel)">《Post Office》</a>。小说由Martin的<a href="http://en.wikipedia.org/wiki/Black_Sparrow_Press">Black Sparrow出版社</a>出版，名字算是用来表示跟自己过去的邮局里的职业生涯一刀两断。</p>

<p>15年之后，Bukowski在给Martin的信里面表达了他离开邮局的全职工作之后的体验：</p>

<p>(<em>Source: <a href="http://www.amazon.com/gp/product/1574230883/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1574230883&amp;linkCode=as2&amp;tag=letofnot-20">Reach for the Sun Vol. 3</a>; Image: Charles Bukowski, <a href="http://larosacanina.files.wordpress.com/2011/01/bukowski.jpg">via</a>.</em>)</p>

<blockquote><p>Hello John:</p><p>Thanks for the good letter. I don&#8217;t think it hurts, sometimes, to remember where you came from. You know the places where I came from. Even the people who try to write about that or make films about it, they don&#8217;t get it right. They call it &#8220;9 to 5.&#8221; It&#8217;s never 9 to 5, there&#8217;s no free lunch break at those places, in fact, at many of them in order to keep your job you don&#8217;t take lunch. Then there&#8217;s OVERTIME and the books never seem to get the overtime right and if you complain about that, there&#8217;s another sucker to take your place.</p><p>You know my old saying, &#8220;Slavery was never abolished, it was only extended to include all the colors.&#8221;</p><p>And what hurts is the steadily diminishing humanity of those fighting to hold jobs they don&#8217;t want but fear the alternative worse. People simply empty out. They are bodies with fearful and obedient minds. The color leaves the eye. The voice becomes ugly. And the body. The hair. The fingernails. The shoes. Everything does.</p><p>As a young man I could not believe that people could give their lives over to those conditions. As an old man, I still can&#8217;t believe it. What do they do it for? Sex? TV? An automobile on monthly payments? Or children? Children who are just going to do the same things that they did?</p><p>Early on, when I was quite young and going from job to job I was foolish enough to sometimes speak to my fellow workers: &#8220;Hey, the boss can come in here at any moment and lay all of us off, just like that, don&#8217;t you realize that?&#8221;</p><p>They would just look at me. I was posing something that they didn&#8217;t want to enter their minds.</p><p>Now in industry, there are vast layoffs (steel mills dead, technical changes in other factors of the work place). They are layed off by the hundreds of thousands and their faces are stunned:</p><p>&#8220;I put in 35 years&#8230;&#8221;</p><p>&#8220;It ain&#8217;t right&#8230;&#8221;</p><p>&#8220;I don&#8217;t know what to do&#8230;&#8221;</p><p>They never pay the slaves enough so they can get free, just enough so they can stay alive and come back to work. I could see all this. Why couldn&#8217;t they? I figured the park bench was just as good or being a barfly was just as good. Why not get there first before they put me there? Why wait?</p><p>I just wrote in disgust against it all, it was a relief to get the shit out of my system. And now that I&#8217;m here, a so-called professional writer, after giving the first 50 years away, I&#8217;ve found out that there are other disgusts beyond the system.</p><p>I remember once, working as a packer in this lighting fixture company, one of the packers suddenly said: &#8220;I&#8217;ll never be free!&#8221;</p><p>One of the bosses was walking by (his name was Morrie) and he let out this delicious cackle of a laugh, enjoying the fact that this fellow was trapped for life.</p><p>So, the luck I finally had in getting out of those places, no matter how long it took, has given me a kind of joy, the jolly joy of the miracle. I now write from an old mind and an old body, long beyond the time when most men would ever think of continuing such a thing, but since I started so late I owe it to myself to continue, and when the words begin to falter and I must be helped up stairways and I can no longer tell a bluebird from a paperclip, I still feel that something in me is going to remember (no matter how far I&#8217;m gone) how I&#8217;ve come through the murder and the mess and the moil, to at least a generous way to die.</p><p>To not to have entirely wasted one&#8217;s life seems to be a worthy accomplishment, if only for myself.</p><p>yr boy,</p><p>Hank</p></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[马尔克斯的孤独与爱]]></title>
    <link href="http://lenciel.cn/2014/04/rip-marquez/"/>
    <updated>2014-04-18T20:58:42+08:00</updated>
    <id>http://lenciel.cn/2014/04/rip-marquez</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_04/rip_marquez.jpg" alt="Vhost threshold" title="Don't touch me..." /></p>

<p>度过了忙乱的一周，又回到了广汉。吃完饭洗个澡，继续在书房干活，外面的天不知不觉就黯淡下来。偶像派走过来说，《舌尖上的中国》第二季开播了，快来看吧。</p>

<p>但我总觉得有什么没有做，合上电脑之前，突然想起来，对，是马尔克斯没了。早上听到这个消息的时候，我好像想着要说点儿什么来着的。</p>

<p>我最喜欢的作家是马尔克斯，但我一般不会推荐别人去读他的小说。有人问我谁的小说比较好看时，我一般都推荐村上春树。</p>

<p>在我看来，什么是好的小说呢？像《白鹿原》、《平凡的世界》那些当然是非常好的小说，但这些小说你读起来更多是在领略，而不是在参与。换句话说，那些是适合十几岁的时候看的东西。</p>

<p>而活到一定年纪，你就会发现，人生就像在爬山，因为路太窄，加上不是在上坡，就是在下坡，很难在你想策马奔腾的时候就能找到一块平坦的地方，让你潇洒一番：大多数时候你不过是孤孤单单地走在爬山的路上而已。</p>

<p>问我的人大都和我差不多年纪，在城市里面生活，我想他们的体会应该和我类似。而在我眼中，村上春树把城市生活里的孤独感捕捉并表达到了无论是什么背景的读者都会有所共鸣的地步，所以我推荐他的小说。</p>

<p>但村上的小说，虽然我非常喜欢，为什么只能排在马尔克斯后面呢？大概和他有些<a href="http://www.xnuts.cn/marathon_cross-country-race/1886.html">刻板的写作生活有关</a>，村上的作品会让你感觉到从孤独到弃绝的意味。换句话说，你经常能被他营造的孤独感吞没，他却没有告诉你应该怎么办：他自己呢，倒是知道避开作家圈子，知道去听歌跑步健身，知道在鸡蛋和高墙之间如何选择。</p>

<p>而马尔克斯则大不相同。在很多时候，他被书商打上了孤独者的标签贩卖（在我们这个年代，孤独者的孤独也成了时髦，真是让孤独者无处可逃啊）。他下面这段话，也随着《百年孤独》在国内广为传颂：</p>

<blockquote><p>过去都是假的，回忆是一条没有归途的路，以往的一切春天都无法复原，即使最狂乱且坚韧的爱情，归根结底也不过是一种瞬息即逝的现实，唯有孤独永恒。</p></blockquote>

<p>但看过《百年孤独》的人都知道，那其实是个非常热闹的故事。换句话说，虽然是写出了前面这段带着些孤独宿命论的话，马尔克斯并不是仅仅靠营造孤独感来引起你共鸣：他在劝你好好去爱。</p>

<p>孤独的确是人的宿命：我们每个人都是这世界上一个偶然的存在，生命如此漫长又短暂，我们一直在得到和失去，汲取和忘却，不要说别人，我们自己也不一定来得及了解自己。</p>

<p>很多人以为对抗孤独，需要绝对的爱，比如男女之间那种想要燃尽各自的肉体和精神的完全排他性的爱，或者父母孩子之间那种完全忘我不计付出的爱。</p>

<p>但无论村上还是马尔克斯讲诉的故事，都告诉你即便是这些绝对的爱，也难以与岁月相抗衡。人们对此心知肚明，可是往往还是憧憬着绝对的爱，对自己所拥有的“有瑕疵的爱”感到不满足。</p>

<p>于是马尔克斯更进一步，他告诉你那份孤独恰恰是爱的最意味深长的赠品。你接受了这份赠品，就能学会理解别的孤独的灵魂和深藏于它们之中的深邃的爱。读懂他你会明白，是否一起生活一起死去并不重要，能够在他/她到来的时候好好去爱，其充实感是任何体验都无法比拟的。从某种意义上说，那么强烈的感情正是人的一生中最美好的东西。</p>

<p>所以，并没有像电池一样的东西在持续供给着让你对抗孤独。那些某个瞬间点燃的火花，就足够照亮我们漫长的日常生活。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openssl Heartbleed Bug]]></title>
    <link href="http://lenciel.cn/2014/04/openssl-heartbleed-bug/"/>
    <updated>2014-04-10T11:29:15+08:00</updated>
    <id>http://lenciel.cn/2014/04/openssl-heartbleed-bug</id>
    <content type="html"><![CDATA[<p>连某宝都中招的<a href="http://heartbleed.com/">Heartbleed bug</a>究竟是个什么东西？简单地说就是攻击者可以读最多64KB内存的内容。</p>

<p>读了这64KB能干嘛？用报这个bug的人的话来说：</p>

<blockquote><p>Without using any privileged information or credentials we were able steal from ourselves the secret keys used for our X.509 certificates, user names and passwords, instant messages, emails and business critical documents and communication.</p></blockquote>

<p>那么读取64KB内存和获取这么多关键信息究竟有什么关系呢？</p>

<h2 id="the-bug">The bug</h2>
<p>先来看看<a href="http://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=96db9023b881d7cd9f379b0c154650d6c108e9a3">patch</a>里面的<code>ssl/d1_both.c</code>:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span>
</span><span class="line"><span class="nf">dtls1_process_heartbeat</span><span class="p">(</span><span class="n">SSL</span> <span class="o">*</span><span class="n">s</span><span class="p">)</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">s</span><span class="o">-&gt;</span><span class="n">s3</span><span class="o">-&gt;</span><span class="n">rrec</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="o">*</span><span class="n">pl</span><span class="p">;</span>
</span><span class="line">    <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">hbtype</span><span class="p">;</span>
</span><span class="line">    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">payload</span><span class="p">;</span>
</span><span class="line">    <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">padding</span> <span class="o">=</span> <span class="mi">16</span><span class="p">;</span> <span class="cm">/* Use minimum padding */</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到，heartbeat里有一个 <a href="http://en.wikipedia.org/wiki/Transport_Layer_Security">SSLv3</a>  record的指针，这个<code>record</code>的代码如下:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">typedef</span> <span class="k">struct</span> <span class="n">ssl3_record_st</span>
</span><span class="line">    <span class="p">{</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">type</span><span class="p">;</span>               <span class="cm">/* type of record */</span>
</span><span class="line">        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">length</span><span class="p">;</span>    <span class="cm">/* How many bytes available */</span>
</span><span class="line">        <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">off</span><span class="p">;</span>       <span class="cm">/* read/write offset into &#39;buf&#39; */</span>
</span><span class="line">        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">data</span><span class="p">;</span>    <span class="cm">/* pointer to the record data */</span>
</span><span class="line">        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">input</span><span class="p">;</span>   <span class="cm">/* where the decode bytes are */</span>
</span><span class="line">        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">comp</span><span class="p">;</span>    <span class="cm">/* only used with decompression - malloc()ed */</span>
</span><span class="line">        <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">epoch</span><span class="p">;</span>    <span class="cm">/* epoch number, needed by DTLS1 */</span>
</span><span class="line">        <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">seq_num</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span> <span class="cm">/* sequence number, needed by DTLS1 */</span>
</span><span class="line">    <span class="p">}</span> <span class="n">SSL3_RECORD</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>可以看到，每个<code>record</code>有它的<code>type</code>、<code>length</code>和<code>data</code>，规规矩矩。</p>

<p>回到<code>dtls1_process_heartbeat</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* Read type and payload length first */</span>
</span><span class="line"><span class="n">hbtype</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">;</span>
</span><span class="line"><span class="n">n2s</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span><span class="line"><span class="n">pl</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到<code>SSLv3 record</code>的第一个byte就是放这个<code>heartbeat</code>的<code>type</code>。 宏<code>n2s</code> 则是从<code>p</code>里面取两个byte放到payload里面，被用来作为payload的长度。 <strong>注意这里并没有检查<code>SSLv3 record</code> 实际的长度。</strong> </p>

<p>接下来在这个函数里面干了下面这些事情：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">unsigned</span> <span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">,</span> <span class="o">*</span><span class="n">bp</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">r</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cm">/* Allocate memory for the response, size is 1 byte</span>
</span><span class="line"><span class="cm"> * message type, plus 2 bytes payload length, plus</span>
</span><span class="line"><span class="cm"> * payload, plus padding</span>
</span><span class="line"><span class="cm"> */</span>
</span><span class="line"><span class="n">buffer</span> <span class="o">=</span> <span class="n">OPENSSL_malloc</span><span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="n">padding</span><span class="p">);</span>
</span><span class="line"><span class="n">bp</span> <span class="o">=</span> <span class="n">buffer</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到，用户要多少程序就分配多少，最多可以分配到<code>65535+1+2+16</code>，指针bp被用来操作这块内存。然后：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* Enter response type, length and copy payload */</span>
</span><span class="line"><span class="o">*</span><span class="n">bp</span><span class="o">++</span> <span class="o">=</span> <span class="n">TLS1_HB_RESPONSE</span><span class="p">;</span>
</span><span class="line"><span class="n">s2n</span><span class="p">(</span><span class="n">payload</span><span class="p">,</span> <span class="n">bp</span><span class="p">);</span>
</span><span class="line"><span class="n">memcpy</span><span class="p">(</span><span class="n">bp</span><span class="p">,</span> <span class="n">pl</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>宏<code> s2n</code>把<code>n2s</code>做的操作恢复出来：先拿16个bit的值放到2个byte里面，也就是原来请求的payload的长度。然后把<code>pl</code>里面放的payload(请求者提交的data)拷贝到新分配的<code>bp</code>里面。</p>

<p>看起来是很平常的操作，只不过没有认真的检查用户输入而已，但问题也就在这里了。</p>

<h2 id="where-is-the-bug">Where is the bug</h2>

<p>如果用户并没有正在提交声称的那么多个bytes的payload，那么memcpy就会读到同一个process里面SSLv3 record附近的内存内容。</p>

<p>这附近有哪些内容呢？</p>

<p>首先要明白在linux上，内存的动态分配主要是通过<a href="http://linux.die.net/man/2/sbrk">sbrk</a> 或者是 <a href="http://man7.org/linux/man-pages/man2/mmap.2.html">mmap</a>。如果内存是通过sbrk分配的，它会使用<code>heap-grows-up</code>规则，泄露出来的东西不会那么多（但是如果是同时并发请求<a href="http://blog.existentialize.com/diagnosis-of-the-openssl-heartbleed-bug.html#fn:update">还是有东西会漏</a>）。</p>

<p>在这里，<code>pl</code>因为malloc里面的mmap_threshhold多半是sbrk分配的，但是，那些关键的用户数据，则多半是通过mmap分配内存。于是这些数据就会被攻击者用<code>pl</code>拿到。如果再考虑并发请求，就…</p>

<h2 id="the-fix">The fix</h2>

<p>所以，整个patch里面最主要的fix就是：
* 检查是否有长度为0的虚假heartbeat
* 检查record的真实长度</p>

<p>代码如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cm">/* Read type and payload length first */</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="mi">16</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">s3</span><span class="o">-&gt;</span><span class="n">rrec</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* silently discard */</span>
</span><span class="line"><span class="n">hbtype</span> <span class="o">=</span> <span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">;</span>
</span><span class="line"><span class="n">n2s</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="n">payload</span><span class="p">);</span>
</span><span class="line"><span class="k">if</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">payload</span> <span class="o">+</span> <span class="mi">16</span> <span class="o">&gt;</span> <span class="n">s</span><span class="o">-&gt;</span><span class="n">s3</span><span class="o">-&gt;</span><span class="n">rrec</span><span class="p">.</span><span class="n">length</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="cm">/* silently discard per RFC 6520 sec. 4 */</span>
</span><span class="line"><span class="n">pl</span> <span class="o">=</span> <span class="n">p</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="so">So?</h2>

<p>这个bug大概算是影响这么剧烈的bug里面最好明白的一个，所以居然我也看明白了。感受：</p>

<ul>
  <li>为了可扩展性引入了复杂度，经常都会带来恶梦</li>
  <li>用户的输入，无论如何都不能相信，一定要check</li>
  <li>C语言的确是大牛小牛都会踩到坑啊</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[应用开发能火多久?]]></title>
    <link href="http://lenciel.cn/2014/04/why-made-apps/"/>
    <updated>2014-04-09T15:07:57+08:00</updated>
    <id>http://lenciel.cn/2014/04/why-made-apps</id>
    <content type="html"><![CDATA[<p>不管是从日常生活里面的观察和感受，还是查看统计数据，都很容易发现人们在移动设备上停留的时间已经逐渐超过了在PC上停留的时间。当然拐点是不是如下图所示就在今年业界有些争议，但是拐点已经要来了是没有人再怀疑了。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_04/comscore_mobile_users_desktop_users_2014.jpg" alt="mobile vs desktop" title="Don't touch me..." /></p>

<p>而移动设备取代PC机成为最主要的入口之后，就意味着谁占领了移动设备，谁就拥有未来。同样不管是从切身体会还是数据都不难知道，和PC上各种网站（包括各种浏览器+插件提供的服务）占据统治地位不同，在移动平台上，应用程序获得了全面的胜利。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_04/apps_dominate_hires.png" alt="mobile apps vs website" title="Don't touch me..." /></p>

<p>移动客户端上网站和App相比所处的劣势会越来越严重。无论是我们自己公司还是行业内其他人，都知道做移动互联网就是要做应用才行。所以你看手机网页上和游戏里，各种弹窗、各种广告、各种骚扰短信，都是指向某个应用的下载链接。</p>

<p>这也是为什么那么多财大气粗的实体官方的网站在移动客户端上看起来就跟狗屎一样：他们的老板们的逻辑和开发者一样，那些网站没什么人在手机上看，只要我的应用、我的微信公众号看起来好就行了。</p>

<p>这么一来，最好的开发和设计人员都去做应用了，大量的钱也都烧在应用推广上去了。</p>

<p>最终我们手机上的浏览器几乎被闲置了，打开它主要是为了：</p>

<ul>
  <li>搜索</li>
  <li>下载一个应用</li>
  <li>从一些sns程序里面点开某个链接</li>
</ul>

<p>而且，就第三项用处来看，越来越多的sns程序，比如微信，微博等，都是直接在自己内嵌的webview里面打开链接，根本不会使用系统安装的浏览器。</p>

<p>从长远看这种应用一骑绝尘网站无人问津的状况还是对整个生态有很大的风险：</p>

<ul>
  <li>看看有线电视发展到后面是什么样：大寡头们有更好的设备，更强大的制作班底，更多的明星，控制了整个行业。这种状况下，用户打开电视能看到什么样的节目几乎没得选，小团队要靠创新来出头也变得非常困难</li>
  <li>应用主要在少数几个主流应用商店发行，比如Google和Apple的。意味着Google和Apple不仅仅要抽水，还要对应用内容，应用怎么推广，甚至应用用什么语言开发进行控制。</li>
</ul>

<p>比如Apple。在PhoneGap最开始出来的时候，所有用这个hybrid framework开发的应用都被Apple强制封杀，理由居然是“不使用native library开发的应用不像一个应用”。再比如最近，它直接发了一个policy就让所有跟BT币有关的应用下架了。</p>

<p>感觉在移动平台上会上演类似PC上的历史，首先会有Apple和Google这样提供OS的企业通过应用这个渠道来做成大山头。然后生态系统对其他参与者越来越艰辛，于是会有很多企业尝试破冰，比如通过开发功能强大的浏览器形成新的渠道，来脱离寡头们的控制。最终，移动平台上的浏览器肯定也会像现在PC上的浏览器一样强大，成为各种服务的入口。</p>

<p>而且，这个过程肯定会比PC上要快很多。首先，大家都已经被教育过一次了，大腾讯大百度们做自己的浏览器不是做着玩的；更重要的是，Web发展到今天这个地步，开放性已经有些脱离技术，变成了社会生活中的一种意识形态。一旦移动网络资费和速度真正给力，肯定会有揭竿而起的。即使大如Google和Apple，也很难再像当年MS那样hold住全场了。那个时候，很多Myriad这样的做中间件的公司，又会春风得意了吧。</p>

<p>当然，最近这些年肯定还是应用开发热火的时候，小伙伴们，过时不候，放手干吧。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pomodoro Technique]]></title>
    <link href="http://lenciel.cn/2014/04/pomodoroda-tech/"/>
    <updated>2014-04-03T13:44:35+08:00</updated>
    <id>http://lenciel.cn/2014/04/pomodoroda-tech</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_04/pomodoro_tech.jpg" alt="Pomodoro Technique" title="Don't touch me..." /></p>

<p>时间管理对每个人都是非常重要的，相关的理论和工具都有很多。本座试过很轻量的<a href="https://github.com/vim-scripts/todolist.vim">todolist.vim</a>，也试过很大气的<a href="https://www.omnigroup.com/omnifocus">OmniFocus</a>，但可能因为自己比较爱随意乱来的性格，这些工具最终都被本座慢慢荒弃。</p>

<p>倒是从E公司就一直用到现在的<a href="http://pomodorotechnique.com">Pomodoro Technique</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，因为规则简单上手迅捷疗效明显，最终成为了日常生活的一部分。</p>

<h2 id="section">起</h2>

<p>Francesco Cirillo在1992年正式提出了<code>Pomodoro Technique</code>，命名似乎来源于手边的番茄形状的烹调定时器。简单的说，Pomodoro就是：</p>

<ul>
  <li>一天开始的时候规划今天要完成的几项任务</li>
  <li>设定你的番茄钟（软件、闹钟、whatever），时间是25分钟</li>
  <li>开始完成第一项任务，直到番茄钟响铃或提醒</li>
  <li>停止工作，休息3~5分钟</li>
  <li>开始下一个番茄钟，继续该任务。一直循环下去，直到完成该任务，并在列表里将该任务划掉。</li>
  <li>如此这般完成今天所有的事情。</li>
  <li>每四个番茄钟后，休息25分钟。</li>
</ul>

<p>在工作的25分钟周期里面，什么样的中断都置之不理当然是最好的。但如果有中断进来：</p>

<ul>
  <li>非得马上做不可的话，停止当前这个番茄钟并宣告它作废（哪怕还剩5分钟就结束了），完成带来中断的事情，之后再重新开始同一个番茄钟；</li>
  <li>不是必须马上去做的话，将带来中断的事情记在另一个列表里（比如叫”Exception”或者”Unplanned”什么的），然后接着完成这个番茄钟。</li>
</ul>

<p>接下来，一天结束的时候，你可以回忆一下今天完成了几个钟，并且反思：</p>

<ul>
  <li>你受到了哪些中断？</li>
  <li>你最能集中注意力的地方是哪里？</li>
  <li>你如何避免开始做一个无趣的工作？</li>
  <li>什么类型的活动会花去超过你估计的时间？</li>
  <li>你是否因为处理管理性质的事务而没时间做该做的事情？</li>
</ul>

<h2 id="section-1">承</h2>

<p>为什么这种办法是有效的呢？个人觉得主要是两方面的原因。</p>

<h3 id="section-2">心理层面</h3>

<h4 id="section-3">分解过的任务更具体</h4>

<p>我们做一件事情，复杂度太高的话，兴奋度就会降低，你就会选择拖延。一件事情在被分解成很小的部分之后，才会变得清晰。甚至在操作中，如果你一个任务需要7、8个钟都迭代不完，你可能还应该把这件事情先分解成更小的子任务。</p>

<h4 id="section-4">分解过的任务更可控</h4>

<p>休息和工作之间的心境切换起来很难。有时候你来上班或者吃过饭之后，要进入真正做事的状态花的时间会比你想象的要多很多。番茄大法是动作导向的：上好闹钟，订好提示音，可以让你更好控制自己。</p>

<p>完美主义也是妨碍你按时完成任务的一大原因。想出一个完美的解决方案，那不就是拖延么？在Pomodoro大法中有很多迭代开发的禅意：你不能用25分钟内的时间去考虑完美的方案，乖乖上好闹钟，完成25分钟的任务，然后5分钟休息时间里面去想那些改进的方案吧。</p>

<h4 id="section-5">分解过的任务更有趣</h4>

<p>如果任务无趣时，拖延的时间会增加。比如做项目做到最后的收尾工作之类时，常常非常无趣。分解它们，让你知道你多快就能完成它，可以激励自己。</p>

<p>别人催你完成你不想完成的事情时，你多半也做不好。”have-to”和”want-to”之间的矛盾简直就是<a href="http://en.wikipedia.org/wiki/Terrible_twosX">the-terrible-two</a>终生梦魇版。通过使用番茄大法，你每天确信自己能够完成的事情能够做到心中有数。</p>

<h3 id="section-6">生理层面</h3>

<p>如果你常看球赛的话，就会知道一些关于<strong>模式</strong>的八卦。</p>

<p>比如穆图为多家球队效力都表现不错，对于这种成功他解释说：“诅咒对我是无效的，因为我总是把内裤穿在外面。”</p>

<p>约翰特里，切尔西的队长，国家队的中坚，问下他怎么做到集中精力？他会告诉你他每次比赛前都听同一张CD，在同一个地方停车，把鞋带系三次。</p>

<p>我大学球队的主教练，从来不许老婆和女儿坐进替补席。</p>

<p>我们的大脑在一定环境下，会进入某种模式，处理某些问题特别迅速。这种受后天训练得到的反应是Conditioned Reflexes（条件反射）。而简短且固定的专注时间，可以训练你进入这种模式。</p>

<h2 id="section-7">转</h2>

<p>Pomodoro说到底是一种轻量的<a href="http://zh.wikipedia.org/wiki/GTD">GTD</a>规则。</p>

<p>如果是工作内容高度碎片化的人，比如高管，其实是没法做到动不动就入定30分钟不理人间事的。</p>

<p>如果是对创意要求很高的工种，比如画家，作家，好像也不太适合这种非常规律的迭代。</p>

<h2 id="section-8">合</h2>

<p>拿出纸笔，写下你很想完成的一些事情。从里面挑一个最重要的，你最想马上完成的。然后：</p>

<ol>
  <li>定一个10分钟的闹钟</li>
  <li>集中精力完成</li>
  <li>当闹钟到时立刻停止</li>
  <li>休息三分钟</li>
</ol>

<p>结果怎样？你多久看一次闹钟？有没有被其他事情打断？</p>

<p>如果觉得10分钟自己能轻松搞定，就可以慢慢延长这个时间了。有不少软件可以帮助你自由的定时和统计：</p>

<ul>
  <li><a href="https://fnd.io/#/search?mediaType=all&amp;term=Pomodoro">iOS应用</a></li>
  <li><a href="http://www.publicspace.net/Vitamin-R/index.html">Mac应用</a></li>
  <li><a href="http://www.focusboosterapp.com/">Windows应用</a></li>
</ul>

<p>各种浏览器插件那就不说了满坑满谷都是。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>http://pomodorotechnique.com/。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[勾股定理]]></title>
    <link href="http://lenciel.cn/2014/04/time-to-talk-about-math/"/>
    <updated>2014-04-02T14:30:00+08:00</updated>
    <id>http://lenciel.cn/2014/04/time-to-talk-about-math</id>
    <content type="html"><![CDATA[<p>这篇日志主要是想试试:</p>

<ul>
  <li>怎么把<code>d3.js</code>和<code>AngularJS</code>集成到<a href="http://lenciel.cn/2013/03/blog-with-octopress-and-github-pages/">octopress</a>，因为<a href="http://vudlab.com/bart/">setosa</a>很酷</li>
  <li>怎么在某篇日志里面支持specific的js和css</li>
</ul>

<p>玩了一下并不是很麻烦，于是这个静态站点可以干的事情就”动态”多了。比如把课本里面的<a href="http://aleph0.clarku.edu/~djoyce/java/elements/bookI/propI47.html">勾股定理</a>通过画图证明一下(点击黑色背景字母有彩蛋)：</p>

<link rel="stylesheet" type="text/css" href="http://lenciel.cn/downloads/static/css/math_d3_angular.css" />

<script src="http://lenciel.cn/downloads/static/js/d3.min.js" charset="utf-8"></script>

<script src="http://lenciel.cn/downloads/static/js/angular.min.js" charset="utf-8"></script>

<script src="http://lenciel.cn/downloads/static/js/math_d3_angular.js" charset="utf-8"></script>

<div class="main-content" ng-app="app" ng-controller="MainCtrl" ng-style="styles.content" ng-class="{ sm : w &lt; 650 }" ng-init="init()">
    <div id="panel1" class="panel" ng-style="styles.panel1">
      <stage selected-shape="selectedShape" ng-mouseover="selectedShape = null" />
    </div>
    <div id="panel2" class="panel" ng-style="styles.panel2">
      <div class="details">
        <p>
          如图所示的三角形<co points="abc" shape="triangle">ABC</co>角<co points="bac" shape="angle">BAC</co>为直角。
        </p>
        <p>
          勾股定理是说<co points="bdec" shape="square">BC</co>的平方等于<co points="abfg" shape="square">BA</co>的平方加上<co points="ackh" shape="square">AC</co>的平方。证明如下:
        </p>
        <p>
          把<co points="bc" shape="line">BC</co>的平方对应的正方形简称为<co points="bdec" shape="square">CD</co>，同理<co points="ba" shape="line">BA</co>和
          <co points="ac" shape="line">AC</co>的平方分别对应
<co points="abfg" shape="square">GB</co>和<co points="ackh" shape="square">HC</co>
画与<co points="bd" shape="line">BD</co>和<co points="ce" shape="line">CE</co>平行的直线<co points="al" shape="line">AL</co>，然后连接<co points="ad" shape="line">AD</co>和<co points="fc" shape="line">FC</co>。
        </p>
        <p>因为角<co points="bac" shape="angle">BAC</co>
          和角<co points="bag" shape="angle">BAG</co>
          都是直角，所以<co points="ca" shape="line">CA</co>
          和<co points="ag" shape="line">AG</co>在同一条直线上。
        </p>
        <p>
          同理，<co points="ba" shape="line">BA</co>
          和<co points="ah" shape="line">AH</co>也在一条直线上。
        </p>
        <p>
          又由角<co points="dbc" shape="angle">DBC</co>
          和角<co points="fba" shape="angle">FBA</co>
          都是直角，因此它们加上<co points="abc" shape="angle">ABC</co>
          得到的角<co points="dba" shape="angle">DBA</co>
          和<co points="fbc" shape="angle">FBC</co>相等。
        </p>
        <p>
          再由<co points="db" shape="line">DB</co>
          等于<co points="bc" shape="line">BC</co>,
          且<co points="fb" shape="line">FB</co>
          等于<co points="ba" shape="line">BA</co>,
          可得三角形<co points="abd" shape="triangle">ABD</co>面积等于三角形
          <co points="fbc" shape="triangle">FBC</co>。
        </p>

        <p>又由
          <co points="bd" shape="line">BD</co>和
          <co points="al" shape="line">AL</co>平行，所以同底的矩形<co points="bvld" shape="square">BL</co>的面积是三角形
          <co points="abd" shape="triangle">ABD</co>的面积的2倍。同理正方形<co points="gfba" shape="square">GB</co>的面积是三角形<co points="fbc" shape="triangle">FBC</co>面积的两倍。
        </p>

        <p>于是可得矩形<co points="bvld" shape="square">BL</co>面积等于<co points="gfba" shape="square">GB</co>。
        </p>

        <p>同理将
          <co points="ae" shape="line">AE</co>
和<co points="bk" shape="line">BK</co>
连接起来,可证矩形<co points="cvle" shape="square">CL</co>面积等于正方形<co points="hack" shape="square">HC</co>。于是可得正方形<co points="bdec" shape="square">CD</co>
面积等于正方形<co points="gfba" shape="square">GB</co>与<co points="hack" shape="square">HC</co>的和。
        </p>

        <p>这也就证明了
          <co points="bc" shape="line">BC</co>
          的平方等于<co points="ba" shape="line">BA</co>
          的平方加上
          <co points="ac" shape="line">AC</co>的平方。
        </p>
      </div> <!-- end details -->
    </div> <!-- end panel -->
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[晚安(二)]]></title>
    <link href="http://lenciel.cn/2014/03/good-night-1/"/>
    <updated>2014-03-10T06:18:00+08:00</updated>
    <id>http://lenciel.cn/2014/03/good-night-1</id>
    <content type="html"><![CDATA[<p><img alt="block" src="http://lenciel.cn/downloads/images/2014_03/good_night.jpg" align="left" style="margin:0px 5px;width:23%" />  而我每年用掉一些暑假(后来工作了就是年假)陪着外公去兰州，当然不是因为我是影视作品里常常出现的那种孝顺贴心的孙子。事实上即使在父母分开生活之前，我和外公之间也没有太多的交流，是兰州这个地方把我们联系在了一起：不过，你猜错了，并不是什么我爱的人也在这里。</p>

<p>只不过是那趟火车会路过她在的城市，我可以坐在车窗边，对着那个陌生的城市无所顾忌地想着她，如此而已。</p>

<p>“那是个什么样的姑娘？” 终于有一次外公大概觉得自己的事情已经聊完，就漫不经心地问到。</p>

<p>“很明显吗？”</p>

<p>“未必明显。其实正好相反，你小子要藏起来的东西，别人大概很难发现。不过对我怎么可能瞒得住，不要忘了，第一，我比你还能藏；第二，你是我带大的。”</p>

<p>“哦？”</p>

<p>“你小时候每天晚上都很吵。你妈受不了的时候，我就抱着你到阳台上把你拍睡着。”</p>

<p>“好像听我妈说过，经常拍到半夜，辛苦你了。”</p>

<p>“但其实没觉得多累。一方面享受着你到来的欢乐，一方面，也享受着可以让自己胡思乱想的安宁空间。如果拍张照片，估计跟你刚才的表情一样。”</p>

<p>“可能是吧，呵呵。” 我嘴上应着，心里却想，”我可没有你那么多值得回忆的事情撑得起每晚都跑去胡思乱想。”</p>

<p>“放心吧，我不会告诉你妈的。”</p>

<p>这点我相信。密闭的车厢让人们成为莫名其妙的朋友，几次兰州之行后，我和外公也不例外。</p>

<p>“但没有什么好说的，没有什么长发飘飘也没有什么白裙飘飘，只是偶尔会想起她。”</p>

<p>“想什么呢？”</p>

<p>“那不重要。” 我这么说的时候，想起来是因为她才爱这么回答问题的。以前问她什么的时候，她最喜欢回答”那不重要”。哪怕再怎么追问，最多就多说几个字但意思还是没变，比如”那都是不重要的啊”。</p>

<p>“好像也是。不过，等你年纪大了你就会知道，有很多重要的事情你会慢慢不记得。”</p>

<p>“哦？”</p>

<p>“比如我年轻的时候认真背下来的化学元素周期表，几十年来就跟刻在脑袋里面了一样，好像是不可能忘记的。但现在才几年不用，坦白说有不少族已经模糊起来了。反而是有些看起来不重要的事情却会记得很清楚。”</p>

<p>“比如呢？”</p>

<p>“我有没有说过，我和她第一次面对面就聊了一通宵，然后跑到街上去找吃的东西？”</p>

<p>“当然有，外公，你当然有说过。那时候不像现在有那么多便利店，找了大半条街才找到一家刚刚开门的早点店，两个人一起喝了新鲜出炉的豆浆，对吧？”</p>

<p>“是啊，已经记不起来豆浆是什么味道了，但是穿过她脖子的白白的热气，在我心里好像这么多年都没有散去。”</p>

<p>“是因为除开脸，脖子是她露出来最多的地方吧？”</p>

<p>“呵呵，这么说来很遗憾啊。居然记住了白白的热气，却没记住白白的脖子。”</p>

<p>说到这里，我们俩就都笑了起来。我从一开始夹带私货，到后来真正享受起和外公一起的兰州之行，正是因为他这样一个有着非凡成就的长辈，在谈话中很少有高屋建瓴的训导之言，反而透着我父母以及其他长辈都少有的平等和坦率。</p>

<p>后来列车慢慢停了下来，我听到有人在嘟囔着定西到了。</p>

<p>“要下去走走吗？”</p>

<p>“不去了，有点儿晚了。好不容易它也停着不抖了，我就先睡会儿。如果后面想下去走再叫你吧。”</p>

<p>“那我也睡了，晚安。” 我一边爬到上铺一边说。</p>

<p>“晚安。” </p>

<p>外公答了我一句就认真地睡起觉来。我确认了一下他被子是盖好的，就也躺下来，怔怔地继续看着窗外。</p>

<p>晚安，这大概是我说过次数最多的谎话。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[晚安(一)]]></title>
    <link href="http://lenciel.cn/2014/03/good-night-0/"/>
    <updated>2014-03-10T04:18:00+08:00</updated>
    <id>http://lenciel.cn/2014/03/good-night-0</id>
    <content type="html"><![CDATA[<p><img alt="block" src="http://lenciel.cn/downloads/images/2014_03/good_night.jpg" align="left" style="margin:0px 5px;width:23%" />  在去兰州之前，我其实有点儿犹豫。</p>

<p>我的意思当然不是说外公下葬这件事情不值得专程跑一趟。实际上，从他确诊后提出要回兰州去看看，我就一直在帮他说服家里的人，帮他买机票，最后还请假把他和母亲一起送到了兰州。一方面，我在公司算是可有可无的人，有没有出现对大家都不会有影响，走起来非常方便。另一方面，以前每次外公去兰州都是我陪他去的，母亲从来没有去过。毕竟外公是重病之中，有我这样一个轻车熟路的人，好有个照应。</p>

<p>真正成行距离他年底例行体检时查出那片不祥的阴影已经又过去了小半年：也许是正常人生命中不值一提的短暂时光，但已经长到让他形销骨立，不成人形。</p>

<p>当然，那时候我也完全没有想到他再也不会回来。如果知道，不管家里人多么反对，我可能也会按他说的陪他慢慢坐到兰州吧。</p>

<p>但没有那么多如果。我们一左一右把他推出中川机场的时候，初春的阳光打在我们背上，彷佛之前飞机上空姐职业化的笑容，饱满充盈，却让人感觉不到太多温暖。</p>

<p>“飞机果然快啊。像我这种情况，还化疗什么？不该折腾那么久，应该我还能自己走路的时候就过来了。”</p>

<p>“化疗怎么了？人这一辈子不就是一次漫长的化疗，到最后统统死路一条。” 母亲头也没抬。</p>

<p>外公没有理会自己的女儿，却也不再说话，只是默默地凝视着地上我们三个人的影子。他已经骨瘦如柴，又是坐在轮椅上，所以影子难免缩成一团，终究显得矮小起来。而我和母亲的影子，则好像站在家门口送孩子远行的心碎家长，漫长地铺满了整条过道，延绵不绝，不可救药。</p>

<p>后来上了兰州石化派来的接我们的车，外公便也又有了些兴致，就开始不依不饶地说起旧事。他的那些回忆我已经是再熟悉不过了，而母亲仍然保持着对这趟出行的深恶痛绝，所以认真听着并且不时回应着的只有司机师傅。很快他们两个人就用兰州话聊了起来，我知道外公这一方面是方便普通话不怎么熟练的司机师傅，更是给我和母亲不用再假惺惺地装作要参与进去一个正当的理由。</p>

<p>外公这一生都是这么体贴的一个人，大概也正是因为这样，别人很难知道他究竟过得是否快乐。</p>

<p>他六十年代从清华毕业之后，作为国内最出色的自动化专家，在兰州石化支援建设一干就是二十几年，到八十年代调回家乡四川的川大时，已经是总工。凭着深厚的学术知识和丰富的实战经验，外公在川大的自动化系建成了国家重点实验室，如果不是看不惯学术圈的习气，估计早就应该当上院士了。</p>

<p>回四川之后的二十来年他再也没有回过兰州，但外婆去世之后他就常常都吵着要去。</p>

<p>我从母亲第一次要我送外公去兰州时那紧皱的眉头就猜到，外公的兰州之行有其微妙之处。我的意思是，这肯定不是什么单纯的”我这辈子最好的时候都是在兰州过的我要回去看看”的那种归乡之旅。</p>

<p>“其实是因为年轻的时候爱过的人”，虽然我猜到了七八分，但确切的消息是父亲先来告诉我的。我不知道他是因为终于离婚了不需要再保守什么秘密，还是想证明自己出轨的合理性。我这么想的时候，难免对自己有些失望：即便是真心祝福父亲开始新的生活，好像还是没法压抑面对这种谈话时心里的不快。</p>

<p>总之母亲就是因为这个所以没办法说服自己陪外公去兰州：外公不仅仅是这辈子最疼爱她的人，更是她一生的偶像。人们总是可以接受世间一切的不幸与不公，却没法接受内心世界里偶像的坍塌，因为那毕竟是自己竖起来供着的东西。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding]]></title>
    <link href="http://lenciel.cn/2014/03/understanding/"/>
    <updated>2014-03-09T21:25:00+08:00</updated>
    <id>http://lenciel.cn/2014/03/understanding</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/iwdrm/understanding.gif" alt="Understanding" title="Don't touch me..." /></p>

<blockquote><p>&#8220;As long as we were in love, we understood each other. There was nothing more to understand.&#8221;</p><footer><strong>Alain Delon</strong> <cite><a href="http://www.imdb.com/title/tt0056736/">L&#8217;Eclisse (1962)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决iowait过高的告警]]></title>
    <link href="http://lenciel.cn/2014/02/hunting-the-iowait-problem-maker/"/>
    <updated>2014-02-24T09:22:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/hunting-the-iowait-problem-maker</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_02/warning_letter.png" alt="warning letter" title="Don't touch me..." /></p>

<p>从Nagios切到<a href="https://www.zabbix.com">Zabbix</a>之后，经常大清早被iowait过高的告警邮件叫醒。因为这套Zabbix监控是本座搭的，所以解决这个问题就只有本座来了…..哎，不知道是不是把首席运营官给宠坏了。</p>

<h2 id="iowait">iowait的定义和计算方式</h2>

<p>iowait的定义为：</p>

<blockquote><p>iowait is time that the processor/processors are waiting (i.e. is in an idle state and does nothing), during which there in fact was outstanding disk I/O requests.</p></blockquote>

<p>也就是至少有一个I/O在进行时CPU处于<code>idle</code>状态的比例。</p>

<p>我们都知道用<code>vmstat</code>, <code>iostat</code>, <code>sar</code>等命令查看系统状况的时候，CPU有四种比较主要的状态：user, sys, idle和iowait。它们都是表示CPU处于此状态的一个平均比例（其中sar命令是可以用<code>-P</code>具体指定哪个CPU的，其他的命令一般是所有CPU的平均），通常相加应该就是1.</p>

<p>这个比例的统计其实是通过kernel不断的更新计数器然后计算出来的。当时钟中断发生的时候，kernel检查当前CPU是不是idle的。如果不是，就检查正在执行的指令是user space还是kernel space的。如果是user space就给<code>user</code>的计数器加1，kernel space就给<code>sys</code>计数器加1.</p>

<p>类似的，如果CPU是处于idle状态，kernel就检查是不是有I/O操作正在发生（可以是local disk也可以是<code>mount</code>的NFS），如果有就给<code>iowait</code>计数器加1，没有就给<code>idle</code>计数器加1.</p>

<p>当我们运行<code>vmstat</code>或者<code>sar</code>等命令查看时，它们会先读取当前这几个计数器的计数，然后在用户指定的时间里面等待，然后再次读取。因为用户指定的时间里面过去了多少个<code>tick</code>是可以计算的，然后前后计数器的增值也可以计算，就可以算出一个比值。比如如果用户运行的命令是<code>vmstat 2</code>，表示每两秒取样一次，那么：</p>

<ol>
  <li>tick是10ms一个，所以总共是200个ticks</li>
  <li>计数器的增量/200*100就是每个状态的百分比</li>
</ol>

<h2 id="iowait-1">iowait的意义</h2>

<p>这其实比它怎么计算要难理解一些。比如本座之前心里就有一个疑问：既然只是某个process在block，那么系统会schedule其他的事情，这对性能有什么大不了的影响呢？</p>

<p>来看几个例子。</p>

<h3 id="section">例子一</h3>

<p>假设一个程序进行批量的事务，每个事务都有一个10ms的计算任务，计算出的结果通过同步的方式写到磁盘。由于它写结果的文件是阻塞方式打开的，所以I/O完成之前写操作是不会<code>return</code>的。如果我们假设磁盘系统没有cache，每个物理的I/O需要20ms，那么一个事务需要30ms。也就是每秒33个事务（33 tps）。如果把系统算成只有一个CPU的话，很显然<code>iowait</code>就是66%。</p>

<p>这种情况下，如果我们能改进I/O子系统，比如启用磁盘的缓存，让每次物理的I/O只需要1ms的话，那么<code>iowait</code>就会迅速下降到8%左右。可见这种情况下，<code>iowait</code>直接影响着程序的performance。</p>

<h3 id="section-1">例子二</h3>

<p>假设一个磁盘检查的程序运行在系统上，每秒钟读4k的数据。我们假设这个程序的入口是main()，然后读磁盘的函数是read()，main()和read()都是用户态的。read()属于libc.a，会调用kread()这个系统调用来进行物理的I/O，这个时候就进入了kernel态。整个main(),read()和kread执行的时间加起来不长，我们假设是50微秒。而物理的I/O需要多久要看seek的数据有多远，假设需要2-20ms。这样就完全有可能当时钟中断的时候，cpu是idle的，而且I/O正在发生，于是<code>iowait</code>值就达到97-98% (如果每个I/O需要20ms就是99-100%)。</p>

<p>这种情况下，虽然<code>iowait</code>数值非常高，其实这个系统的性能是正常的。</p>

<h3 id="section-2">例子三</h3>

<p>假设有两个程序跑在同一个CPU上。一个程序写得有点儿问题，I/O会阻塞10秒左右。另一个则100%的时间都在做计算。由于当前一个程序阻塞起来的时候，后面这个程序被运行了，因此无论什么时候都没有CPU处于idle的状态等I/O，于是<code>iowait</code>一直是0，这时候其实系统的performance是有很大的问题的。</p>

<h3 id="section-3">例子四</h3>

<p>假设系统是4核的CPU，运行了6个程序。其中4个程序有70%时间在进行物理的I/O，30%的时间在进行计算任务（假设其中25%在用户态，5%在kernel态）。另外2个程序假设100%时间都在用户态进行计算任务，没有任何I/O操作。</p>

<p>如果我们查看系统的CPU状态，大概可能看到下面的状况:</p>

<pre><code>     cpu    %usr    %sys    %iowait   %idle
      0       50      10      40       0
      1       50      10      40       0
      2      100       0       0       0
      3      100       0       0       0
      -       75       5      20       0
</code></pre>

<p>如果我们把相同的6个程序跑到一个6核的机器（相同的CPU和磁盘配置），那么可以简单的认为会有下面的结果：</p>

<pre><code>     cpu    %usr    %sys    %iowait   %idle
      0       25       5      70       0
      1       25       5      70       0
      2       25       5      70       0
      3       25       5      70       0
      4      100       0       0       0
      5      100       0       0       0
      -       50       3      47       0
</code></pre>

<p>也就是说，同样的程序跑在不同的系统上，iowait增加了一倍多，而这个时候其实没有什么performance问题，只不过是系统还能做更多的计算工作。</p>

<h3 id="section-4">结论</h3>

<ul>
  <li>CPU处于<code>iowait</code>状态，并不说明CPU不能运行其他的程序</li>
  <li><code>iowait</code>偏高只能说明系统这个时刻还能进行更多的计算任务，至于是不是出现了performance问题，需要进一步分析才知道</li>
</ul>

<h2 id="section-5">找出造成问题的进程</h2>

<p>虽然每次都是6点半多少说明应该是某个cron任务（因为机器上没有其他自定义的定时任务）但没法具体知道究竟是哪个。</p>

<p>最简单的办法当然是出问题的时候用<code>iotop</code>命令来看了 。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> # iotop
</span><span class="line"> Total DISK READ: 8.00 M/s | Total DISK WRITE: 20.36 M/s
</span><span class="line">  TID PRIO USER DISK READ DISK WRITE SWAPIN IO&gt; COMMAND
</span><span class="line"> 15758 be/4 root 7.99 M/s 8.01 M/s 0.00 % 61.97 % bonnie++ -n 0 -u 0 -r 239 -s 478 -f -b -d /tmp</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是谁又会在6点多起来干这种事情。除开修改系统时间重现问题，还可以通过ps命令查看记录处于<code>D</code>状态的进程来找到。</p>

<p><code>ps</code>命令输出里面对<code>PROCESS STATE CODES</code>的定义是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> D uninterruptible sleep (usually IO)
</span><span class="line"> R running or runnable (on run queue)
</span><span class="line"> S interruptible sleep (waiting for an event to complete)
</span><span class="line"> T stopped, either by a job control signal or because it is being traced.
</span><span class="line"> W paging (not valid since the 2.6.xx kernel)
</span><span class="line"> X dead (should never be seen)
</span><span class="line"> Z defunct ("zombie") process, terminated but not reaped by its parent.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>处于等待I/O完成状态的进程一般就是<code>D</code>，所以可以通过tmux起一个sessio来跑下面的命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">while true; do date; ps auxf | awk '{if($8=="D") print $0;}'; sleep 1; done &gt; /var/log/ps.log</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在又一个这样的6点半：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_02/zabbix_cpu_util.png" alt="warning letter" title="Don't touch me..." /></p>

<p>去日志里面查看：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cat /var/log/ps.log | grep D
</span><span class="line">
</span><span class="line">root      7585  7.9  0.0   5904   812 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5904   812 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5904   812 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5944   944 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.5  0.0   5944   944 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.5  0.0   5944   944 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   6000   968 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   6000   968 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>嗯，原来是<code>/usr/bin/updatedb.mlocate</code>。Google了一下<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>发现其实关掉也没什么：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo killall updatedb.mlocate
</span><span class="line">sudo chmod -x /etc/cron.daily/mlocate</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>整个世界清静了。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>http://www.iasptk.com/ubuntuwp/can-i-disable-updatedb-mlocate/<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>http://ubuntuforums.org/showthread.php?t=1243951&amp;page=2&amp;p=7844783#post7844783<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not Much of A Dancer]]></title>
    <link href="http://lenciel.cn/2014/02/not-a-dancer/"/>
    <updated>2014-02-23T22:06:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/not-a-dancer</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/iwdrm/not_a_dancer.gif" alt="not a dancer" title="Don't touch me..." /></p>

<blockquote><p>&#8220;I’m not much of a dancer.&#8221;</p><footer><strong>Vincent Vega</strong> <cite><a href="http://www.imdb.com/title/tt0110912/">Pulp Fiction(1994)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D动态Gif]]></title>
    <link href="http://lenciel.cn/2014/02/3d-gifs/"/>
    <updated>2014-02-18T12:40:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/3d-gifs</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_02/3dgifs4.gif" alt="3d gifs" title="Don't touch me..." /></p>

<p>托各种SNS的福，有趣的动态gif在网络上漫山遍野。作为电影爱好者的本座，也是<a href="http://lenciel.cn/blog/categories/fu-guang-lue-ying/">重度的gif爱好者</a>。</p>

<p>如上图所示，最近动态gif玩法又有创新了：通过“打白条”的方式实现3D效果。主要的思路就是在动态物体处于背景的时候，白条遮挡动态物体。而当动态物体从背景进入前景的时候，动态物体遮挡白条，造成动态物体溢出图片边界范围的错觉。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_02/3dgifs1.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs2.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs3.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs5.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs6.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs6a.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs8.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs12.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs13.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs14.gif" alt="3d gifs" title="Don't touch me..." /></p>

<p>最喜欢的一副：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_02/3dgifs7.gif" alt="3d gifs" title="Don't touch me..." /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Sochi 2014 Winter Olympics]]></title>
    <link href="http://lenciel.cn/2014/02/the-sochi-2014-winter-olympics/"/>
    <updated>2014-02-14T01:26:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/the-sochi-2014-winter-olympics</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/sochi_winter_olympics.gif" alt="Turn the worst" title="Don't touch me..." /></p>

<blockquote><p>&#8220;Let&#8217;s meet in Sochi, they said&#8230;Like brothers and sisters, they said&#8230;&#8221;</p><footer><strong>Lenciel (2014)</strong></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[听起来很假]]></title>
    <link href="http://lenciel.cn/2014/02/true-facts-that-sound-false/"/>
    <updated>2014-02-12T10:46:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/true-facts-that-sound-false</id>
    <content type="html"><![CDATA[<p>Reddit上有一篇关于 <a href="http://www.reddit.com/r/AskReddit/comments/1sdw81/what_is_a_true_fact_that_sound_completely/">听起来很假的事实</a> 的讨论贴<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，不知道是不是真的:</p>

<blockquote><p>* 做肾脏移植的时候，一般原来的肾都会留着不动，这第三个新来的肾会被放在骨盆里面</p><p>* IPv6可以给地球表面的所有原子分配一个ip（其实比地球面积大100倍的也能搞定）</p><p>* 俄罗斯比冥王星还大 (冥王星表面积: 16.7x10^6 km^2; 俄罗斯表面积: 17.1x10^6 km^2)</p><p>* 如果你把埃菲尔铁塔熔了，铁水放到和铁塔基座面积相同的坑里面，厚度不会超过8厘米</p><p>* 1790年出生并且在1841年成为美国的第10任总统的John Tyler，他有两个孙子还活着</p><p>* 如果原子有银河系那么大，那么中微子就是高尔夫球那么大</p><p>* 人类和香蕉有50%的DNA是相同的</p></blockquote>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>还有一个<a href="http://www.reddit.com/r/AskReddit/comments/1x34t4/whats_the_most_bullshitsoundingbuttrue_fact_you/?limit=500">更老的帖子</a>。 <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Still Long Way To Go]]></title>
    <link href="http://lenciel.cn/2014/01/next-subject/"/>
    <updated>2014-01-17T01:56:00+08:00</updated>
    <id>http://lenciel.cn/2014/01/next-subject</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/next_subject_in_blade_runner.gif" alt="Next Subject" title="Don't touch me..." /></p>

<blockquote><p>&#8220;Next subject: Kowalski, Leon.&#8221;</p><footer><strong>Ridley Scott</strong> <cite><a href="http://www.imdb.com/title/tt0083658/">Blade Runner(1982)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[定制机上恢复google原厂应用]]></title>
    <link href="http://lenciel.cn/2013/12/restore-google-apps/"/>
    <updated>2013-12-18T22:33:00+08:00</updated>
    <id>http://lenciel.cn/2013/12/restore-google-apps</id>
    <content type="html"><![CDATA[<p>最近因为移动的手机丢了，正好宽带升级到100M送了两个电信的卡没地方用，入了一个Rick推荐的电信移动双卡双待的机器：<a href="http://item.jd.com/824702.html">中兴N986</a>。</p>

<p>机器用来当小三机已经是非常不错了，唯一让本座纠结的就是电信的合约机老是喜欢把google账号干掉，而小弟的所有联系人又都在google（虽然现在看起来这么做可能也未必妥当）。</p>

<p>据Rick大大说，之前是可以用小米的<a href="http://app.xiaomi.com/detail/36925">谷歌应用下载器</a>来直接把Google的一干应用装回来。但是好像因为<a href="http://www.zhihu.com/question/21103129">Google不太愿意</a>自己的应用被未授权的雷总装来装去，这个应用已经没有更新了：青漾系统是4.2.1，下载回来的apk直接<code>adb install</code>会因为android版本不match报错。</p>

<p>于是只好去搜了<a href="http://www.teamandroid.com/gapps/">4.2.1的stock gapps包</a>回来自己撸 - <a href="http://pan.baidu.com/s/1iPXn">百度盘分享了一份</a>。</p>

<p>首先要root机器，然后把<code>/system/app</code>路径mount成rw的。</p>

<p>root就是刷recovery然后替换一些文件，当然大天朝有不少神器做得非常不错，比如<a href="http://www.mgyun.com/">刷机大师</a>这种软件，感觉会摧毁电脑城刷机青年的就业机会。而修改目录权限这种事情，如果你对命令行不熟，好像有很多流行的文件夹管理应用可以用来更改目录的权限。</p>

<p>然后，直接把下载回来的gapps.zip解压，进入<code>system/app</code>路径，将自己需要的apk往<code>/system/app</code>路径push就行了。</p>

<p>以Google联系人同步为例，就是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">adb push GoogleContactsSyncAdapter.apk /system/app/.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里要注意的就是所有Google的应用有些基础的依赖，要记得check一下/system/app下面是不是都有，比如<code>GoogleServicesFramework.apk</code>等等。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Take it easy and avoid excitement]]></title>
    <link href="http://lenciel.cn/2013/12/avoid-excitement/"/>
    <updated>2013-12-15T13:17:00+08:00</updated>
    <id>http://lenciel.cn/2013/12/avoid-excitement</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/modern_times_1935.gif" alt="avoid excitement" title="Don't touch me..." /></p>

<blockquote><p>&#8220;Take it easy and avoid excitement.&#8221;</p><footer><strong>Charlie Chaplin</strong> <cite><a href="http://en.wikipedia.org/wiki/Modern_Times_(film)">Modern Times(1935)</a></cite></footer></blockquote>
<hr />
]]></content>
  </entry>
  
</feed>
