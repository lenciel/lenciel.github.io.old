<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@Lenciel]]></title>
  <link href="http://lenciel.cn/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2014-02-23T22:14:44+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Not Much of A Dancer]]></title>
    <link href="http://lenciel.cn/2014/02/not-a-dancer/"/>
    <updated>2014-02-23T22:06:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/not-a-dancer</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/iwdrm/not_a_dancer.gif" alt="not a dancer" title="Don't touch me..." /></p>

<blockquote><p>&#8220;I’m not much of a dancer.&#8221;</p><footer><strong>Vincent Vega</strong> <cite><a href="http://www.imdb.com/title/tt0110912/">Pulp Fiction(1994)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D动态Gif]]></title>
    <link href="http://lenciel.cn/2014/02/3d-gifs/"/>
    <updated>2014-02-18T12:40:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/3d-gifs</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_02/3dgifs4.gif" alt="3d gifs" title="Don't touch me..." /></p>

<p>托各种SNS的福，有趣的动态gif在网络上漫山遍野。作为电影爱好者的本座，也是<a href="http://lenciel.cn/blog/categories/fu-guang-lue-ying/">重度的gif爱好者</a>。</p>

<p>如上图所示，最近动态gif玩法又有创新了：通过“打白条”的方式实现3D效果。主要的思路就是在动态物体处于背景的时候，白条遮挡动态物体。而当动态物体从背景进入前景的时候，动态物体遮挡白条，造成动态物体溢出图片边界范围的错觉。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_02/3dgifs1.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs2.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs3.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs5.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs6.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs6a.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs8.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs12.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs13.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs14.gif" alt="3d gifs" title="Don't touch me..." /></p>

<p>最喜欢的一副：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_02/3dgifs7.gif" alt="3d gifs" title="Don't touch me..." /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Sochi 2014 Winter Olympics]]></title>
    <link href="http://lenciel.cn/2014/02/the-sochi-2014-winter-olympics/"/>
    <updated>2014-02-14T01:26:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/the-sochi-2014-winter-olympics</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/sochi_winter_olympics.gif" alt="Turn the worst" title="Don't touch me..." /></p>

<blockquote><p>&#8220;Let&#8217;s meet in Sochi, they said&#8230;Like brothers and sisters, they said&#8230;&#8221;</p><footer><strong>Lenciel (2014)</strong></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[听起来很假]]></title>
    <link href="http://lenciel.cn/2014/02/true-facts-that-sound-false/"/>
    <updated>2014-02-12T10:46:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/true-facts-that-sound-false</id>
    <content type="html"><![CDATA[<p>Reddit上有一篇关于 <a href="http://www.reddit.com/r/AskReddit/comments/1sdw81/what_is_a_true_fact_that_sound_completely/">听起来很假的事实</a> 的讨论贴<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，不知道是不是真的:</p>

<blockquote><p>* 做肾脏移植的时候，一般原来的肾都会留着不动，这第三个新来的肾会被放在骨盆里面</p><p>* IPv6可以给地球表面的所有原子分配一个ip（其实比地球面积大100倍的也能搞定）</p><p>* 俄罗斯比冥王星还大 (冥王星表面积: 16.7x10^6 km^2; 俄罗斯表面积: 17.1x10^6 km^2)</p><p>* 如果你把埃菲尔铁塔熔了，铁水放到和铁塔基座面积相同的坑里面，厚度不会超过8厘米</p><p>* 1790年出生并且在1841年成为美国的第10任总统的John Tyler，他有两个孙子还活着</p><p>* 如果原子有银河系那么大，那么中微子就是高尔夫球那么大</p><p>* 人类和香蕉有50%的DNA是相同的</p></blockquote>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>还有一个<a href="http://www.reddit.com/r/AskReddit/comments/1x34t4/whats_the_most_bullshitsoundingbuttrue_fact_you/?limit=500">更老的帖子</a>。 <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Still Long Way To Go]]></title>
    <link href="http://lenciel.cn/2014/01/next-subject/"/>
    <updated>2014-01-17T01:56:00+08:00</updated>
    <id>http://lenciel.cn/2014/01/next-subject</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/next_subject_in_blade_runner.gif" alt="Next Subject" title="Don't touch me..." /></p>

<blockquote><p>&#8220;Next subject: Kowalski, Leon.&#8221;</p><footer><strong>Ridley Scott</strong> <cite><a href="http://www.imdb.com/title/tt0083658/">Blade Runner(1982)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[定制机上恢复google原厂应用]]></title>
    <link href="http://lenciel.cn/2013/12/restore-google-apps/"/>
    <updated>2013-12-18T22:33:00+08:00</updated>
    <id>http://lenciel.cn/2013/12/restore-google-apps</id>
    <content type="html"><![CDATA[<p>最近因为移动的手机丢了，正好宽带升级到100M送了两个电信的卡没地方用，入了一个Rick推荐的电信移动双卡双待的机器：<a href="http://item.jd.com/824702.html">中兴N986</a>。</p>

<p>机器用来当小三机已经是非常不错了，唯一让本座纠结的就是电信的合约机老是喜欢把google账号干掉，而小弟的所有联系人又都在google（虽然现在看起来这么做可能也未必妥当）。</p>

<p>据Rick大大说，之前是可以用小米的<a href="http://app.xiaomi.com/detail/36925">谷歌应用下载器</a>来直接把Google的一干应用装回来。但是好像因为<a href="http://www.zhihu.com/question/21103129">Google不太愿意</a>自己的应用被未授权的雷总装来装去，这个应用已经没有更新了：青漾系统是4.2.1，下载回来的apk直接<code>adb install</code>会因为android版本不match报错。</p>

<p>于是只好去搜了<a href="http://www.teamandroid.com/gapps/">4.2.1的stock gapps包</a>回来自己撸 - <a href="http://pan.baidu.com/s/1iPXn">百度盘分享了一份</a>。</p>

<p>首先要root机器，然后把<code>/system/app</code>路径mount成rw的。</p>

<p>root就是刷recovery然后替换一些文件，当然大天朝有不少神器做得非常不错，比如<a href="http://www.mgyun.com/">刷机大师</a>这种软件，感觉会摧毁电脑城刷机青年的就业机会。而修改目录权限这种事情，如果你对命令行不熟，好像有很多流行的文件夹管理应用可以用来更改目录的权限。</p>

<p>然后，直接把下载回来的gapps.zip解压，进入<code>system/app</code>路径，将自己需要的apk往<code>/system/app</code>路径push就行了。</p>

<p>以Google联系人同步为例，就是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">adb push GoogleContactsSyncAdapter.apk /system/app/.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里要注意的就是所有Google的应用有些基础的依赖，要记得check一下/system/app下面是不是都有，比如<code>GoogleServicesFramework.apk</code>等等。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Take it easy and avoid excitement]]></title>
    <link href="http://lenciel.cn/2013/12/avoid-excitement/"/>
    <updated>2013-12-15T13:17:00+08:00</updated>
    <id>http://lenciel.cn/2013/12/avoid-excitement</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/modern_times_1935.gif" alt="avoid excitement" title="Don't touch me..." /></p>

<blockquote><p>&#8220;Take it easy and avoid excitement.&#8221;</p><footer><strong>Charlie Chaplin</strong> <cite><a href="http://en.wikipedia.org/wiki/Modern_Times_(film)">Modern Times(1935)</a></cite></footer></blockquote>
<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Look on Mac]]></title>
    <link href="http://lenciel.cn/2013/12/quick-look-on-mac/"/>
    <updated>2013-12-14T15:34:00+08:00</updated>
    <id>http://lenciel.cn/2013/12/quick-look-on-mac</id>
    <content type="html"><![CDATA[<p>Mac平台上，如果我们在Finder里面查看文件，有一个不太容易被察觉的方式是使用<a href="http://en.wikipedia.org/wiki/Quick_Look">Quick Look</a>：选中文件的情况下按<code>空格键</code>或者是<code>Cmd+Y</code>。速度快，疗效好，唯一的缺点就是有很多文件格式支持不佳，比如没有扩展名的config文件，比如各种markdown，比如图片等等。</p>

<p>最近在Github上看到一个<a href="https://github.com/sindresorhus/quick-look-plugins">Quick Look插件集中营</a>，非常不错的精选集，推荐也在用Quick Look的小伙伴们试试。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hurt myself when shoot a goal]]></title>
    <link href="http://lenciel.cn/2013/11/a-lot-of-healing-to-do/"/>
    <updated>2013-11-17T22:11:00+08:00</updated>
    <id>http://lenciel.cn/2013/11/a-lot-of-healing-to-do</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/healing_to_do.gif" alt="Should do more healing" title="Don't touch me..." /></p>

<blockquote><p>&#8220;I guess I’ve still got a lot of healing to do.&#8221;</p><footer><strong>Owen Wilson</strong> <cite><a href="http://www.imdb.com/title/tt0838221/">The Darjeeling Limited(2007)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下后台运行goagent]]></title>
    <link href="http://lenciel.cn/2013/11/replace-goagentx-with-lines-of-scripts/"/>
    <updated>2013-11-14T13:22:00+08:00</updated>
    <id>http://lenciel.cn/2013/11/replace-goagentx-with-lines-of-scripts</id>
    <content type="html"><![CDATA[<p>几年过去了，<a href="https://code.google.com/p/goagent/">Goagent</a>是本座翻墙唯一的选择。在Mac上使用它最开始我用了<a href="https://github.com/ohdarling/GoAgentX">GoAgentX</a>，但使用了一段时间之后发现几个不太满意的地方：</p>

<ul>
  <li>不是简单给GoAgent做了个界面，而是集成了多个翻墙工具，选项挺多挺乱的（可能对其他用户是一个好事）</li>
  <li>每次GoAgent更新之后，GoAgentX更新的时间都比较滞后</li>
  <li>GoAgentX更新之后，经常无法工作，需要做这样那样的调整</li>
</ul>

<p>但其实用GoAgent我们需要的无非是<code>python proxy.py</code>，有很多办法让它运行起来。本座比较喜欢的是用tmux把这个任务跑在一个detach了的session，如果连接有问题再attach上去看看是什么问题。具体流程如下：</p>

<p>先装<a href="https://github.com/aziz/tmuxinator">tmuxinator</a>，看名字不知道是不是受了ubuntu下面terminator的启发。然后新建一个项目用来跑goagent:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>mux new goagent
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>项目配置文件（假设你的goagent放在<code>~/bin/goagent/local</code>）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">name</span><span class="p">:</span> <span class="n">goagent</span>
</span><span class="line"><span class="ss">root</span><span class="p">:</span> <span class="o">~</span><span class="sr">/bin/</span><span class="n">goagent</span><span class="o">/</span><span class="n">local</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="ss">windows</span><span class="p">:</span>
</span><span class="line">  <span class="o">-</span> <span class="ss">shell</span><span class="p">:</span> <span class="n">python</span> <span class="n">proxy</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样就只需要你在需要翻墙的时候<code>mux goagent</code>一下即可，detach或者attach到这个session也非常方便。当然不使用tmuxinator而是直接用shell脚本写一堆tmux命令也可以达到一样的效果，用tmuxinator是因为本座自己还有一堆别的Django项目的tmuxinator项目。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix Python after upgrade to Maverick]]></title>
    <link href="http://lenciel.cn/2013/10/maverick-and-python/"/>
    <updated>2013-10-24T22:02:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/maverick-and-python</id>
    <content type="html"><![CDATA[<p>升级到最新的osx版本Maverick之后，打开iTerm2就报错：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class="line">  File <span class="s2">&quot;&lt;string&gt;&quot;</span>, line 1, in &lt;module&gt;
</span><span class="line">ImportError: No module named virtualenvwrapper.hook_loader
</span><span class="line">virtualenvwrapper.sh: There was a problem running the initialization hooks.
</span><span class="line">If Python could not import the module virtualenvwrapper.hook_loader,
</span><span class="line">check that virtualenv has been installed <span class="k">for</span>
</span><span class="line"><span class="nv">VIRTUALENVWRAPPER_PYTHON</span><span class="o">=</span>/usr/bin/python and that PATH is
</span><span class="line"><span class="nb">set </span>properly.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>敲pip之后也报错：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class="line">  File <span class="s2">&quot;/usr/local/bin/pip&quot;</span>, line 5, in &lt;module&gt;
</span><span class="line">    from pkg_resources import load_entry_point
</span><span class="line">  File <span class="s2">&quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&quot;</span>, line 2603, in &lt;module&gt;
</span><span class="line">    working_set.require<span class="o">(</span>__requires__<span class="o">)</span>
</span><span class="line">  File <span class="s2">&quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&quot;</span>, line 666, in require
</span><span class="line">    <span class="nv">needed</span> <span class="o">=</span> self.resolve<span class="o">(</span>parse_requirements<span class="o">(</span>requirements<span class="o">))</span>
</span><span class="line">  File <span class="s2">&quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&quot;</span>, line 565, in resolve
</span><span class="line">    raise DistributionNotFound<span class="o">(</span>req<span class="o">)</span>  <span class="c"># XXX put more info here</span>
</span><span class="line">pkg_resources.DistributionNotFound: <span class="nv">pip</span><span class="o">==</span>1.3.1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这坨<code>pkg_resources.DistributionNotFound</code>的错正好前两天装CentOS的机器<a href="http://stackoverflow.com/questions/7446187/no-module-named-pkg-resources">看到过</a>。</p>

<p>运行下面的命令更新了<code>setuptools</code>之后重装了<code>pip</code>和<code>virtualenv</code>、<code>virtualenvwrapper</code>就好了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
</span><span class="line">sudo python ez_setup.py
</span><span class="line">sudo easy_install -U pip
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sinned Too Much]]></title>
    <link href="http://lenciel.cn/2013/10/sinned-too-much/"/>
    <updated>2013-10-20T16:49:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/sinned-too-much</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/live_a_simple_life.gif" alt="Sinned Too Much" title="Live a simple life..." /></p>

<blockquote><p>&#8220;I thought I’d lived a simple life. But I’ve sinned too much.&#8221;</p><footer><strong>Chan-wook Park</strong> <cite><a href="http://www.imdb.com/title/tt0364569/">Oldboy(2003)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打开pip的download cache]]></title>
    <link href="http://lenciel.cn/2013/10/pip-download-cache/"/>
    <updated>2013-10-17T13:25:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/pip-download-cache</id>
    <content type="html"><![CDATA[<p>Python的标准库实在是<a href="http://lenciel.cn/2013/10/recharging-the-python-standard-library/">不够用</a>，所以一个很常见的情况是我们需要在每个项目使用的<code>virtualenv</code>里面都安装一些常用的库。</p>

<p>为了加速安装的过程，有两个小窍门。</p>

<p>一个是使用国内的源，比如<a href="http://www.v2ex.com/">v2ex</a>提供的。只需要新建或者编辑<code>~/.pip/pip.conf</code>，加入一行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[global]
</span><span class="line">index-url = http://pypi.v2ex.com/simple
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另一个就是打开pip的<code>download cache</code>，这样可以避免pip每次都去下载相同的东西。只需要在<code>.bashrc</code>或者是<code>.zshrc</code>里面加入一行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export PIP_DOWNLOAD_CACHE=$HOME/.pip-download-cache
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Python标准库充电]]></title>
    <link href="http://lenciel.cn/2013/10/recharging-the-python-standard-library/"/>
    <updated>2013-10-17T12:27:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/recharging-the-python-standard-library</id>
    <content type="html"><![CDATA[<p>Python的自荐页面<a href="http://www.python.org/about/">About Python</a>上号称自家的标准库是”batteries included”的，但实际情况却不是这样。对Python标准库的批评几乎从来没有中断过。著名的Python包<a href="http://docs.python-requests.org/en/latest/">Requests</a>的作者甚至决定永久把Requests保持为第三方库而拒绝加入标准库，他的理由是：<a href="http://www.leancrew.com/all-this/2012/04/where-modules-go-to-die/">加入标准库就会死翘翘</a>。</p>

<p>再举个例子，我们最近的项目里面都用到了<a href="https://pypi.python.org/pypi/pytz/">pytz</a>。标准库里面的datetime是支持时区的（tzinfo类），但是并没有包含时区信息（tzinfo是抽象类需要自己实现）。遵照前人的经验使用pytz是最好的办法<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<p>所以不奇怪的是，几乎所有的Python项目都会引用一堆优秀的第三方库。为了管理这些依赖一般都会用上pip:</p>

<ul>
  <li>在项目里面用pip freeze生成一个<code>requirement.txt</code>文件</li>
  <li>在创建<code>virtualenv</code>的时候使用之前生成的文件安装所有的依赖</li>
</ul>

<p>为了不在每次运行<code>pip install -r requirements.txt</code>的时候都下载一堆依赖，你还可以打开pip的<a href="http://lenciel.cn/2013/10/pip-download-cache/">download cache</a>。如果整个公司在做项目的时候都需要经常使用一些包，甚至可以考虑<a href="https://github.com/wolever/pip2pi">做一个Pypi</a>的库来共享，类似于Maven的Repo。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://stackoverflow.com/questions/2532729/daylight-saving-time-and-time-zone-best-practices/3404919#3404919">保存时间和时区的最佳实践</a>.   <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://stackoverflow.com/questions/14762518/python-datetime-strptime-and-strftime-how-to-preserve-the-timezone-informat">如何在datetime转换中保存时区信息</a>.    <a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NASA造笔的事情也是假的]]></title>
    <link href="http://lenciel.cn/2013/10/the-myth-of-nasas-expensive-space-pens/"/>
    <updated>2013-10-12T12:46:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/the-myth-of-nasas-expensive-space-pens</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/space-pen.jpg" alt="Space Pen" title="Don't touch me..." /></p>

<p>在软件开发中我们一说到避免过度设计，经常有两个例子会被抬出来，其中一个就是NASA造了昂贵的太空笔，然后俄罗斯用很简单的方案解决问题的故事（另一个大概就是传送带旁边放电风扇的故事）。<a href="http://www.snopes.com/business/genius/spacepen.asp">NASA造笔的故事</a>大概是这样的:</p>

<blockquote><p>太空竞赛开始的1960年代，NASA面临一大难题，宇航员需要用笔在真空环境下写字。NASA于是展开了研究，花了150万美元开发出了“宇航员笔”，并在商业市场上取得了小小的成功。</p><p>俄罗斯人遇到了同样的问题。</p><p>他们用铅笔搞定。</p></blockquote>

<p>非常有启发意义的故事，不是吗？只不过这不是真相。其实NASA一开始就在太空中使用铅笔，但是铅笔在零重力下会造成粉尘特别是石墨这类导电的粉尘飘散，所以被替代了。替代品是<a href="http://www.scientificamerican.com/article.cfm?id=fact-or-fiction-nasa-spen">Fisher公司开发的一款可以在极端条件下使用的笔</a>:</p>

<blockquote><p>Paul C. Fisher and his company, the Fisher Pen Company, reportedly invested $1 million to create what is now commonly known as the space pen. None of this investment money came from NASA&#8217;s coffers &#8211; the agency only became involved after the pen was dreamed into existence. In 1965 Fisher patented a pen that could write upside-down, in frigid or roasting conditions (down to minus 50 degrees Fahrenheit or up to 400 degrees F), and even underwater or in other liquids. If too hot, though, the ink turned green instead of its normal blue.</p></blockquote>

<p>在测试之后，NASA订购了400支Fisher笔，总共花费在一千美元以下。俄罗斯在一年之后也开始订这种笔了。Fisher公司目前仍然在<a href="http://www.spacepen.com/originalastronautspacepen.aspx">销售这种太空笔</a>，并且你可以很方便的买到：<a href="http://www.amazon.com/exec/obidos/ASIN/B0015ZP2AC/ref=nosim/0sil8">Amazon上</a>30来刀，甚至还有一个一看就不是官方网站的<a href="http://www.spacepen.cn/index.php">中文官方网站</a>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No Clock On My Business]]></title>
    <link href="http://lenciel.cn/2013/10/no-clock-on-my-business/"/>
    <updated>2013-10-09T00:37:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/no-clock-on-my-business</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/no_clock_on_my_business.gif" alt="No Clock On My Business" title="Don't touch me..." /></p>

<blockquote><p>&#8220;There is no clock on my business!&#8221;</p><footer><strong>Coen Brothers</strong> <cite><a href="http://www.imdb.com/title/tt1403865/">True Grit (2010)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[HTTPS WHAT?]]></title>
    <link href="http://lenciel.cn/2013/09/https-what/"/>
    <updated>2013-09-10T13:28:00+08:00</updated>
    <id>http://lenciel.cn/2013/09/https-what</id>
    <content type="html"><![CDATA[<p>最近NSA相关话题很火。很多IT从业者都知道，HTTPS可以保护用户敏感的数据，但是说起HTTPS <em>到底</em> 是如何工作的，其实心里并不清楚。</p>

<p>使用HTTPS之后，数据是如何被保护的？Client和Server之间如果有人在hacking，HTTPS建立的连接凭什么就是安全的？什么是安全证书？为什么有时候我们需要付钱才能买到一个？</p>

<h3 id="a-series-of-tubes">A Series of Tubes</h3>

<p>当你访问网页的时候，你发出的请求其实要翻越各种网关走很长的路，这一路上都可能有妖魔鬼怪在等着搞你，的数据。</p>

<p><img src="http://lenciel.cn/downloads/images/series_of_tubes.png" alt="A series of tubes" title="Don't touch me…" /></p>

<p>一般我们访问网页的时候，请求使用的是HTTP，也就是Client和Server之间的数据是明文传送的。<a href="http://security.stackexchange.com/a/18861/4327">HTTP没有使用任何加密的原因有很多</a>:</p>

<ul>
  <li>加密会消耗更多的计算能力</li>
  <li>加密会消耗更多的带宽</li>
  <li>加密破坏了Cache</li>
</ul>

<p>当然，还有一个很多开发组织羞于承认的原因，加密增加了开发的难度。但是，只要是负责任的Web应用开发者，都不会让你的密码等关键信息以明文的方式传来传去。</p>

<h3 id="transport-layer-security-tls">Transport Layer Security (TLS)</h3>

<p>TLS作为SSL的前驱协议，常常被用来实现对HTTP连接的加密（比如用来实现HTTPS）。TLS是传输层的，因此在<a href="http://en.wikipedia.org/wiki/OSI_model#Examples">OSI模型</a>里面比HTTP更底层，换句话说，在HTTP连接之前，先要进行TLS连接的建立。</p>

<p>TLS是一种混合型的加密系统，也就是说它使用了多种加密技术体系，比如：</p>

<blockquote>
  <p><strong>Public Key Cryptography</strong> </p>

  <p><strong>Symmetric Key Cryptography</strong> </p>
</blockquote>

<h3 id="public-key-encryption">Public Key Encryption</h3>

<p><code>Public Key Encryption</code>使用公钥私钥进行加密解密：通信中的各方都有一对公钥私钥。明文信息用公钥加密成密文，密文用私钥解密成明文。</p>

<p>这种加密系统理想之处在于，在一个公开的没有加密的连接中，可以迅速地为之前互不相干的通信双方建立起一个加密了的连接。</p>

<p>当一条消息被加密成密文之后，<strong>只能使用</strong>加密用的公钥对应的私钥才能解密。这些钥匙的命名也体现了它们的使用场景：公钥可以被公开，但是私钥一定要收好。</p>

<p>以CS架构的系统为例，Client和Server都可以使用自己的私钥，只要在session中双方都认可所谓的<code>shared secret key</code>。这样即使有人监听了Client和Server之间的通信，他也没法知道Client或者Server的私钥，同时也不知道session的密钥。</p>

<p>这是怎么做到的? 数学!</p>

<h4 id="diffie-hellman">Diffie-Hellman</h4>

<p>这种交换通常使用所谓的<a href="http://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">Diffie-Hellman密钥交换流程</a>。这套流程主要是让Client和Server之间生成一个<code>shared secret key</code>。</p>

<p>假设Alice和Bob在做DH交换（不是Desperate Housewife），他们会先明文共享一个 <code>root</code>值 (一般是2、3或者5这样的整数)和一个大质数 (300%2B位整数)。</p>

<p>如前所述，Alice和Bob还有自己的私钥(100%2B位的整数)，他们不能告诉对方私钥，而是通过双方共享的<code>root</code>和大质数计算出一个<code>mixture</code>：</p>

<blockquote>
  <p>Alice的mixture = (root的Alice私钥值次方) % 大质数
Bob的mixture   = (root的Bob私钥值次方) % 大质数</p>
</blockquote>

<p>注意这里的%是模运算</p>

<p>计算出<code>mixture</code>之后，Alice和Bob就把这个结果发送给对方，然后继续如下的计算：</p>

<blockquote>
  <p>Alice这边：(Bob的mixture的Alice私钥值次方) % 大质数
Bob这边：(Alice的Bob私钥值次方) % 大质数</p>
</blockquote>

<p>这样在Bob和Alice两边独立计算，但得出的结果却是一致的：这就是<code>shared secret</code>了。可以看到这个流程的设计非常注意信息的保护：整个过程中双方没有交换自己的私钥，最后得到的<code>shared secret</code>也没在网络上发送。</p>

<p>对数学计算不感冒的同学，下面这张Wikipedia的配图非常直观：</p>

<p><img src="http://blog.hartleybrody.com/wp-content/uploads/2013/07/Diffie-Hellman_Key_Exchange.png" alt="Diffie-Hellman Key Exchange" /></p>

<p>从图里可以看到，双方一开始共享的黄色，在最后生成了共享的褐色，而这期间交换的只有被称为<code>mixture</code>的中间产物：即使有人监听并拿到，也无所谓。</p>

<h3 id="symmetric-key-encryption">Symmetric Key Encryption</h3>

<p>前面说的这种流程每个session只用在初始化连接的时候发生一次。一旦生成了<code>shared secret</code>，Client和Server之间就可以使用<a href="http://en.wikipedia.org/wiki/Symmetric-key_cryptography">symmetric-key加密系统</a>了。</p>

<p>这种使用<code>shared secret</code>的加密通信会涉及一系列的<a href="http://en.wikipedia.org/wiki/Cipher_suite">cipher suite</a>，也就是一系列的加密算法。</p>

<h3 id="section">认证</h3>

<p>Diffie-Hellman密钥交换流程没有解决认证的问题。这就好比我们拿起电话跟朋友打过去，先进行了DH交换，这样这次通话是其他人没法破解的。但是如果其实对方根本就不是朋友，那么还是白加密了。</p>

<p>为了解决认证的问题，我们需要 <a href="http://en.wikipedia.org/wiki/Public_key_infrastructure">Public Key Infrastructure</a> 来确保对方是我们要通信的对象。这些infrastructure用来创建，管理，发放和注销签名证书：没错，就是你花钱买了才能让你的网站可以使用HTTPS的可恶的证书。</p>

<p>证书是什么东西？为什么它可以让通信更安全？</p>

<h3 id="section-1">证书</h3>

<p>粗略地说，证书就是一个使用数字签名把机器的公钥和身份进行绑定的文件，来防止有人把自己的公钥亮出来冒充他人身份。在实际操作中，身份主要是通过域名来体现。</p>

<p>大多数的web浏览器都会检查证书有没有使用可信的<code>Certificate Authority</code>或者说<code>CA</code>授权的签名。CA在授权之前，会进行人工检查，看证书申请者是否:</p>

<ol>
  <li>实际存在的人或者组织</li>
  <li>对自己声称的身份，比如域名，有所有权</li>
</ol>

<p>一旦授权签名，就说明认定证书所有者的身份和它提供的公钥是绑定的。</p>

<p>我们的浏览器都会添加一堆可信的CA证书，而如果访问的服务器不能返回可信的CA证书，浏览器就会提示用户。换句话说，即使一个恶意网站生成了绑定自己机器公钥的证书声称自己是facebook.com，因为这个证书不是可信CA的，浏览器也不会相信它。</p>

<p><strong>增强型证书</strong></p>

<p>除开一般的<code>X.509</code>证书，还有一种<a href="http://en.wikipedia.org/wiki/Extended_validation">增强型证书</a>提供一种更强的身份校验。</p>

<p>要申请这种证书CA会进行更细致的检查，比如要求提供使用域名的账单等。一旦使用了这种证书，在有的浏览器工具栏上可以看到站点是绿色的。</p>

<p><strong>一个服务器多个站点</strong></p>

<p>一般如果多个网站使用同一个服务器来部署会使用<code>named virtual hosts</code>。但由于TLS握手发生在HTTP连接建立之前，所以可能会造出 <a href="http://en.wikipedia.org/wiki/Transport_Layer_Security#Support_for_name-based_virtual_servers">问题</a>。</p>

<p>因此如果你的网站需要HTTPS，空间提供者都会要求你租用独立IP的服务器。</p>

<p>—</p>

<p>最后，Wikipedia是研究这种东西的好去处, 也可以看看 <a href="https://www.coursera.org/course/crypto">Coursera的这个课程</a> 。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Secret Love]]></title>
    <link href="http://lenciel.cn/2013/08/secret-love/"/>
    <updated>2013-08-26T21:59:00+08:00</updated>
    <id>http://lenciel.cn/2013/08/secret-love</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/secret_love.gif" alt="Secret Love" title="Don't touch me..." /></p>

<blockquote><p>&#8220;I think we’re just gonna have to be secretly in love with each other and leave it at that, Ritchie.&#8221;</p><footer><strong>Gwyneth Paltrow</strong> <cite><a href="http://www.imdb.com/title/tt0265666/">The Royal Tenenbaums(2001)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Butterick的实用字体设计]]></title>
    <link href="http://lenciel.cn/2013/08/buttericks-practical-typography/"/>
    <updated>2013-08-26T11:11:00+08:00</updated>
    <id>http://lenciel.cn/2013/08/buttericks-practical-typography</id>
    <content type="html"><![CDATA[<p>最近和一个朋友聊天，他说最近几年大概是Flat流行网页上除开字就没别的了，字体设计被各种强调。</p>

<p>这位老大在上海经营自己的网页设计公司，但是大家够熟，本座就冒着班门弄斧的危险纠正了他一嘴：很多年前，<a href="http://www.theverge.com/2012/7/24/3177332/ia-oliver-reichenstein-writer-interview-good-design-is-invisible">Oliver Reichenstein</a>就说过”<a href="http://ia.net/blog/the-web-is-all-about-typography-period/">Web设计95%是字体设计</a>“了。而且这种观点还一直被<a href="http://www.smashingmagazine.com/2012/07/24/one-more-time-typography-is-the-foundation-of-web-design/">反复强调</a>。</p>

<p>当然，设计师的世界里面可能这些都没有问题。但是现实是，设计师设计的Web只是Web中的%0.5，世界上还有大量的网页是被朋友这种小公司，甚至是程序员们自己设计出来的。而且，网页上可选的中文字体先天可选项就很少，所以字体设计或者说<code>Typography</code>虽然如此重要，其实主要是靠下面两个途径解决的：</p>

<ul>
  <li>研究开源的template</li>
  <li>看淘宝、百度这些大站的设定</li>
</ul>

<p>但是借鉴得再多，不花时间总结，还是难成系统。最近看到一本Butterick的<a href="http://practicaltypography.com/typography-in-ten-minutes.html">好书</a>，对字体设计的原则做了一番高度归纳，并且声称：</p>

<blockquote><p>this is a bold claim, but i stand be­hind it: if you learn and fol­low these five ty­pog­ra­phy rules, you will be a bet­ter ty­pog­ra­ph­er than 95% of pro­fes­sion­al writ­ers and 70% of pro­fes­sion­al de­sign­ers. (The rest of this book will raise you to the 99th per­centile in both categories.)</p></blockquote>

<p>归纳出来的原则共有5条：</p>

<ul>
  <li>
    <p>文档的字体设计主要取决于你<code>body</code>部分的设计。所以在任何一个项目里面，先把<code>body</code>部分弄好看了再花时间去看别的地方。</p>

    <p>而<code>body</code>部分好看与否，主要取决于下面的四个方面：</p>
  </li>
  <li>
    <p><code>point size</code>是指字体的大小。在印刷品中，最舒适的是10–12个point，而网页上则是15–25个pixels。不是每个font在指定的<code>point size</code>下大小都是一致的，所以有的适合需要对究竟用多大进行调整。</p>
  </li>
  <li>
    <p><code>line spacing</code>是垂直方向上行间距。它的合理取值是字体的<code>point size</code>的120–145%。在文字处理器中不要用比值定行距，因为单行距太窄，1½又太松了。­在网页上用CSS的<code>line-height</code>来控制.</p>
  </li>
  <li>
    <p><code>line length</code>是水平方向上文字块的宽度，它的合理取值是­­平均每行45–90个字，为了方便你可以用小写字母表来占位，一般来说2-3个排列是合适的：</p>

    <p><code>
 abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd
</code></p>

    <p>在印刷品中，这一般意味着page的margin比传统的1个inch宽。
 在网页上，这主要是控制text block不要在页面上溢出。</p>
  </li>
  <li>
    <p>最后是字体的选择。可能对一般设计者最简单高效的方法是停止使用系统自带的那些免费字体，购买专业字体设计公司的作品：这些专业的字体设计优良，而且通常也不贵。</p>

    <p>即使你不愿意付费，试试在免费字体里面找找看，比如Google提供的字体。实在不行，至少不要用Times New Roman或者Arial了：这是懒惰的人才会不假思索考虑的字体。</p>
  </li>
</ul>

<p>很有兴趣知道，中文设计圈子里面有没有类似的准则被归纳出来，毕竟12px宋体一统江湖这么多年了。简单Google之后看起来是没有什么变化的：</p>

<ul>
  <li><a href="http://www.zhihu.com/question/19680724">网页常用字体有哪些 - 知乎</a></li>
  <li><a href="http://www.zhihu.com/question/20404847">中文的网页用什么字体最合适 - 知乎</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eye In The Sky]]></title>
    <link href="http://lenciel.cn/2013/08/eye-in-the-sky/"/>
    <updated>2013-08-25T21:50:00+08:00</updated>
    <id>http://lenciel.cn/2013/08/eye-in-the-sky</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/eye_in_the_sky.gif" alt="Eye in the sky" title="Don't touch me..." /></p>

<blockquote><p>&#8220;And the eye-in-the-sky is watching us all.&#8221;</p><footer><strong>Martin Scorsese</strong> <cite><a href="http://www.imdb.com/title/tt0112641/">Casino(1995)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
</feed>
