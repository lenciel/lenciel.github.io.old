<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[@Lenciel]]></title>
  <link href="http://lenciel.cn/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2014-03-11T15:33:37+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[晚安(二)]]></title>
    <link href="http://lenciel.cn/2014/03/good-night-1/"/>
    <updated>2014-03-10T06:18:00+08:00</updated>
    <id>http://lenciel.cn/2014/03/good-night-1</id>
    <content type="html"><![CDATA[<p><img alt="block" src="http://lenciel.cn/downloads/images/2014_03/good_night.jpg" align="left" style="margin:0px 5px;width:23%" />  而我每年用掉一些暑假(后来工作了就是年假)陪着外公去兰州，当然不是因为我是影视作品里常常出现的那种孝顺贴心的孙子。事实上即使在父母分开生活之前，我和外公之间也没有太多的交流，是兰州这个地方把我们联系在了一起：不过，你猜错了，并不是什么我爱的人也在这里。</p>

<p>只不过是那趟火车会路过她在的城市，我可以坐在车窗边，对着那个陌生的城市无所顾忌地想着她，如此而已。</p>

<p>“那是个什么样的姑娘？” 终于有一次外公大概觉得自己的事情已经聊完，就漫不经心地问到。</p>

<p>“很明显吗？”</p>

<p>“未必明显。其实正好相反，你小子要藏起来的东西，别人大概很难发现。不过对我怎么可能瞒得住，不要忘了，第一，我比你还能藏；第二，你是我带大的。”</p>

<p>“哦？”</p>

<p>“你小时候每天晚上都很吵。你妈受不了的时候，我就抱着你到阳台上把你拍睡着。”</p>

<p>“好像听我妈说过，经常拍到半夜，辛苦你了。”</p>

<p>“但其实没觉得多累。一方面享受着你到来的欢乐，一方面，也享受着可以让自己胡思乱想的安宁空间。如果拍张照片，估计跟你刚才的表情一样。”</p>

<p>“可能是吧，呵呵。” 我嘴上应着，心里却想，”我可没有你那么多值得回忆的事情撑得起每晚都跑去胡思乱想。”</p>

<p>“放心吧，我不会告诉你妈的。”</p>

<p>这点我相信。密闭的车厢让人们成为莫名其妙的朋友，几次兰州之行后，我和外公也不例外。</p>

<p>“但没有什么好说的，没有什么长发飘飘也没有什么白裙飘飘，只是偶尔会想起她。”</p>

<p>“想什么呢？”</p>

<p>“那不重要。” 我这么说的时候，想起来是因为她才爱这么回答问题的。以前问她什么的时候，她最喜欢回答”那不重要”。哪怕再怎么追问，最多就多说几个字但意思还是没变，比如”那都是不重要的啊”。</p>

<p>“好像也是。不过，等你年纪大了你就会知道，有很多重要的事情你会慢慢不记得。”</p>

<p>“哦？”</p>

<p>“比如我年轻的时候认真背下来的化学元素周期表，几十年来就跟刻在脑袋里面了一样，好像是不可能忘记的。但现在才几年不用，坦白说有不少族已经模糊起来了。反而是有些看起来不重要的事情却会记得很清楚。”</p>

<p>“比如呢？”</p>

<p>“我有没有说过，我和她第一次面对面就聊了一通宵，然后跑到街上去找吃的东西？”</p>

<p>“当然有，外公，你当然有说过。那时候不像现在有那么多便利店，找了大半条街才找到一家刚刚开门的早点店，两个人一起喝了新鲜出炉的豆浆，对吧？”</p>

<p>“是啊，已经记不起来豆浆是什么味道了，但是穿过她脖子的白白的热气，在我心里好像这么多年都没有散去。”</p>

<p>“是因为除开脸，脖子是她露出来最多的地方吧？”</p>

<p>“呵呵，这么说来很遗憾啊。居然记住了白白的热气，却没记住白白的脖子。”</p>

<p>说到这里，我们俩就都笑了起来。我从一开始夹带私货，到后来真正享受起和外公一起的兰州之行，正是因为他这样一个有着非凡成就的长辈，在谈话中很少有高屋建瓴的训导之言，反而透着我父母以及其他长辈都少有的平等和坦率。</p>

<p>后来列车慢慢停了下来，我听到有人在嘟囔着定西到了。</p>

<p>“要下去走走吗？”</p>

<p>“不去了，有点儿晚了。好不容易它也停着不抖了，我就先睡会儿。如果后面想下去走再叫你吧。”</p>

<p>“那我也睡了，晚安。” 我一边爬到上铺一边说。</p>

<p>“晚安。” </p>

<p>外公答了我一句就认真地睡起觉来。我确认了一下他被子是盖好的，就也躺下来，怔怔地继续看着窗外。</p>

<p>晚安，这大概是我说过次数最多的谎话。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[晚安(一)]]></title>
    <link href="http://lenciel.cn/2014/03/good-night-0/"/>
    <updated>2014-03-10T04:18:00+08:00</updated>
    <id>http://lenciel.cn/2014/03/good-night-0</id>
    <content type="html"><![CDATA[<p><img alt="block" src="http://lenciel.cn/downloads/images/2014_03/good_night.jpg" align="left" style="margin:0px 5px;width:23%" />  在去兰州之前，我其实有点儿犹豫。</p>

<p>我的意思当然不是说外公下葬这件事情不值得专程跑一趟。实际上，从他确诊后提出要回兰州去看看，我就一直在帮他说服家里的人，帮他买机票，最后还请假把他和母亲一起送到了兰州。一方面，我在公司算是可有可无的人，有没有出现对大家都不会有影响，走起来非常方便。另一方面，以前每次外公去兰州都是我陪他去的，母亲从来没有去过。毕竟外公是重病之中，有我这样一个轻车熟路的人，好有个照应。</p>

<p>真正成行距离他年底例行体检时查出那片不祥的阴影已经又过去了小半年：也许是正常人生命中不值一提的短暂时光，但已经长到让他形销骨立，不成人形。</p>

<p>当然，那时候我也完全没有想到他再也不会回来。如果知道，不管家里人多么反对，我可能也会按他说的陪他慢慢坐到兰州吧。</p>

<p>但没有那么多如果。我们一左一右把他推出中川机场的时候，初春的阳光打在我们背上，彷佛之前飞机上空姐职业化的笑容，饱满充盈，却让人感觉不到太多温暖。</p>

<p>“飞机果然快啊。像我这种情况，还化疗什么？不该折腾那么久，应该我还能自己走路的时候就过来了。”</p>

<p>“化疗怎么了？人这一辈子不就是一次漫长的化疗，到最后统统死路一条。” 母亲头也没抬。</p>

<p>外公没有理会自己的女儿，却也不再说话，只是默默地凝视着地上我们三个人的影子。他已经骨瘦如柴，又是坐在轮椅上，所以影子难免缩成一团，终究显得矮小起来。而我和母亲的影子，则好像站在家门口送孩子远行的心碎家长，漫长地铺满了整条过道，延绵不绝，不可救药。</p>

<p>后来上了兰州石化派来的接我们的车，外公便也又有了些兴致，就开始不依不饶地说起旧事。他的那些回忆我已经是再熟悉不过了，而母亲仍然保持着对这趟出行的深恶痛绝，所以认真听着并且不时回应着的只有司机师傅。很快他们两个人就用兰州话聊了起来，我知道外公这一方面是方便普通话不怎么熟练的司机师傅，更是给我和母亲不用再假惺惺地装作要参与进去一个正当的理由。</p>

<p>外公这一生都是这么体贴的一个人，大概也正是因为这样，别人很难知道他究竟过得是否快乐。</p>

<p>他六十年代从清华毕业之后，作为国内最出色的自动化专家，在兰州石化支援建设一干就是二十几年，到八十年代调回家乡四川的川大时，已经是总工。凭着深厚的学术知识和丰富的实战经验，外公在川大的自动化系建成了国家重点实验室，如果不是看不惯学术圈的习气，估计早就应该当上院士了。</p>

<p>回四川之后的二十来年他再也没有回过兰州，但外婆去世之后他就常常都吵着要去。</p>

<p>我从母亲第一次要我送外公去兰州时那紧皱的眉头就猜到，外公的兰州之行有其微妙之处。我的意思是，这肯定不是什么单纯的”我这辈子最好的时候都是在兰州过的我要回去看看”的那种归乡之旅。</p>

<p>“其实是因为年轻的时候爱过的人”，虽然我猜到了七八分，但确切的消息是父亲先来告诉我的。我不知道他是因为终于离婚了不需要再保守什么秘密，还是想证明自己出轨的合理性。我这么想的时候，难免对自己有些失望：即便是真心祝福父亲开始新的生活，好像还是没法压抑面对这种谈话时心里的不快。</p>

<p>总之母亲就是因为这个所以没办法说服自己陪外公去兰州：外公不仅仅是这辈子最疼爱她的人，更是她一生的偶像。人们总是可以接受世间一切的不幸与不公，却没法接受内心世界里偶像的坍塌，因为那毕竟是自己竖起来供着的东西。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Understanding]]></title>
    <link href="http://lenciel.cn/2014/03/understanding/"/>
    <updated>2014-03-09T21:25:00+08:00</updated>
    <id>http://lenciel.cn/2014/03/understanding</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/iwdrm/understanding.gif" alt="Understanding" title="Don't touch me..." /></p>

<blockquote><p>&#8220;As long as we were in love, we understood each other. There was nothing more to understand.&#8221;</p><footer><strong>Alain Delon</strong> <cite><a href="http://www.imdb.com/title/tt0056736/">L&#8217;Eclisse (1962)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决iowait过高的告警]]></title>
    <link href="http://lenciel.cn/2014/02/hunting-the-iowait-problem-maker/"/>
    <updated>2014-02-24T09:22:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/hunting-the-iowait-problem-maker</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_02/warning_letter.png" alt="warning letter" title="Don't touch me..." /></p>

<p>从Nagios切到<a href="https://www.zabbix.com">Zabbix</a>之后，经常大清早被iowait过高的告警邮件叫醒。因为这套Zabbix监控是本座搭的，所以解决这个问题就只有本座来了…..哎，不知道是不是把首席运营官给宠坏了。</p>

<h2 id="iowait">iowait的定义和计算方式</h2>

<p>iowait的定义为：</p>

<blockquote><p>iowait is time that the processor/processors are waiting (i.e. is in an idle state and does nothing), during which there in fact was outstanding disk I/O requests.</p></blockquote>

<p>也就是至少有一个I/O在进行时CPU处于<code>idle</code>状态的比例。</p>

<p>我们都知道用<code>vmstat</code>, <code>iostat</code>, <code>sar</code>等命令查看系统状况的时候，CPU有四种比较主要的状态：user, sys, idle和iowait。它们都是表示CPU处于此状态的一个平均比例（其中sar命令是可以用<code>-P</code>具体指定哪个CPU的，其他的命令一般是所有CPU的平均），通常相加应该就是1.</p>

<p>这个比例的统计其实是通过kernel不断的更新计数器然后计算出来的。当时钟中断发生的时候，kernel检查当前CPU是不是idle的。如果不是，就检查正在执行的指令是user space还是kernel space的。如果是user space就给<code>user</code>的计数器加1，kernel space就给<code>sys</code>计数器加1.</p>

<p>类似的，如果CPU是处于idle状态，kernel就检查是不是有I/O操作正在发生（可以是local disk也可以是<code>mount</code>的NFS），如果有就给<code>iowait</code>计数器加1，没有就给<code>idle</code>计数器加1.</p>

<p>当我们运行<code>vmstat</code>或者<code>sar</code>等命令查看时，它们会先读取当前这几个计数器的计数，然后在用户指定的时间里面等待，然后再次读取。因为用户指定的时间里面过去了多少个<code>tick</code>是可以计算的，然后前后计数器的增值也可以计算，就可以算出一个比值。比如如果用户运行的命令是<code>vmstat 2</code>，表示每两秒取样一次，那么：</p>

<ol>
  <li>tick是10ms一个，所以总共是200个ticks</li>
  <li>计数器的增量/200*100就是每个状态的百分比</li>
</ol>

<h2 id="iowait-1">iowait的意义</h2>

<p>这其实比它怎么计算要难理解一些。比如本座之前心里就有一个疑问：既然只是某个process在block，那么系统会schedule其他的事情，这对性能有什么大不了的影响呢？</p>

<p>来看几个例子。</p>

<h3 id="section">例子一</h3>

<p>假设一个程序进行批量的事务，每个事务都有一个10ms的计算任务，计算出的结果通过同步的方式写到磁盘。由于它写结果的文件是阻塞方式打开的，所以I/O完成之前写操作是不会<code>return</code>的。如果我们假设磁盘系统没有cache，每个物理的I/O需要20ms，那么一个事务需要30ms。也就是每秒33个事务（33 tps）。如果把系统算成只有一个CPU的话，很显然<code>iowait</code>就是66%。</p>

<p>这种情况下，如果我们能改进I/O子系统，比如启用磁盘的缓存，让每次物理的I/O只需要1ms的话，那么<code>iowait</code>就会迅速下降到8%左右。可见这种情况下，<code>iowait</code>直接影响着程序的performance。</p>

<h3 id="section-1">例子二</h3>

<p>假设一个磁盘检查的程序运行在系统上，每秒钟读4k的数据。我们假设这个程序的入口是main()，然后读磁盘的函数是read()，main()和read()都是用户态的。read()属于libc.a，会调用kread()这个系统调用来进行物理的I/O，这个时候就进入了kernel态。整个main(),read()和kread执行的时间加起来不长，我们假设是50微秒。而物理的I/O需要多久要看seek的数据有多远，假设需要2-20ms。这样就完全有可能当时钟中断的时候，cpu是idle的，而且I/O正在发生，于是<code>iowait</code>值就达到97-98% (如果每个I/O需要20ms就是99-100%)。</p>

<p>这种情况下，虽然<code>iowait</code>数值非常高，其实这个系统的性能是正常的。</p>

<h3 id="section-2">例子三</h3>

<p>假设有两个程序跑在同一个CPU上。一个程序写得有点儿问题，I/O会阻塞10秒左右。另一个则100%的时间都在做计算。由于当前一个程序阻塞起来的时候，后面这个程序被运行了，因此无论什么时候都没有CPU处于idle的状态等I/O，于是<code>iowait</code>一直是0，这时候其实系统的performance是有很大的问题的。</p>

<h3 id="section-3">例子四</h3>

<p>假设系统是4核的CPU，运行了6个程序。其中4个程序有70%时间在进行物理的I/O，30%的时间在进行计算任务（假设其中25%在用户态，5%在kernel态）。另外2个程序假设100%时间都在用户态进行计算任务，没有任何I/O操作。</p>

<p>如果我们查看系统的CPU状态，大概可能看到下面的状况:</p>

<pre><code>     cpu    %usr    %sys    %iowait   %idle
      0       50      10      40       0
      1       50      10      40       0
      2      100       0       0       0
      3      100       0       0       0
      -       75       5      20       0
</code></pre>

<p>如果我们把相同的6个程序跑到一个6核的机器（相同的CPU和磁盘配置），那么可以简单的认为会有下面的结果：</p>

<pre><code>     cpu    %usr    %sys    %iowait   %idle
      0       25       5      70       0
      1       25       5      70       0
      2       25       5      70       0
      3       25       5      70       0
      4      100       0       0       0
      5      100       0       0       0
      -       50       3      47       0
</code></pre>

<p>也就是说，同样的程序跑在不同的系统上，iowait增加了一倍多，而这个时候其实没有什么performance问题，只不过是系统还能做更多的计算工作。</p>

<h3 id="section-4">结论</h3>

<ul>
  <li>CPU处于<code>iowait</code>状态，并不说明CPU不能运行其他的程序</li>
  <li><code>iowait</code>偏高只能说明系统这个时刻还能进行更多的计算任务，至于是不是出现了performance问题，需要进一步分析才知道</li>
</ul>

<h2 id="section-5">找出造成问题的进程</h2>

<p>虽然每次都是6点半多少说明应该是某个cron任务（因为机器上没有其他自定义的定时任务）但没法具体知道究竟是哪个。</p>

<p>最简单的办法当然是出问题的时候用<code>iotop</code>命令来看了 。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> # iotop
</span><span class="line"> Total DISK READ: 8.00 M/s | Total DISK WRITE: 20.36 M/s
</span><span class="line">  TID PRIO USER DISK READ DISK WRITE SWAPIN IO&gt; COMMAND
</span><span class="line"> 15758 be/4 root 7.99 M/s 8.01 M/s 0.00 % 61.97 % bonnie++ -n 0 -u 0 -r 239 -s 478 -f -b -d /tmp</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是谁又会在6点多起来干这种事情。除开修改系统时间重现问题，还可以通过ps命令查看记录处于<code>D</code>状态的进程来找到。</p>

<p><code>ps</code>命令输出里面对<code>PROCESS STATE CODES</code>的定义是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> D uninterruptible sleep (usually IO)
</span><span class="line"> R running or runnable (on run queue)
</span><span class="line"> S interruptible sleep (waiting for an event to complete)
</span><span class="line"> T stopped, either by a job control signal or because it is being traced.
</span><span class="line"> W paging (not valid since the 2.6.xx kernel)
</span><span class="line"> X dead (should never be seen)
</span><span class="line"> Z defunct ("zombie") process, terminated but not reaped by its parent.</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>处于等待I/O完成状态的进程一般就是<code>D</code>，所以可以通过tmux起一个sessio来跑下面的命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">while true; do date; ps auxf | awk '{if($8=="D") print $0;}'; sleep 1; done &gt; /var/log/ps.log</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后在又一个这样的6点半：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_02/zabbix_cpu_util.png" alt="warning letter" title="Don't touch me..." /></p>

<p>去日志里面查看：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ cat /var/log/ps.log | grep D
</span><span class="line">
</span><span class="line">root      7585  7.9  0.0   5904   812 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5904   812 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5904   812 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5944   944 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.5  0.0   5944   944 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.5  0.0   5944   944 ?        D    06:34   0:02                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.8  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.7  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   6000   968 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate
</span><span class="line">root      7585  7.6  0.0   6000   968 ?        D    06:34   0:04                  \_ /usr/bin/updatedb.mlocate</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>嗯，原来是<code>/usr/bin/updatedb.mlocate</code>。Google了一下<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>发现其实关掉也没什么：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo killall updatedb.mlocate
</span><span class="line">sudo chmod -x /etc/cron.daily/mlocate</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>整个世界清静了。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>http://www.iasptk.com/ubuntuwp/can-i-disable-updatedb-mlocate/<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>http://ubuntuforums.org/showthread.php?t=1243951&amp;page=2&amp;p=7844783#post7844783<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Not Much of A Dancer]]></title>
    <link href="http://lenciel.cn/2014/02/not-a-dancer/"/>
    <updated>2014-02-23T22:06:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/not-a-dancer</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/iwdrm/not_a_dancer.gif" alt="not a dancer" title="Don't touch me..." /></p>

<blockquote><p>&#8220;I’m not much of a dancer.&#8221;</p><footer><strong>Vincent Vega</strong> <cite><a href="http://www.imdb.com/title/tt0110912/">Pulp Fiction(1994)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3D动态Gif]]></title>
    <link href="http://lenciel.cn/2014/02/3d-gifs/"/>
    <updated>2014-02-18T12:40:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/3d-gifs</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/2014_02/3dgifs4.gif" alt="3d gifs" title="Don't touch me..." /></p>

<p>托各种SNS的福，有趣的动态gif在网络上漫山遍野。作为电影爱好者的本座，也是<a href="http://lenciel.cn/blog/categories/fu-guang-lue-ying/">重度的gif爱好者</a>。</p>

<p>如上图所示，最近动态gif玩法又有创新了：通过“打白条”的方式实现3D效果。主要的思路就是在动态物体处于背景的时候，白条遮挡动态物体。而当动态物体从背景进入前景的时候，动态物体遮挡白条，造成动态物体溢出图片边界范围的错觉。</p>

<p><img src="http://lenciel.cn/downloads/images/2014_02/3dgifs1.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs2.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs3.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs5.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs6.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs6a.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs8.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs12.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs13.gif" alt="3d gifs" title="Don't touch me..." />
<img src="http://lenciel.cn/downloads/images/2014_02/3dgifs14.gif" alt="3d gifs" title="Don't touch me..." /></p>

<p>最喜欢的一副：</p>

<p><img src="http://lenciel.cn/downloads/images/2014_02/3dgifs7.gif" alt="3d gifs" title="Don't touch me..." /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Sochi 2014 Winter Olympics]]></title>
    <link href="http://lenciel.cn/2014/02/the-sochi-2014-winter-olympics/"/>
    <updated>2014-02-14T01:26:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/the-sochi-2014-winter-olympics</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/sochi_winter_olympics.gif" alt="Turn the worst" title="Don't touch me..." /></p>

<blockquote><p>&#8220;Let&#8217;s meet in Sochi, they said&#8230;Like brothers and sisters, they said&#8230;&#8221;</p><footer><strong>Lenciel (2014)</strong></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[听起来很假]]></title>
    <link href="http://lenciel.cn/2014/02/true-facts-that-sound-false/"/>
    <updated>2014-02-12T10:46:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/true-facts-that-sound-false</id>
    <content type="html"><![CDATA[<p>Reddit上有一篇关于 <a href="http://www.reddit.com/r/AskReddit/comments/1sdw81/what_is_a_true_fact_that_sound_completely/">听起来很假的事实</a> 的讨论贴<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，不知道是不是真的:</p>

<blockquote><p>* 做肾脏移植的时候，一般原来的肾都会留着不动，这第三个新来的肾会被放在骨盆里面</p><p>* IPv6可以给地球表面的所有原子分配一个ip（其实比地球面积大100倍的也能搞定）</p><p>* 俄罗斯比冥王星还大 (冥王星表面积: 16.7x10^6 km^2; 俄罗斯表面积: 17.1x10^6 km^2)</p><p>* 如果你把埃菲尔铁塔熔了，铁水放到和铁塔基座面积相同的坑里面，厚度不会超过8厘米</p><p>* 1790年出生并且在1841年成为美国的第10任总统的John Tyler，他有两个孙子还活着</p><p>* 如果原子有银河系那么大，那么中微子就是高尔夫球那么大</p><p>* 人类和香蕉有50%的DNA是相同的</p></blockquote>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>还有一个<a href="http://www.reddit.com/r/AskReddit/comments/1x34t4/whats_the_most_bullshitsoundingbuttrue_fact_you/?limit=500">更老的帖子</a>。 <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Still Long Way To Go]]></title>
    <link href="http://lenciel.cn/2014/01/next-subject/"/>
    <updated>2014-01-17T01:56:00+08:00</updated>
    <id>http://lenciel.cn/2014/01/next-subject</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/next_subject_in_blade_runner.gif" alt="Next Subject" title="Don't touch me..." /></p>

<blockquote><p>&#8220;Next subject: Kowalski, Leon.&#8221;</p><footer><strong>Ridley Scott</strong> <cite><a href="http://www.imdb.com/title/tt0083658/">Blade Runner(1982)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[定制机上恢复google原厂应用]]></title>
    <link href="http://lenciel.cn/2013/12/restore-google-apps/"/>
    <updated>2013-12-18T22:33:00+08:00</updated>
    <id>http://lenciel.cn/2013/12/restore-google-apps</id>
    <content type="html"><![CDATA[<p>最近因为移动的手机丢了，正好宽带升级到100M送了两个电信的卡没地方用，入了一个Rick推荐的电信移动双卡双待的机器：<a href="http://item.jd.com/824702.html">中兴N986</a>。</p>

<p>机器用来当小三机已经是非常不错了，唯一让本座纠结的就是电信的合约机老是喜欢把google账号干掉，而小弟的所有联系人又都在google（虽然现在看起来这么做可能也未必妥当）。</p>

<p>据Rick大大说，之前是可以用小米的<a href="http://app.xiaomi.com/detail/36925">谷歌应用下载器</a>来直接把Google的一干应用装回来。但是好像因为<a href="http://www.zhihu.com/question/21103129">Google不太愿意</a>自己的应用被未授权的雷总装来装去，这个应用已经没有更新了：青漾系统是4.2.1，下载回来的apk直接<code>adb install</code>会因为android版本不match报错。</p>

<p>于是只好去搜了<a href="http://www.teamandroid.com/gapps/">4.2.1的stock gapps包</a>回来自己撸 - <a href="http://pan.baidu.com/s/1iPXn">百度盘分享了一份</a>。</p>

<p>首先要root机器，然后把<code>/system/app</code>路径mount成rw的。</p>

<p>root就是刷recovery然后替换一些文件，当然大天朝有不少神器做得非常不错，比如<a href="http://www.mgyun.com/">刷机大师</a>这种软件，感觉会摧毁电脑城刷机青年的就业机会。而修改目录权限这种事情，如果你对命令行不熟，好像有很多流行的文件夹管理应用可以用来更改目录的权限。</p>

<p>然后，直接把下载回来的gapps.zip解压，进入<code>system/app</code>路径，将自己需要的apk往<code>/system/app</code>路径push就行了。</p>

<p>以Google联系人同步为例，就是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">adb push GoogleContactsSyncAdapter.apk /system/app/.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这里要注意的就是所有Google的应用有些基础的依赖，要记得check一下/system/app下面是不是都有，比如<code>GoogleServicesFramework.apk</code>等等。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Take it easy and avoid excitement]]></title>
    <link href="http://lenciel.cn/2013/12/avoid-excitement/"/>
    <updated>2013-12-15T13:17:00+08:00</updated>
    <id>http://lenciel.cn/2013/12/avoid-excitement</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/modern_times_1935.gif" alt="avoid excitement" title="Don't touch me..." /></p>

<blockquote><p>&#8220;Take it easy and avoid excitement.&#8221;</p><footer><strong>Charlie Chaplin</strong> <cite><a href="http://en.wikipedia.org/wiki/Modern_Times_(film)">Modern Times(1935)</a></cite></footer></blockquote>
<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Quick Look on Mac]]></title>
    <link href="http://lenciel.cn/2013/12/quick-look-on-mac/"/>
    <updated>2013-12-14T15:34:00+08:00</updated>
    <id>http://lenciel.cn/2013/12/quick-look-on-mac</id>
    <content type="html"><![CDATA[<p>Mac平台上，如果我们在Finder里面查看文件，有一个不太容易被察觉的方式是使用<a href="http://en.wikipedia.org/wiki/Quick_Look">Quick Look</a>：选中文件的情况下按<code>空格键</code>或者是<code>Cmd+Y</code>。速度快，疗效好，唯一的缺点就是有很多文件格式支持不佳，比如没有扩展名的config文件，比如各种markdown，比如图片等等。</p>

<p>最近在Github上看到一个<a href="https://github.com/sindresorhus/quick-look-plugins">Quick Look插件集中营</a>，非常不错的精选集，推荐也在用Quick Look的小伙伴们试试。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hurt myself when shoot a goal]]></title>
    <link href="http://lenciel.cn/2013/11/a-lot-of-healing-to-do/"/>
    <updated>2013-11-17T22:11:00+08:00</updated>
    <id>http://lenciel.cn/2013/11/a-lot-of-healing-to-do</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/healing_to_do.gif" alt="Should do more healing" title="Don't touch me..." /></p>

<blockquote><p>&#8220;I guess I’ve still got a lot of healing to do.&#8221;</p><footer><strong>Owen Wilson</strong> <cite><a href="http://www.imdb.com/title/tt0838221/">The Darjeeling Limited(2007)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下后台运行goagent]]></title>
    <link href="http://lenciel.cn/2013/11/replace-goagentx-with-lines-of-scripts/"/>
    <updated>2013-11-14T13:22:00+08:00</updated>
    <id>http://lenciel.cn/2013/11/replace-goagentx-with-lines-of-scripts</id>
    <content type="html"><![CDATA[<p>几年过去了，<a href="https://code.google.com/p/goagent/">Goagent</a>是本座翻墙唯一的选择。在Mac上使用它最开始我用了<a href="https://github.com/ohdarling/GoAgentX">GoAgentX</a>，但使用了一段时间之后发现几个不太满意的地方：</p>

<ul>
  <li>不是简单给GoAgent做了个界面，而是集成了多个翻墙工具，选项挺多挺乱的（可能对其他用户是一个好事）</li>
  <li>每次GoAgent更新之后，GoAgentX更新的时间都比较滞后</li>
  <li>GoAgentX更新之后，经常无法工作，需要做这样那样的调整</li>
</ul>

<p>但其实用GoAgent我们需要的无非是<code>python proxy.py</code>，有很多办法让它运行起来。本座比较喜欢的是用tmux把这个任务跑在一个detach了的session，如果连接有问题再attach上去看看是什么问题。具体流程如下：</p>

<p>先装<a href="https://github.com/aziz/tmuxinator">tmuxinator</a>，看名字不知道是不是受了ubuntu下面terminator的启发。然后新建一个项目用来跑goagent:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>mux new goagent
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>项目配置文件（假设你的goagent放在<code>~/bin/goagent/local</code>）：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">name</span><span class="p">:</span> <span class="n">goagent</span>
</span><span class="line"><span class="ss">root</span><span class="p">:</span> <span class="o">~</span><span class="sr">/bin/</span><span class="n">goagent</span><span class="o">/</span><span class="n">local</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="ss">windows</span><span class="p">:</span>
</span><span class="line">  <span class="o">-</span> <span class="ss">shell</span><span class="p">:</span> <span class="n">python</span> <span class="n">proxy</span><span class="o">.</span><span class="n">py</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样就只需要你在需要翻墙的时候<code>mux goagent</code>一下即可，detach或者attach到这个session也非常方便。当然不使用tmuxinator而是直接用shell脚本写一堆tmux命令也可以达到一样的效果，用tmuxinator是因为本座自己还有一堆别的Django项目的tmuxinator项目。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix Python after upgrade to Maverick]]></title>
    <link href="http://lenciel.cn/2013/10/maverick-and-python/"/>
    <updated>2013-10-24T22:02:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/maverick-and-python</id>
    <content type="html"><![CDATA[<p>升级到最新的osx版本Maverick之后，打开iTerm2就报错：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class="line">  File <span class="s2">&quot;&lt;string&gt;&quot;</span>, line 1, in &lt;module&gt;
</span><span class="line">ImportError: No module named virtualenvwrapper.hook_loader
</span><span class="line">virtualenvwrapper.sh: There was a problem running the initialization hooks.
</span><span class="line">If Python could not import the module virtualenvwrapper.hook_loader,
</span><span class="line">check that virtualenv has been installed <span class="k">for</span>
</span><span class="line"><span class="nv">VIRTUALENVWRAPPER_PYTHON</span><span class="o">=</span>/usr/bin/python and that PATH is
</span><span class="line"><span class="nb">set </span>properly.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>敲pip之后也报错：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">Traceback <span class="o">(</span>most recent call last<span class="o">)</span>:
</span><span class="line">  File <span class="s2">&quot;/usr/local/bin/pip&quot;</span>, line 5, in &lt;module&gt;
</span><span class="line">    from pkg_resources import load_entry_point
</span><span class="line">  File <span class="s2">&quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&quot;</span>, line 2603, in &lt;module&gt;
</span><span class="line">    working_set.require<span class="o">(</span>__requires__<span class="o">)</span>
</span><span class="line">  File <span class="s2">&quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&quot;</span>, line 666, in require
</span><span class="line">    <span class="nv">needed</span> <span class="o">=</span> self.resolve<span class="o">(</span>parse_requirements<span class="o">(</span>requirements<span class="o">))</span>
</span><span class="line">  File <span class="s2">&quot;/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py&quot;</span>, line 565, in resolve
</span><span class="line">    raise DistributionNotFound<span class="o">(</span>req<span class="o">)</span>  <span class="c"># XXX put more info here</span>
</span><span class="line">pkg_resources.DistributionNotFound: <span class="nv">pip</span><span class="o">==</span>1.3.1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这坨<code>pkg_resources.DistributionNotFound</code>的错正好前两天装CentOS的机器<a href="http://stackoverflow.com/questions/7446187/no-module-named-pkg-resources">看到过</a>。</p>

<p>运行下面的命令更新了<code>setuptools</code>之后重装了<code>pip</code>和<code>virtualenv</code>、<code>virtualenvwrapper</code>就好了：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
</span><span class="line">sudo python ez_setup.py
</span><span class="line">sudo easy_install -U pip
</span></code></pre></td></tr></table></div></figure></notextile></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sinned Too Much]]></title>
    <link href="http://lenciel.cn/2013/10/sinned-too-much/"/>
    <updated>2013-10-20T16:49:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/sinned-too-much</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/live_a_simple_life.gif" alt="Sinned Too Much" title="Live a simple life..." /></p>

<blockquote><p>&#8220;I thought I’d lived a simple life. But I’ve sinned too much.&#8221;</p><footer><strong>Chan-wook Park</strong> <cite><a href="http://www.imdb.com/title/tt0364569/">Oldboy(2003)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打开pip的download cache]]></title>
    <link href="http://lenciel.cn/2013/10/pip-download-cache/"/>
    <updated>2013-10-17T13:25:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/pip-download-cache</id>
    <content type="html"><![CDATA[<p>Python的标准库实在是<a href="http://lenciel.cn/2013/10/recharging-the-python-standard-library/">不够用</a>，所以一个很常见的情况是我们需要在每个项目使用的<code>virtualenv</code>里面都安装一些常用的库。</p>

<p>为了加速安装的过程，有两个小窍门。</p>

<p>一个是使用国内的源，比如<a href="http://www.v2ex.com/">v2ex</a>提供的。只需要新建或者编辑<code>~/.pip/pip.conf</code>，加入一行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[global]
</span><span class="line">index-url = http://pypi.v2ex.com/simple
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>另一个就是打开pip的<code>download cache</code>，这样可以避免pip每次都去下载相同的东西。只需要在<code>.bashrc</code>或者是<code>.zshrc</code>里面加入一行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export PIP_DOWNLOAD_CACHE=$HOME/.pip-download-cache
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Python标准库充电]]></title>
    <link href="http://lenciel.cn/2013/10/recharging-the-python-standard-library/"/>
    <updated>2013-10-17T12:27:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/recharging-the-python-standard-library</id>
    <content type="html"><![CDATA[<p>Python的自荐页面<a href="http://www.python.org/about/">About Python</a>上号称自家的标准库是”batteries included”的，但实际情况却不是这样。对Python标准库的批评几乎从来没有中断过。著名的Python包<a href="http://docs.python-requests.org/en/latest/">Requests</a>的作者甚至决定永久把Requests保持为第三方库而拒绝加入标准库，他的理由是：<a href="http://www.leancrew.com/all-this/2012/04/where-modules-go-to-die/">加入标准库就会死翘翘</a>。</p>

<p>再举个例子，我们最近的项目里面都用到了<a href="https://pypi.python.org/pypi/pytz/">pytz</a>。标准库里面的datetime是支持时区的（tzinfo类），但是并没有包含时区信息（tzinfo是抽象类需要自己实现）。遵照前人的经验使用pytz是最好的办法<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<p>所以不奇怪的是，几乎所有的Python项目都会引用一堆优秀的第三方库。为了管理这些依赖一般都会用上pip:</p>

<ul>
  <li>在项目里面用pip freeze生成一个<code>requirement.txt</code>文件</li>
  <li>在创建<code>virtualenv</code>的时候使用之前生成的文件安装所有的依赖</li>
</ul>

<p>为了不在每次运行<code>pip install -r requirements.txt</code>的时候都下载一堆依赖，你还可以打开pip的<a href="http://lenciel.cn/2013/10/pip-download-cache/">download cache</a>。如果整个公司在做项目的时候都需要经常使用一些包，甚至可以考虑<a href="https://github.com/wolever/pip2pi">做一个Pypi</a>的库来共享，类似于Maven的Repo。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://stackoverflow.com/questions/2532729/daylight-saving-time-and-time-zone-best-practices/3404919#3404919">保存时间和时区的最佳实践</a>.   <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://stackoverflow.com/questions/14762518/python-datetime-strptime-and-strftime-how-to-preserve-the-timezone-informat">如何在datetime转换中保存时区信息</a>.    <a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NASA造笔的事情也是假的]]></title>
    <link href="http://lenciel.cn/2013/10/the-myth-of-nasas-expensive-space-pens/"/>
    <updated>2013-10-12T12:46:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/the-myth-of-nasas-expensive-space-pens</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/space-pen.jpg" alt="Space Pen" title="Don't touch me..." /></p>

<p>在软件开发中我们一说到避免过度设计，经常有两个例子会被抬出来，其中一个就是NASA造了昂贵的太空笔，然后俄罗斯用很简单的方案解决问题的故事（另一个大概就是传送带旁边放电风扇的故事）。<a href="http://www.snopes.com/business/genius/spacepen.asp">NASA造笔的故事</a>大概是这样的:</p>

<blockquote><p>太空竞赛开始的1960年代，NASA面临一大难题，宇航员需要用笔在真空环境下写字。NASA于是展开了研究，花了150万美元开发出了“宇航员笔”，并在商业市场上取得了小小的成功。</p><p>俄罗斯人遇到了同样的问题。</p><p>他们用铅笔搞定。</p></blockquote>

<p>非常有启发意义的故事，不是吗？只不过这不是真相。其实NASA一开始就在太空中使用铅笔，但是铅笔在零重力下会造成粉尘特别是石墨这类导电的粉尘飘散，所以被替代了。替代品是<a href="http://www.scientificamerican.com/article.cfm?id=fact-or-fiction-nasa-spen">Fisher公司开发的一款可以在极端条件下使用的笔</a>:</p>

<blockquote><p>Paul C. Fisher and his company, the Fisher Pen Company, reportedly invested $1 million to create what is now commonly known as the space pen. None of this investment money came from NASA&#8217;s coffers &#8211; the agency only became involved after the pen was dreamed into existence. In 1965 Fisher patented a pen that could write upside-down, in frigid or roasting conditions (down to minus 50 degrees Fahrenheit or up to 400 degrees F), and even underwater or in other liquids. If too hot, though, the ink turned green instead of its normal blue.</p></blockquote>

<p>在测试之后，NASA订购了400支Fisher笔，总共花费在一千美元以下。俄罗斯在一年之后也开始订这种笔了。Fisher公司目前仍然在<a href="http://www.spacepen.com/originalastronautspacepen.aspx">销售这种太空笔</a>，并且你可以很方便的买到：<a href="http://www.amazon.com/exec/obidos/ASIN/B0015ZP2AC/ref=nosim/0sil8">Amazon上</a>30来刀，甚至还有一个一看就不是官方网站的<a href="http://www.spacepen.cn/index.php">中文官方网站</a>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[No Clock On My Business]]></title>
    <link href="http://lenciel.cn/2013/10/no-clock-on-my-business/"/>
    <updated>2013-10-09T00:37:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/no-clock-on-my-business</id>
    <content type="html"><![CDATA[<p><img src="http://lenciel.cn/downloads/images/no_clock_on_my_business.gif" alt="No Clock On My Business" title="Don't touch me..." /></p>

<blockquote><p>&#8220;There is no clock on my business!&#8221;</p><footer><strong>Coen Brothers</strong> <cite><a href="http://www.imdb.com/title/tt1403865/">True Grit (2010)</a></cite></footer></blockquote>
]]></content>
  </entry>
  
</feed>
