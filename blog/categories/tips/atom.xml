<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | @Lenciel]]></title>
  <link href="http://lenciel.cn/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2013-12-15T14:39:45+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quick Look on Mac]]></title>
    <link href="http://lenciel.cn/2013/12/quick-look-on-mac/"/>
    <updated>2013-12-14T15:34:00+08:00</updated>
    <id>http://lenciel.cn/2013/12/quick-look-on-mac</id>
    <content type="html"><![CDATA[<p>Mac平台上，如果我们在Finder里面查看文件，有一个不太容易被察觉的方式是使用<a href="http://en.wikipedia.org/wiki/Quick_Look">Quick Look</a>：选中文件的情况下按<code>空格键</code>或者是<code>Cmd+Y</code>。速度快，疗效好，唯一的缺点就是有很多文件格式支持不佳，比如没有扩展名的config文件，比如各种markdown，比如图片等等。</p>

<p>最近在Github上看到一个<a href="https://github.com/sindresorhus/quick-look-plugins">Quick Look插件集中营</a>，非常不错的精选集，推荐也在用Quick Look的小伙伴们试试。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac下后台运行goagent]]></title>
    <link href="http://lenciel.cn/2013/11/replace-goagentx-with-lines-of-scripts/"/>
    <updated>2013-11-14T13:22:00+08:00</updated>
    <id>http://lenciel.cn/2013/11/replace-goagentx-with-lines-of-scripts</id>
    <content type="html"><![CDATA[<p>几年过去了，<a href="https://code.google.com/p/goagent/">Goagent</a>是本座翻墙唯一的选择。在Mac上使用它最开始我用了<a href="https://github.com/ohdarling/GoAgentX">GoAgentX</a>，但使用了一段时间之后发现几个不太满意的地方：</p>

<ul>
  <li>不是简单给GoAgent做了个界面，而是集成了多个翻墙工具，选项挺多挺乱的（可能对其他用户是一个好事）</li>
  <li>每次GoAgent更新之后，GoAgentX更新的时间都比较滞后</li>
  <li>GoAgentX更新之后，经常无法工作，需要做这样那样的调整</li>
</ul>

<p>但其实用GoAgent我们需要的无非是<code>python proxy.py</code>，有很多办法让它运行起来。本座比较喜欢的是用tmux把这个任务跑在一个detach了的session，如果连接有问题再attach上去看看是什么问题。具体流程如下：</p>

<p>先装<a href="https://github.com/aziz/tmuxinator">tmuxinator</a>，看名字不知道是不是受了ubuntu下面terminator的启发。然后新建一个项目用来跑goagent:</p>

<p><code>bash
$ mux new goagent
</code></p>

<p>项目配置文件（假设你的goagent放在<code>~/bin/goagent/local</code>）：</p>

<p>```ruby
name: goagent
root: ~/bin/goagent/local</p>

<p>windows:
  - shell: python proxy.py
```</p>

<p>这样就只需要你在需要翻墙的时候<code>mux goagent</code>一下即可，detach或者attach到这个session也非常方便。当然不使用tmuxinator而是直接用shell脚本写一堆tmux命令也可以达到一样的效果，用tmuxinator是因为本座自己还有一堆别的Django项目的tmuxinator项目。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fix Python after upgrade to Maverick]]></title>
    <link href="http://lenciel.cn/2013/10/maverick-and-python/"/>
    <updated>2013-10-24T22:02:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/maverick-and-python</id>
    <content type="html"><![CDATA[<p>升级到最新的osx版本Maverick之后，打开iTerm2就报错：</p>

<p><code>bash
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
ImportError: No module named virtualenvwrapper.hook_loader
virtualenvwrapper.sh: There was a problem running the initialization hooks.
If Python could not import the module virtualenvwrapper.hook_loader,
check that virtualenv has been installed for
VIRTUALENVWRAPPER_PYTHON=/usr/bin/python and that PATH is
set properly.
</code></p>

<p>敲pip之后也报错：</p>

<p><code>bash
Traceback (most recent call last):
  File "/usr/local/bin/pip", line 5, in &lt;module&gt;
    from pkg_resources import load_entry_point
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py", line 2603, in &lt;module&gt;
    working_set.require(__requires__)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py", line 666, in require
    needed = self.resolve(parse_requirements(requirements))
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/pkg_resources.py", line 565, in resolve
    raise DistributionNotFound(req)  # XXX put more info here
pkg_resources.DistributionNotFound: pip==1.3.1
</code></p>

<p>这坨<code>pkg_resources.DistributionNotFound</code>的错正好前两天装CentOS的机器<a href="http://stackoverflow.com/questions/7446187/no-module-named-pkg-resources">看到过</a>。</p>

<p>运行下面的命令更新了<code>setuptools</code>之后重装了<code>pip</code>和<code>virtualenv</code>、<code>virtualenvwrapper</code>就好了：</p>

<p><code>bash
wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py
sudo python ez_setup.py
sudo easy_install -U pip
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打开pip的download cache]]></title>
    <link href="http://lenciel.cn/2013/10/pip-download-cache/"/>
    <updated>2013-10-17T13:25:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/pip-download-cache</id>
    <content type="html"><![CDATA[<p>Python的标准库实在是<a href="http://lenciel.cn/2013/10/recharging-the-python-library/">不够用</a>，所以一个很常见的情况是我们需要在每个项目使用的<code>virtualenv</code>里面都安装一些常用的库。</p>

<p>为了加速安装的过程，有两个小窍门。</p>

<p>一个是使用国内的源，比如<a href="http://www.v2ex.com/">v2ex</a>提供的。只需要新建或者编辑<code>~/.pip/pip.conf</code>，加入一行：</p>

<p>```
[global]
index-url = http://pypi.v2ex.com/simple</p>

<p>```</p>

<p>另一个就是打开pip的<code>download cache</code>，这样可以避免pip每次都去下载相同的东西。只需要在<code>.bashrc</code>或者是<code>.zshrc</code>里面加入一行：</p>

<p>```
export PIP_DOWNLOAD_CACHE=$HOME/.pip-download-cache</p>

<p>```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[给Python标准库充电]]></title>
    <link href="http://lenciel.cn/2013/10/recharging-the-python-standard-library/"/>
    <updated>2013-10-17T12:27:00+08:00</updated>
    <id>http://lenciel.cn/2013/10/recharging-the-python-standard-library</id>
    <content type="html"><![CDATA[<p>Python的自荐页面<a href="http://www.python.org/about/">About Python</a>上号称自家的标准库是”batteries included”的，但实际情况却不是这样。对Python标准库的批评几乎从来没有中断过。著名的Python包<a href="http://docs.python-requests.org/en/latest/">Requests</a>的作者甚至决定永久把Requests保持为第三方库而拒绝加入标准库，他的理由是：<a href="http://www.leancrew.com/all-this/2012/04/where-modules-go-to-die/">加入标准库就会死翘翘</a>。</p>

<p>再举个例子，我们最近的项目里面都用到了<a href="https://pypi.python.org/pypi/pytz/">pytz</a>。标准库里面的datetime是支持时区的（tzinfo类），但是并没有包含时区信息（tzinfo是抽象类需要自己实现）。遵照前人的经验使用pytz是最好的办法<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<p>所以不奇怪的是，几乎所有的Python项目都会引用一堆优秀的第三方库。为了管理这些依赖一般都会用上pip:</p>

<ul>
  <li>在项目里面用pip freeze生成一个<code>requirement.txt</code>文件</li>
  <li>在创建<code>virtualenv</code>的时候使用之前生成的文件安装所有的依赖</li>
</ul>

<p>为了不在每次运行<code>pip install -r requirements.txt</code>的时候都下载一堆依赖，你还可以打开pip的<a href="http://lenciel.cn/2013/10/pip-download-cache/">download cache</a>。如果整个公司在做项目的时候都需要经常使用一些包，甚至可以考虑<a href="https://github.com/wolever/pip2pi">做一个Pypi</a>的库来共享，类似于Maven的Repo。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p><a href="http://stackoverflow.com/questions/2532729/daylight-saving-time-and-time-zone-best-practices/3404919#3404919">保存时间和时区的最佳实践</a>.   <a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p><a href="http://stackoverflow.com/questions/14762518/python-datetime-strptime-and-strftime-how-to-preserve-the-timezone-informat">如何在datetime转换中保存时区信息</a>.    <a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
