<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | @Lenciel]]></title>
  <link href="http://lenciel.cn/blog/categories/tips/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2014-04-29T16:16:29+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用dnsmasq配置本地开发环境]]></title>
    <link href="http://lenciel.cn/2014/04/dnsmasq-on-mac/"/>
    <updated>2014-04-25T14:53:37+08:00</updated>
    <id>http://lenciel.cn/2014/04/dnsmasq-on-mac</id>
    <content type="html"><![CDATA[<p>做Web开发的时候经常需要修改<code>/etc/hosts</code>文件把<code>dev.cool.project</code>或者<code>cool.project.dev</code>这样的域名指向127.0.0.1(如果你从来没有这么做过那你可以跳过后面的内容了但, seriously? you are a web dev and never did this before?）。这样做有些麻烦：</p>

<ul>
  <li>每个项目需要修改hosts文件</li>
  <li>需要root权限才能修改这个文件</li>
</ul>

<p>这里记一下如何用<a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">dnsmasq</a>把所有<code>dev</code>结尾的域名都指向<code>127.0.0.1</code>。</p>

<h4 id="dnsmasq">安装dnsmasq</h4>

<p>在Mac下安装什么东西本座都用<a href="http://brew.sh/">homebrew</a>，先更新brew:</p>

<p><code>bash
    $ brew up
</code></p>

<p>然后安装dnsmasq。注意安装命令的输出，结尾是有配置的简单说明的。因为我用了<a href="http://lenciel.cn/2013/03/boxen-introduction/">boxen</a>所以路径不一定对每个人都适用，以你自己的输出为准：</p>

<p><code>bash
    $ brew install dnsmasq
==&gt; make install PREFIX=/opt/boxen/homebrew/Cellar/dnsmasq/2.69
==&gt; Caveats
To configure dnsmasq, copy the example configuration to /opt/boxen/homebrew/etc/dnsmasq.conf
and edit to taste.
  cp /opt/boxen/homebrew/opt/dnsmasq/dnsmasq.conf.example /opt/boxen/homebrew/etc/dnsmasq.conf
To have launchd start dnsmasq at startup:
    sudo cp -fv /opt/boxen/homebrew/opt/dnsmasq/*.plist /Library/LaunchDaemons
Then to load dnsmasq now:
    sudo launchctl load /Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist
==&gt; Summary
/opt/boxen/homebrew/Cellar/dnsmasq/2.69: 7 files, 488K, built in 22 seconds
</code></p>

<h4 id="dnsmasq-1">配置dnsmasq</h4>

<p>在<code>dnsmasq.conf</code>里面添加一个配置<code>dev</code>的配置：</p>

<p><code>bash
address=/dev/127.0.0.1
</code></p>

<p>重启dnsmasq服务:</p>

<p><code>bash
$ sudo launchctl stop homebrew.mxcl.dnsmasq
$ sudo launchctl start homebrew.mxcl.dnsmasq
</code></p>

<h4 id="osx">配置OSX</h4>

<p>安装了dnsmasq之后你有两个选择：</p>

<ol>
  <li>把操作系统所有的DNS查询都由dnsmasq处理</li>
  <li>把<code>.dev</code>的DNS查询交给dnsmasq处理</li>
</ol>

<p>第一个比较简单，在<code>System Preferences</code>里面配置一下就可以了。
第二个需要用/etc/reslov.conf文件来更精细的控制DNS查询:</p>

<p><code>bash
$ sudo mkdir -p /etc/resolver
$ sudo touch /etc/resolver/dev
$ sudo vi /etc/resolver/dev 
</code></p>

<p>在<code>/etc/resolver/dev</code>里面添加一行<code>nameserver 127.0.0.1</code>就可以了。</p>

<h3 id="section">测试效果</h3>

<p>```bash</p>

<pre><code>$ ping -c 1 www.sina.com.cn
PING newscd.sina.com.cn (221.236.31.145): 56 data bytes
 
$ ping -c 1 this.is.a.test.dev
PING this.is.a.test.dev (127.0.0.1): 56 data bytes
 
$ ping -c 1 this.is.cool.dev
PING this.is.cool.dev (127.0.0.1): 56 data bytes ```
</code></pre>

<p>嗯哼~</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[构建Deployment系统 (1)]]></title>
    <link href="http://lenciel.cn/2014/04/pipeline-for-deployment/"/>
    <updated>2014-04-22T02:49:38+08:00</updated>
    <id>http://lenciel.cn/2014/04/pipeline-for-deployment</id>
    <content type="html"><![CDATA[<p>对软件公司，特别是互联网软件公司来说，发布流程是企业的<a href="http://lenciel.cn/2013/05/the-importance-of-deploy-as-will/">核心竞争力</a>。</p>

<p>那么什么是一个好的发布流程呢？Github（别忘了它本身也是一家软件公司）的CTO在介绍<a href="http://lenciel.cn/2013/03/boxen-introduction/">Boxen
</a>的时候说过，他们公司新员工从拿电脑到可以开始编码只要30分钟，这给混过几家10w+员工公司的我带来的震撼特别强烈。</p>

<p>所以我觉得，一个好的软件发布流程应该是：</p>

<ol>
  <li>新员工在第一天入职就能push改动到production</li>
  <li>新员工在第一天入职就能学会怎么从production撤销一个错误的改动</li>
  <li>整个deployment流程是可预测的，也是可追溯的</li>
</ol>

<p>那么，如果你到了一个新公司，推开门发现那是一个蛮荒之地，应该怎么办呢？这篇先理一下基本的概念，然后后面分节描述一下讲到的这些工具具体要怎么配置怎么用。</p>

<h1 id="section">善其器</h1>

<p>先check一下东西齐不齐活:</p>

<ol>
  <li>代码repo是放在哪里： (<a href="http://git-scm.com/ (Git)">git</a>, <a href="http://mercurial.selenic.com/ (Mercurial)">hg</a>, …),</li>
  <li>hook到repo的一套有review功能的管理系统: (<a href="http://www.reviewboard.org">ReviewBoard</a>, <a href="https://www.gitlab.com/‎ (Gitlab)">Gitlab</a>, <a href="https://code.google.com/p/gerrit/ (Gerrit)">gerrit</a>, <a href="https://bitbucket.org/ (BitBucket)">bitbucket</a>, <a href="https://github.com/ (Github)">github</a>, …),</li>
  <li>hook到repo的一套CI管理系统:  (<a href="http://jenkins-ci.org/ (Jenkins)">Jenkins</a>, <a href="https://travis-ci.org/ (Travis CI)">Travis CI</a>, …),</li>
  <li>自动部署代码到服务器的系统 (<a href="https://puppetlabs.com/‎ (Puppet)">Puppet</a>, <a href="http://www.getchef.com/chef/ (Chef)">chef</a>, <a href="http://clusto.org/ (Clusto)">clusto</a>, …).</li>
</ol>

<p><img src="/downloads/images/2014_04/deployment_phases.png" alt="Deployment Phases" title="Don't touch me..." /></p>

<p>你选择的工具当然对后面的流程有很大的影响。我们公司是采用<code>git</code>+<code>Gitlab</code>+<code>Reviewboard</code>+<code>Jenkins</code>+<code>fabric</code>来做部署。在搭建这套东西之前我也试过很多其他的东西，有的东西我放弃了是因为太复杂不够轻量(比如Puppet)，有的东西我放弃了是因为，长得太丑(比如Gerrit)。</p>

<h1 id="section-1">开发者视角</h1>

<p>假设你今天入职，写了段代码，从你的视角看到的deployment流程:</p>

<ol>
  <li>提交到本地repo。</li>
  <li>运行<a href="http://www.reviewboard.org/docs/rbtools/dev/">RBTools</a>生成一个Reviewboard的<code>review request</code></li>
  <li>代码通过了review拿到提交许可后，把代码merge然后push到Gitlab上的<code>alpha</code>分支</li>
  <li>Jenkins拿到change后做自动测试，然后部署到test服务器，发邮件通知QA</li>
  <li>QA或者是开发者自己玩一下test服务器，发现没有问题，手动运行Jenkins脚本。脚本会对代码打tag，并部署改动到staging服务器，发邮件通知QA和PO</li>
  <li>PO确认某个版本的所有代码都到了staging，QA做回归测试</li>
  <li>测试通过后，手动运行Jenkins脚本，脚本会部署某个staging服务器的版本到production服务器</li>
  <li>部署完毕后，Jenkins运行相应的冒烟测试，测试通过后邮件关键人士，表明production音容宛在</li>
</ol>

<p>整个流程里面，如果你是一个靠谱的开发者，需要花时间参与的步骤很少。但是如果是一个习惯不好的开发者，可能被review代码的人，Jenkins的自动测试，QA的集成测试或者是回归测试不断修理，惨痛的教训一定会让你成长起来的。</p>

<h1 id="section-2">机器视角</h1>

<p>很多重复性的事情，都是机器在干:</p>

<ol>
  <li>Reviewboard上被通过的代码被push上Gitlab的<code>alpha</code>分支后，Jenkins自动运行:
    <ol>
      <li>静态扫描工具</li>
      <li>单元测试</li>
      <li>有报错发邮件通知事主。没有报错， 部署<code>alpha</code>分支到test服务器</li>
      <li>部署test服务器后，运行集成测试集</li>
    </ol>
  </li>
  <li>有人手工触发staging的build:
    <ol>
      <li>merge<code>alpha</code>分支到<code>staging</code>分支</li>
      <li>部署<code>staging</code>分支到staging服务器</li>
      <li>部署服务器后，运行集成测试集</li>
    </ol>
  </li>
  <li>有人手工触发production的build:
    <ol>
      <li>merge<code>staging</code>分支到<code>production</code>分支</li>
      <li>部署<code>production</code>分支到production服务器</li>
      <li>after deployment, runs integration tests against production</li>
    </ol>
  </li>
</ol>

<p>这里很多具体的步骤需要通过Jenkins和它的插件甚至是自己写的各种脚本来配合完成</p>

<h1 id="section-3">考虑扩展性</h1>

<p>未知的未来，你可能会发现项目换了开发语言，项目换了JS框架，项目自动化测试改成手动了…在架构整套部署系统的时候，要做好和具体语言具体流程的解耦。</p>

<p>一些可能会有用的思路:</p>

<ol>
  <li>项目组足够小，成员能力足够好，可以不用review代码直接checkin到公共repo(成员能力足够好至少意味着，他有写靠谱的UT)</li>
  <li>你构建出来的系统，每个不同的build应该可以很容易的绑定不同的工具:
    1. 静态扫描工具是很好 (比如 <a href="http://www.pylint.org/ (PyLint)">pylint</a>, <a href="https://github.com/jcrocholl/pep8 (pep8.py)">pep8</a>或者<a href="http://www.jshint.com/ (JSHint)">jshint</a>)，但最好项目一开始就用它们。如果是旧项目不要往上套，费时费力
    2. 如果是用precommit的hook来跑测试，开发者本地可以不跑
    3. 如果是有特别要求的项目（安全性，健壮性等），可以很容易绑定其他的工具</li>
  <li>每个项目对应不同的deployment环境有不同的build配置</li>
  <li>三驾马车的服务器配置 (test, staging, production)什么时候应该祭出？个人经验是，如果研发团队超过3人了，再怎么省也得有两个(test+production)。如果有专职的QA团队，并且希望有稳定的版本部署出去，那三种环境的配置几乎是必须的。</li>
  <li>手动触发test到staging以及staging到production主要是为了手动测试的时间窗，让版本发布更可控。你也可以结合项目的具体情况决定要不要把这两步也自动化。</li>
</ol>

<p>如果是用了Jenkins，上面这些就非常方便了，因为说白了每个build不过就是当特定条件满足时执行的一堆特定脚本而已：当然，如果你发现公司还在用Ubuntu 12.04做build server，可能也没有那么方便。</p>

<h1 id="rants">Rants</h1>

<ol>
  <li><em>什么时候需要考虑上这种流程?</em> 如果是三个人的车库队伍，然后就队伍里面又没人有兴趣做对运维，那就算了吧。如果是正经开门做生意的公司，都该上。</li>
  <li><em>能不能允许”加急”?</em> 和很多大公司比，这套流程虽然已经精简了，但是总有时候我们有非常”紧急的”改动，能不能不走这套流程直接上？ 简单的回答就是，不能。如果你发现了有人要求加急，一定是目前的流程太慢。这种情况，一定是有什么东西坏掉了吧。比如之前的代码check不严格，很严重的错误很容易就到了production，或者你的员工们写的UT跑一年都跑不完或者是在build server上根本没法跑。</li>
  <li><em>为什么不自动部署?</em> 是，这里描述的流程只有到test服务器是自动部署的，后面到staging和production都是手动部署。因为据说，把自动merge和自动测试的代码部署到production服务器，是一个很容易让你半夜接到电话的举动，而且很多CEO鬓角的白头发都是因为这样的部署长出来的。当然如果你的manager已经在他老板那里夸口说你来了整个手动测试team都可以解散了，我就只能祝你好运了。</li>
  <li>静态扫描的工具（无论是lint还是style的检查），常常都会给团队带来比UT更好的提升：很多时候你在review的时候要不断告诉同事特别是新手同事你这段代码连style都不对，对两个人都是伤害…如果有个无情的机器用不妥协地负责做这件事情，嗯哼…</li>
</ol>

<p>Hope you have fun when setting up the pipeline for your company.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pomodoro Technique]]></title>
    <link href="http://lenciel.cn/2014/04/pomodoroda-tech/"/>
    <updated>2014-04-03T13:44:35+08:00</updated>
    <id>http://lenciel.cn/2014/04/pomodoroda-tech</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2014_04/pomodoro_tech.jpg" alt="Pomodoro Technique" title="Don't touch me..." /></p>

<p>时间管理对每个人都是非常重要的，相关的理论和工具都有很多。本座试过很轻量的<a href="https://github.com/vim-scripts/todolist.vim">todolist.vim</a>，也试过很大气的<a href="https://www.omnigroup.com/omnifocus">OmniFocus</a>，但可能因为自己比较爱随意乱来的性格，这些工具最终都被本座慢慢荒弃。</p>

<p>倒是从E公司就一直用到现在的<a href="http://pomodorotechnique.com">Pomodoro Technique</a><sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>，因为规则简单上手迅捷疗效明显，最终成为了日常生活的一部分。</p>

<h2 id="section">起</h2>

<p>Francesco Cirillo在1992年正式提出了<code>Pomodoro Technique</code>，命名似乎来源于手边的番茄形状的烹调定时器。简单的说，Pomodoro就是：</p>

<ul>
  <li>一天开始的时候规划今天要完成的几项任务</li>
  <li>设定你的番茄钟（软件、闹钟、whatever），时间是25分钟</li>
  <li>开始完成第一项任务，直到番茄钟响铃或提醒</li>
  <li>停止工作，休息3~5分钟</li>
  <li>开始下一个番茄钟，继续该任务。一直循环下去，直到完成该任务，并在列表里将该任务划掉。</li>
  <li>如此这般完成今天所有的事情。</li>
  <li>每四个番茄钟后，休息25分钟。</li>
</ul>

<p>在工作的25分钟周期里面，什么样的中断都置之不理当然是最好的。但如果有中断进来：</p>

<ul>
  <li>非得马上做不可的话，停止当前这个番茄钟并宣告它作废（哪怕还剩5分钟就结束了），完成带来中断的事情，之后再重新开始同一个番茄钟；</li>
  <li>不是必须马上去做的话，将带来中断的事情记在另一个列表里（比如叫”Exception”或者”Unplanned”什么的），然后接着完成这个番茄钟。</li>
</ul>

<p>接下来，一天结束的时候，你可以回忆一下今天完成了几个钟，并且反思：</p>

<ul>
  <li>你受到了哪些中断？</li>
  <li>你最能集中注意力的地方是哪里？</li>
  <li>你如何避免开始做一个无趣的工作？</li>
  <li>什么类型的活动会花去超过你估计的时间？</li>
  <li>你是否因为处理管理性质的事务而没时间做该做的事情？</li>
</ul>

<h2 id="section-1">承</h2>

<p>为什么这种办法是有效的呢？个人觉得主要是两方面的原因。</p>

<h3 id="section-2">心理层面</h3>

<h4 id="section-3">分解过的任务更具体</h4>

<p>我们做一件事情，复杂度太高的话，兴奋度就会降低，你就会选择拖延。一件事情在被分解成很小的部分之后，才会变得清晰。甚至在操作中，如果你一个任务需要7、8个钟都迭代不完，你可能还应该把这件事情先分解成更小的子任务。</p>

<h4 id="section-4">分解过的任务更可控</h4>

<p>休息和工作之间的心境切换起来很难。有时候你来上班或者吃过饭之后，要进入真正做事的状态花的时间会比你想象的要多很多。番茄大法是动作导向的：上好闹钟，订好提示音，可以让你更好控制自己。</p>

<p>完美主义也是妨碍你按时完成任务的一大原因。想出一个完美的解决方案，那不就是拖延么？在Pomodoro大法中有很多迭代开发的禅意：你不能用25分钟内的时间去考虑完美的方案，乖乖上好闹钟，完成25分钟的任务，然后5分钟休息时间里面去想那些改进的方案吧。</p>

<h4 id="section-5">分解过的任务更有趣</h4>

<p>如果任务无趣时，拖延的时间会增加。比如做项目做到最后的收尾工作之类时，常常非常无趣。分解它们，让你知道你多快就能完成它，可以激励自己。</p>

<p>别人催你完成你不想完成的事情时，你多半也做不好。”have-to”和”want-to”之间的矛盾简直就是<a href="http://en.wikipedia.org/wiki/Terrible_twosX">the-terrible-two</a>终生梦魇版。通过使用番茄大法，你每天确信自己能够完成的事情能够做到心中有数。</p>

<h3 id="section-6">生理层面</h3>

<p>如果你常看球赛的话，就会知道一些关于<strong>模式</strong>的八卦。</p>

<p>比如穆图为多家球队效力都表现不错，对于这种成功他解释说：“诅咒对我是无效的，因为我总是把内裤穿在外面。”</p>

<p>约翰特里，切尔西的队长，国家队的中坚，问下他怎么做到集中精力？他会告诉你他每次比赛前都听同一张CD，在同一个地方停车，把鞋带系三次。</p>

<p>我大学球队的主教练，从来不许老婆和女儿坐进替补席。</p>

<p>我们的大脑在一定环境下，会进入某种模式，处理某些问题特别迅速。这种受后天训练得到的反应是Conditioned Reflexes（条件反射）。而简短且固定的专注时间，可以训练你进入这种模式。</p>

<h2 id="section-7">转</h2>

<p>Pomodoro说到底是一种轻量的<a href="http://zh.wikipedia.org/wiki/GTD">GTD</a>规则。</p>

<p>如果是工作内容高度碎片化的人，比如高管，其实是没法做到动不动就入定30分钟不理人间事的。</p>

<p>如果是对创意要求很高的工种，比如画家，作家，好像也不太适合这种非常规律的迭代。</p>

<h2 id="section-8">合</h2>

<p>拿出纸笔，写下你很想完成的一些事情。从里面挑一个最重要的，你最想马上完成的。然后：</p>

<ol>
  <li>定一个10分钟的闹钟</li>
  <li>集中精力完成</li>
  <li>当闹钟到时立刻停止</li>
  <li>休息三分钟</li>
</ol>

<p>结果怎样？你多久看一次闹钟？有没有被其他事情打断？</p>

<p>如果觉得10分钟自己能轻松搞定，就可以慢慢延长这个时间了。有不少软件可以帮助你自由的定时和统计：</p>

<ul>
  <li><a href="https://fnd.io/#/search?mediaType=all&amp;term=Pomodoro">iOS应用</a></li>
  <li><a href="http://www.publicspace.net/Vitamin-R/index.html">Mac应用</a></li>
  <li><a href="http://www.focusboosterapp.com/">Windows应用</a></li>
</ul>

<p>各种浏览器插件那就不说了满坑满谷都是。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>http://pomodorotechnique.com/。<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决iowait过高的告警]]></title>
    <link href="http://lenciel.cn/2014/02/hunting-the-iowait-problem-maker/"/>
    <updated>2014-02-24T09:22:00+08:00</updated>
    <id>http://lenciel.cn/2014/02/hunting-the-iowait-problem-maker</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2014_02/warning_letter.png" alt="warning letter" title="Don't touch me..." /></p>

<p>从Nagios切到<a href="https://www.zabbix.com">Zabbix</a>之后，经常大清早被iowait过高的告警邮件叫醒。因为这套Zabbix监控是本座搭的，所以解决这个问题就只有本座来了…..哎，不知道是不是把首席运营官给宠坏了。</p>

<h2 id="iowait">iowait的定义和计算方式</h2>

<p>iowait的定义为：</p>

<p><blockquote><p>iowait is time that the processor/processors are waiting (i.e. is in an idle state and does nothing), during which there in fact was outstanding disk I/O requests.</p></blockquote></p>

<p>也就是至少有一个I/O在进行时CPU处于<code>idle</code>状态的比例。</p>

<p>我们都知道用<code>vmstat</code>, <code>iostat</code>, <code>sar</code>等命令查看系统状况的时候，CPU有四种比较主要的状态：user, sys, idle和iowait。它们都是表示CPU处于此状态的一个平均比例（其中sar命令是可以用<code>-P</code>具体指定哪个CPU的，其他的命令一般是所有CPU的平均），通常相加应该就是1.</p>

<p>这个比例的统计其实是通过kernel不断的更新计数器然后计算出来的。当时钟中断发生的时候，kernel检查当前CPU是不是idle的。如果不是，就检查正在执行的指令是user space还是kernel space的。如果是user space就给<code>user</code>的计数器加1，kernel space就给<code>sys</code>计数器加1.</p>

<p>类似的，如果CPU是处于idle状态，kernel就检查是不是有I/O操作正在发生（可以是local disk也可以是<code>mount</code>的NFS），如果有就给<code>iowait</code>计数器加1，没有就给<code>idle</code>计数器加1.</p>

<p>当我们运行<code>vmstat</code>或者<code>sar</code>等命令查看时，它们会先读取当前这几个计数器的计数，然后在用户指定的时间里面等待，然后再次读取。因为用户指定的时间里面过去了多少个<code>tick</code>是可以计算的，然后前后计数器的增值也可以计算，就可以算出一个比值。比如如果用户运行的命令是<code>vmstat 2</code>，表示每两秒取样一次，那么：</p>

<ol>
  <li>tick是10ms一个，所以总共是200个ticks</li>
  <li>计数器的增量/200*100就是每个状态的百分比</li>
</ol>

<h2 id="iowait-1">iowait的意义</h2>

<p>这其实比它怎么计算要难理解一些。比如本座之前心里就有一个疑问：既然只是某个process在block，那么系统会schedule其他的事情，这对性能有什么大不了的影响呢？</p>

<p>来看几个例子。</p>

<h3 id="section">例子一</h3>

<p>假设一个程序进行批量的事务，每个事务都有一个10ms的计算任务，计算出的结果通过同步的方式写到磁盘。由于它写结果的文件是阻塞方式打开的，所以I/O完成之前写操作是不会<code>return</code>的。如果我们假设磁盘系统没有cache，每个物理的I/O需要20ms，那么一个事务需要30ms。也就是每秒33个事务（33 tps）。如果把系统算成只有一个CPU的话，很显然<code>iowait</code>就是66%。</p>

<p>这种情况下，如果我们能改进I/O子系统，比如启用磁盘的缓存，让每次物理的I/O只需要1ms的话，那么<code>iowait</code>就会迅速下降到8%左右。可见这种情况下，<code>iowait</code>直接影响着程序的performance。</p>

<h3 id="section-1">例子二</h3>

<p>假设一个磁盘检查的程序运行在系统上，每秒钟读4k的数据。我们假设这个程序的入口是main()，然后读磁盘的函数是read()，main()和read()都是用户态的。read()属于libc.a，会调用kread()这个系统调用来进行物理的I/O，这个时候就进入了kernel态。整个main(),read()和kread执行的时间加起来不长，我们假设是50微秒。而物理的I/O需要多久要看seek的数据有多远，假设需要2-20ms。这样就完全有可能当时钟中断的时候，cpu是idle的，而且I/O正在发生，于是<code>iowait</code>值就达到97-98% (如果每个I/O需要20ms就是99-100%)。</p>

<p>这种情况下，虽然<code>iowait</code>数值非常高，其实这个系统的性能是正常的。</p>

<h3 id="section-2">例子三</h3>

<p>假设有两个程序跑在同一个CPU上。一个程序写得有点儿问题，I/O会阻塞10秒左右。另一个则100%的时间都在做计算。由于当前一个程序阻塞起来的时候，后面这个程序被运行了，因此无论什么时候都没有CPU处于idle的状态等I/O，于是<code>iowait</code>一直是0，这时候其实系统的performance是有很大的问题的。</p>

<h3 id="section-3">例子四</h3>

<p>假设系统是4核的CPU，运行了6个程序。其中4个程序有70%时间在进行物理的I/O，30%的时间在进行计算任务（假设其中25%在用户态，5%在kernel态）。另外2个程序假设100%时间都在用户态进行计算任务，没有任何I/O操作。</p>

<p>如果我们查看系统的CPU状态，大概可能看到下面的状况:</p>

<pre><code>     cpu    %usr    %sys    %iowait   %idle
      0       50      10      40       0
      1       50      10      40       0
      2      100       0       0       0
      3      100       0       0       0
      -       75       5      20       0
</code></pre>

<p>如果我们把相同的6个程序跑到一个6核的机器（相同的CPU和磁盘配置），那么可以简单的认为会有下面的结果：</p>

<pre><code>     cpu    %usr    %sys    %iowait   %idle
      0       25       5      70       0
      1       25       5      70       0
      2       25       5      70       0
      3       25       5      70       0
      4      100       0       0       0
      5      100       0       0       0
      -       50       3      47       0
</code></pre>

<p>也就是说，同样的程序跑在不同的系统上，iowait增加了一倍多，而这个时候其实没有什么performance问题，只不过是系统还能做更多的计算工作。</p>

<h3 id="section-4">结论</h3>

<ul>
  <li>CPU处于<code>iowait</code>状态，并不说明CPU不能运行其他的程序</li>
  <li><code>iowait</code>偏高只能说明系统这个时刻还能进行更多的计算任务，至于是不是出现了performance问题，需要进一步分析才知道</li>
</ul>

<h2 id="section-5">找出造成问题的进程</h2>

<p>虽然每次都是6点半多少说明应该是某个cron任务（因为机器上没有其他自定义的定时任务）但没法具体知道究竟是哪个。</p>

<p>最简单的办法当然是出问题的时候用<code>iotop</code>命令来看了 。</p>

<p><code>
 # iotop
 Total DISK READ: 8.00 M/s | Total DISK WRITE: 20.36 M/s
  TID PRIO USER DISK READ DISK WRITE SWAPIN IO&gt; COMMAND
 15758 be/4 root 7.99 M/s 8.01 M/s 0.00 % 61.97 % bonnie++ -n 0 -u 0 -r 239 -s 478 -f -b -d /tmp
</code></p>

<p>但是谁又会在6点多起来干这种事情。除开修改系统时间重现问题，还可以通过ps命令查看记录处于<code>D</code>状态的进程来找到。</p>

<p><code>ps</code>命令输出里面对<code>PROCESS STATE CODES</code>的定义是：</p>

<p><code>
 D uninterruptible sleep (usually IO)
 R running or runnable (on run queue)
 S interruptible sleep (waiting for an event to complete)
 T stopped, either by a job control signal or because it is being traced.
 W paging (not valid since the 2.6.xx kernel)
 X dead (should never be seen)
 Z defunct ("zombie") process, terminated but not reaped by its parent.
</code></p>

<p>处于等待I/O完成状态的进程一般就是<code>D</code>，所以可以通过tmux起一个sessio来跑下面的命令：</p>

<p><code>
	while true; do date; ps auxf | awk '{if($8=="D") print $0;}'; sleep 1; done &gt; /var/log/ps.log
</code></p>

<p>然后在又一个这样的6点半：</p>

<p><img src="/downloads/images/2014_02/zabbix_cpu_util.png" alt="warning letter" title="Don't touch me..." /></p>

<p>去日志里面查看：</p>

<p>```
$ cat /var/log/ps.log | grep D</p>

<p>root      7585  7.9  0.0   5904   812 ?        D    06:34   0:02                  _ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5904   812 ?        D    06:34   0:02                  _ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5904   812 ?        D    06:34   0:02                  _ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5944   944 ?        D    06:34   0:02                  _ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:02                  _ /usr/bin/updatedb.mlocate
root      7585  7.5  0.0   5944   944 ?        D    06:34   0:02                  _ /usr/bin/updatedb.mlocate
root      7585  7.5  0.0   5944   944 ?        D    06:34   0:02                  _ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   5944   944 ?        D    06:34   0:03                  _ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  _ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  _ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  _ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  _ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  _ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  _ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  _ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  _ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:03                  _ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  _ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5944   944 ?        D    06:34   0:03                  _ /usr/bin/updatedb.mlocate
root      7585  7.8  0.0   5944   944 ?        D    06:34   0:04                  _ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  _ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  _ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  _ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  _ /usr/bin/updatedb.mlocate
root      7585  7.7  0.0   5944   944 ?        D    06:34   0:04                  _ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   5944   944 ?        D    06:34   0:04                  _ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   6000   968 ?        D    06:34   0:04                  _ /usr/bin/updatedb.mlocate
root      7585  7.6  0.0   6000   968 ?        D    06:34   0:04                  _ /usr/bin/updatedb.mlocate
```</p>

<p>嗯，原来是<code>/usr/bin/updatedb.mlocate</code>。Google了一下<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup><sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>发现其实关掉也没什么：</p>

<p><code>
sudo killall updatedb.mlocate
sudo chmod -x /etc/cron.daily/mlocate
</code></p>

<p>整个世界清静了。</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>http://www.iasptk.com/ubuntuwp/can-i-disable-updatedb-mlocate/<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>http://ubuntuforums.org/showthread.php?t=1243951&amp;page=2&amp;p=7844783#post7844783<a href="#fnref:2" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[定制机上恢复google原厂应用]]></title>
    <link href="http://lenciel.cn/2013/12/restore-google-apps/"/>
    <updated>2013-12-18T22:33:00+08:00</updated>
    <id>http://lenciel.cn/2013/12/restore-google-apps</id>
    <content type="html"><![CDATA[<p>最近因为移动的手机丢了，正好宽带升级到100M送了两个电信的卡没地方用，入了一个Rick推荐的电信移动双卡双待的机器：<a href="http://item.jd.com/824702.html">中兴N986</a>。</p>

<p>机器用来当小三机已经是非常不错了，唯一让本座纠结的就是电信的合约机老是喜欢把google账号干掉，而小弟的所有联系人又都在google（虽然现在看起来这么做可能也未必妥当）。</p>

<p>据Rick大大说，之前是可以用小米的<a href="http://app.xiaomi.com/detail/36925">谷歌应用下载器</a>来直接把Google的一干应用装回来。但是好像因为<a href="http://www.zhihu.com/question/21103129">Google不太愿意</a>自己的应用被未授权的雷总装来装去，这个应用已经没有更新了：青漾系统是4.2.1，下载回来的apk直接<code>adb install</code>会因为android版本不match报错。</p>

<p>于是只好去搜了<a href="http://www.teamandroid.com/gapps/">4.2.1的stock gapps包</a>回来自己撸 - <a href="http://pan.baidu.com/s/1iPXn">百度盘分享了一份</a>。</p>

<p>首先要root机器，然后把<code>/system/app</code>路径mount成rw的。</p>

<p>root就是刷recovery然后替换一些文件，当然大天朝有不少神器做得非常不错，比如<a href="http://www.mgyun.com/">刷机大师</a>这种软件，感觉会摧毁电脑城刷机青年的就业机会。而修改目录权限这种事情，如果你对命令行不熟，好像有很多流行的文件夹管理应用可以用来更改目录的权限。</p>

<p>然后，直接把下载回来的gapps.zip解压，进入<code>system/app</code>路径，将自己需要的apk往<code>/system/app</code>路径push就行了。</p>

<p>以Google联系人同步为例，就是：</p>

<p><code>bash
adb push GoogleContactsSyncAdapter.apk /system/app/.
</code></p>

<p>这里要注意的就是所有Google的应用有些基础的依赖，要记得check一下/system/app下面是不是都有，比如<code>GoogleServicesFramework.apk</code>等等。</p>

]]></content>
  </entry>
  
</feed>
