<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rants | @Lenciel]]></title>
  <link href="http://lenciel.cn/blog/categories/rants/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2014-06-09T11:05:44+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[People Empty Out]]></title>
    <link href="http://lenciel.cn/2014/04/people-empty-out/"/>
    <updated>2014-04-19T17:36:49+08:00</updated>
    <id>http://lenciel.cn/2014/04/people-empty-out</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2014_04/bukowski.jpg" alt="Bukowski" title="Don't touch me..." /></p>

<p>1969年，出版商<a href="http://en.wikipedia.org/wiki/John_Martin_(publisher)">John Martin</a>给了<a href="http://en.wikipedia.org/wiki/Charles_Bukowski">Charles Bukowski</a>一个月薪100刀的offer（当时的100刀大概是现在的500刀左右吧）： 只要他愿意从他当时上班的邮局辞职成为一名全职的作家。时年49岁的Bukowski接受了这份offer，并在1971年出版了他的首部小说<a href="http://en.wikipedia.org/wiki/Post_Office_(novel)">《Post Office》</a>。小说由Martin的<a href="http://en.wikipedia.org/wiki/Black_Sparrow_Press">Black Sparrow出版社</a>出版，名字算是用来表示跟自己过去的邮局里的职业生涯一刀两断。</p>

<p>15年之后，Bukowski在给Martin的信里面表达了他离开邮局的全职工作之后的体验：</p>

<p>(<em>Source: <a href="http://www.amazon.com/gp/product/1574230883/ref=as_li_ss_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1574230883&amp;linkCode=as2&amp;tag=letofnot-20">Reach for the Sun Vol. 3</a>; Image: Charles Bukowski, <a href="http://larosacanina.files.wordpress.com/2011/01/bukowski.jpg">via</a>.</em>)</p>

<p><blockquote><p>Hello John:</p></p><p><p>Thanks for the good letter. I don’t think it hurts, sometimes, to remember where you came from. You know the places where I came from. Even the people who try to write about that or make films about it, they don’t get it right. They call it “9 to 5.” It’s never 9 to 5, there’s no free lunch break at those places, in fact, at many of them in order to keep your job you don’t take lunch. Then there’s OVERTIME and the books never seem to get the overtime right and if you complain about that, there’s another sucker to take your place.</p></p><p><p>You know my old saying, “Slavery was never abolished, it was only extended to include all the colors.”</p></p><p><p>And what hurts is the steadily diminishing humanity of those fighting to hold jobs they don’t want but fear the alternative worse. People simply empty out. They are bodies with fearful and obedient minds. The color leaves the eye. The voice becomes ugly. And the body. The hair. The fingernails. The shoes. Everything does.</p></p><p><p>As a young man I could not believe that people could give their lives over to those conditions. As an old man, I still can’t believe it. What do they do it for? Sex? TV? An automobile on monthly payments? Or children? Children who are just going to do the same things that they did?</p></p><p><p>Early on, when I was quite young and going from job to job I was foolish enough to sometimes speak to my fellow workers: “Hey, the boss can come in here at any moment and lay all of us off, just like that, don’t you realize that?”</p></p><p><p>They would just look at me. I was posing something that they didn’t want to enter their minds.</p></p><p><p>Now in industry, there are vast layoffs (steel mills dead, technical changes in other factors of the work place). They are layed off by the hundreds of thousands and their faces are stunned:</p></p><p><p>“I put in 35 years…”</p></p><p><p>“It ain’t right…”</p></p><p><p>“I don’t know what to do…”</p></p><p><p>They never pay the slaves enough so they can get free, just enough so they can stay alive and come back to work. I could see all this. Why couldn’t they? I figured the park bench was just as good or being a barfly was just as good. Why not get there first before they put me there? Why wait?</p></p><p><p>I just wrote in disgust against it all, it was a relief to get the shit out of my system. And now that I’m here, a so-called professional writer, after giving the first 50 years away, I’ve found out that there are other disgusts beyond the system.</p></p><p><p>I remember once, working as a packer in this lighting fixture company, one of the packers suddenly said: “I’ll never be free!”</p></p><p><p>One of the bosses was walking by (his name was Morrie) and he let out this delicious cackle of a laugh, enjoying the fact that this fellow was trapped for life.</p></p><p><p>So, the luck I finally had in getting out of those places, no matter how long it took, has given me a kind of joy, the jolly joy of the miracle. I now write from an old mind and an old body, long beyond the time when most men would ever think of continuing such a thing, but since I started so late I owe it to myself to continue, and when the words begin to falter and I must be helped up stairways and I can no longer tell a bluebird from a paperclip, I still feel that something in me is going to remember (no matter how far I’m gone) how I’ve come through the murder and the mess and the moil, to at least a generous way to die.</p></p><p><p>To not to have entirely wasted one’s life seems to be a worthy accomplishment, if only for myself.</p></p><p><p>yr boy,</p></p><p><p>Hank</p></blockquote></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[马尔克斯的孤独与爱]]></title>
    <link href="http://lenciel.cn/2014/04/rip-marquez/"/>
    <updated>2014-04-18T20:58:42+08:00</updated>
    <id>http://lenciel.cn/2014/04/rip-marquez</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/2014_04/rip_marquez.jpg" alt="Vhost threshold" title="Don't touch me..." /></p>

<p>度过了忙乱的一周，又回到了广汉。吃完饭洗个澡，继续在书房干活，外面的天不知不觉就黯淡下来。偶像派走过来说，《舌尖上的中国》第二季开播了，快来看吧。</p>

<p>但我总觉得有什么没有做，合上电脑之前，突然想起来，对，是马尔克斯没了。早上听到这个消息的时候，我好像想着要说点儿什么来着的。</p>

<p>我最喜欢的作家是马尔克斯，但我一般不会推荐别人去读他的小说。有人问我谁的小说比较好看时，我一般都推荐村上春树。</p>

<p>在我看来，什么是好的小说呢？像《白鹿原》、《平凡的世界》那些当然是非常好的小说，但这些小说你读起来更多是在领略，而不是在参与。换句话说，那些是适合十几岁的时候看的东西。</p>

<p>而活到一定年纪，你就会发现，人生就像在爬山，因为路太窄，加上不是在上坡，就是在下坡，很难在你想策马奔腾的时候就能找到一块平坦的地方，让你潇洒一番：大多数时候你不过是孤孤单单地走在爬山的路上而已。</p>

<p>问我的人大都和我差不多年纪，在城市里面生活，我想他们的体会应该和我类似。而在我眼中，村上春树把城市生活里的孤独感捕捉并表达到了无论是什么背景的读者都会有所共鸣的地步，所以我推荐他的小说。</p>

<p>但村上的小说，虽然我非常喜欢，为什么只能排在马尔克斯后面呢？大概和他有些<a href="http://www.xnuts.cn/marathon_cross-country-race/1886.html">刻板的写作生活有关</a>，村上的作品会让你感觉到从孤独到弃绝的意味。换句话说，你经常能被他营造的孤独感吞没，他却没有告诉你应该怎么办：他自己呢，倒是知道避开作家圈子，知道去听歌跑步健身，知道在鸡蛋和高墙之间如何选择。</p>

<p>而马尔克斯则大不相同。在很多时候，他被书商打上了孤独者的标签贩卖（在我们这个年代，孤独者的孤独也成了时髦，真是让孤独者无处可逃啊）。他下面这段话，也随着《百年孤独》在国内广为传颂：</p>

<p><blockquote><p>过去都是假的，回忆是一条没有归途的路，以往的一切春天都无法复原，即使最狂乱且坚韧的爱情，归根结底也不过是一种瞬息即逝的现实，唯有孤独永恒。</p></blockquote></p>

<p>但看过《百年孤独》的人都知道，那其实是个非常热闹的故事。换句话说，虽然是写出了前面这段带着些孤独宿命论的话，马尔克斯并不是仅仅靠营造孤独感来引起你共鸣：他在劝你好好去爱。</p>

<p>孤独的确是人的宿命：我们每个人都是这世界上一个偶然的存在，生命如此漫长又短暂，我们一直在得到和失去，汲取和忘却，不要说别人，我们自己也不一定来得及了解自己。</p>

<p>很多人以为对抗孤独，需要绝对的爱，比如男女之间那种想要燃尽各自的肉体和精神的完全排他性的爱，或者父母孩子之间那种完全忘我不计付出的爱。</p>

<p>但无论村上还是马尔克斯讲诉的故事，都告诉你即便是这些绝对的爱，也难以与岁月相抗衡。人们对此心知肚明，可是往往还是憧憬着绝对的爱，对自己所拥有的“有瑕疵的爱”感到不满足。</p>

<p>于是马尔克斯更进一步，他告诉你那份孤独恰恰是爱的最意味深长的赠品。你接受了这份赠品，就能学会理解别的孤独的灵魂和深藏于它们之中的深邃的爱。读懂他你会明白，是否一起生活一起死去并不重要，能够在他/她到来的时候好好去爱，其充实感是任何体验都无法比拟的。从某种意义上说，那么强烈的感情正是人的一生中最美好的东西。</p>

<p>所以，并没有像电池一样的东西在持续供给着让你对抗孤独。那些某个瞬间点燃的火花，就足够照亮我们漫长的日常生活。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Openssl Heartbleed Bug]]></title>
    <link href="http://lenciel.cn/2014/04/openssl-heartbleed-bug/"/>
    <updated>2014-04-10T11:29:15+08:00</updated>
    <id>http://lenciel.cn/2014/04/openssl-heartbleed-bug</id>
    <content type="html"><![CDATA[<p>连某宝都中招的<a href="http://heartbleed.com/">Heartbleed bug</a>究竟是个什么东西？简单地说就是攻击者可以读最多64KB内存的内容。</p>

<p>读了这64KB能干嘛？用报这个bug的人的话来说：</p>

<p><blockquote><p>Without using any privileged information or credentials we were able steal from ourselves the secret keys used for our X.509 certificates, user names and passwords, instant messages, emails and business critical documents and communication.</p></blockquote></p>

<p>那么读取64KB内存和获取这么多关键信息究竟有什么关系呢？</p>

<h2 id="the-bug">The bug</h2>
<p>先来看看<a href="http://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=96db9023b881d7cd9f379b0c154650d6c108e9a3">patch</a>里面的<code>ssl/d1_both.c</code>:</p>

<p><code>c
int            
dtls1_process_heartbeat(SSL *s)
    {          
    unsigned char *p = &amp;s-&gt;s3-&gt;rrec.data[0], *pl;
    unsigned short hbtype;
    unsigned int payload;
    unsigned int padding = 16; /* Use minimum padding */
</code></p>

<p>可以看到，heartbeat里有一个 <a href="http://en.wikipedia.org/wiki/Transport_Layer_Security">SSLv3</a>  record的指针，这个<code>record</code>的代码如下:</p>

<p><code>c
typedef struct ssl3_record_st
    {
        int type;               /* type of record */
        unsigned int length;    /* How many bytes available */
        unsigned int off;       /* read/write offset into 'buf' */
        unsigned char *data;    /* pointer to the record data */
        unsigned char *input;   /* where the decode bytes are */
        unsigned char *comp;    /* only used with decompression - malloc()ed */
        unsigned long epoch;    /* epoch number, needed by DTLS1 */
        unsigned char seq_num[8]; /* sequence number, needed by DTLS1 */
    } SSL3_RECORD;
</code>
可以看到，每个<code>record</code>有它的<code>type</code>、<code>length</code>和<code>data</code>，规规矩矩。</p>

<p>回到<code>dtls1_process_heartbeat</code>：</p>

<p><code>c
/* Read type and payload length first */
hbtype = *p++;
n2s(p, payload);
pl = p;
</code></p>

<p>可以看到<code>SSLv3 record</code>的第一个byte就是放这个<code>heartbeat</code>的<code>type</code>。 宏<code>n2s</code> 则是从<code>p</code>里面取两个byte放到payload里面，被用来作为payload的长度。 <strong>注意这里并没有检查<code>SSLv3 record</code> 实际的长度。</strong> </p>

<p>接下来在这个函数里面干了下面这些事情：</p>

<p>``` c
unsigned char *buffer, *bp;
int r;</p>

<p>/* Allocate memory for the response, size is 1 byte
 * message type, plus 2 bytes payload length, plus
 * payload, plus padding
 */
buffer = OPENSSL_malloc(1 + 2 + payload + padding);
bp = buffer;
```</p>

<p>可以看到，用户要多少程序就分配多少，最多可以分配到<code>65535+1+2+16</code>，指针bp被用来操作这块内存。然后：</p>

<p><code>c
/* Enter response type, length and copy payload */
*bp++ = TLS1_HB_RESPONSE;
s2n(payload, bp);
memcpy(bp, pl, payload);
</code></p>

<p>宏<code> s2n</code>把<code>n2s</code>做的操作恢复出来：先拿16个bit的值放到2个byte里面，也就是原来请求的payload的长度。然后把<code>pl</code>里面放的payload(请求者提交的data)拷贝到新分配的<code>bp</code>里面。</p>

<p>看起来是很平常的操作，只不过没有认真的检查用户输入而已，但问题也就在这里了。</p>

<h2 id="where-is-the-bug">Where is the bug</h2>

<p>如果用户并没有正在提交声称的那么多个bytes的payload，那么memcpy就会读到同一个process里面SSLv3 record附近的内存内容。</p>

<p>这附近有哪些内容呢？</p>

<p>首先要明白在linux上，内存的动态分配主要是通过<a href="http://linux.die.net/man/2/sbrk">sbrk</a> 或者是 <a href="http://man7.org/linux/man-pages/man2/mmap.2.html">mmap</a>。如果内存是通过sbrk分配的，它会使用<code>heap-grows-up</code>规则，泄露出来的东西不会那么多（但是如果是同时并发请求<a href="http://blog.existentialize.com/diagnosis-of-the-openssl-heartbleed-bug.html#fn:update">还是有东西会漏</a>）。</p>

<p>在这里，<code>pl</code>因为malloc里面的mmap_threshhold多半是sbrk分配的，但是，那些关键的用户数据，则多半是通过mmap分配内存。于是这些数据就会被攻击者用<code>pl</code>拿到。如果再考虑并发请求，就…</p>

<h2 id="the-fix">The fix</h2>

<p>所以，整个patch里面最主要的fix就是：
* 检查是否有长度为0的虚假heartbeat
* 检查record的真实长度</p>

<p>代码如下：</p>

<p><code>c    
    /* Read type and payload length first */
    if (1 + 2 + 16 &gt; s-&gt;s3-&gt;rrec.length)
        return 0; /* silently discard */
    hbtype = *p++;
    n2s(p, payload);
    if (1 + 2 + payload + 16 &gt; s-&gt;s3-&gt;rrec.length)
        return 0; /* silently discard per RFC 6520 sec. 4 */
    pl = p;
</code>    </p>

<h2 id="so">So?</h2>

<p>这个bug大概算是影响这么剧烈的bug里面最好明白的一个，所以居然我也看明白了。感受：</p>

<ul>
  <li>为了可扩展性引入了复杂度，经常都会带来恶梦</li>
  <li>用户的输入，无论如何都不能相信，一定要check</li>
  <li>C语言的确是大牛小牛都会踩到坑啊</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Is Wine Bullshit]]></title>
    <link href="http://lenciel.cn/2013/07/is-wine-bullshit/"/>
    <updated>2013-07-01T15:05:00+08:00</updated>
    <id>http://lenciel.cn/2013/07/is-wine-bullshit</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/wine.jpeg" alt="Raw git log output" title="Don't touch me..." /></p>

<p>一瓶Lafite Rothschild Bordeaux最少要几千块，一瓶Charles Shaw或者Franzia卖十几块。我们经常可以看到那些红酒的广告宣扬着高档红酒的品质和口感是多么美妙。但其实很多人不知道，按照”酒类经济学家”的说法，葡萄酒的价格和口感之间的关系可能不是那么紧密。他们中不少人甚至声称，葡萄酒的价格根本就是乱来的，而那些号称能被品出来的万千滋味不过是付钱过后脑袋里面的自我安慰。</p>

<p>比如，一份2008年发表在《The Journal of Wine Economics》上的<a href="http://www.wine-economics.org/aawe/wp-content/uploads/2012/10/Vol.3-No.1-2008-Evidence-from-a-Large-Sample-of-Blind-Tastings.pdf">文章</a>说，当消费者不知道自己的酒的价格时，他们对实际上更便宜的酒的口感评价甚至稍稍好过那些更贵的酒。而且不光是一般消费者，即使是那些专家也不会对更贵的酒评价更高：</p>

<p><blockquote><p>“In sum, we ﬁnd a non-negative relationship between price and overall rating for experts. Due to the poor statistical signiﬁcance of the price coefﬁcient for experts, it remains an open question whether this coefﬁcient is in fact positive.”</p></blockquote></p>

<p>在<a href="http://www.newyorker.com/online/blogs/frontal-cortex/2012/06/wine-taste.html">另一项实验</a>中，被试者喝过red wine和white wine之后，对两种酒的评价就分别是一些典型的red wine和white wine的评价。而实际上用于测试的酒都是white wine，所谓的red wine只是加了一些对口感没有影响的食用色素。</p>

<p>另一类的研究着眼于品酒师Robert M. Parker Jr.发明的风靡全球的100制评分标准的准确度。退休的统计学家Robert Hodgson也是一位业余的酿酒爱好者。他发现同样的酒多次让品酒师打分，分数非常不稳定：</p>

<p><blockquote><p>“The judges’ wine ratings typically varied by ±4 points on a standard ratings scale running from 80 to 100. A wine rated 91 on one tasting would often be rated an 87 or 95 on the next. Some of the judges did much worse, and only about one in 10 regularly rated the same wine within a range of ±2 points.”</p></blockquote></p>

<p>随着类似的研究结果不断被刷新，越来越多的主流媒体开始质疑酒究竟是如何定价的。</p>

<p>酿酒工业的巨头们也出来承认：酒定价的主要影响因素不是宣传中的那些有关酒的口感等品质相关的要点，而是产量、品牌、大量中间环节的成本以及人们对浪漫或华贵生活的期许。但酒商们仍然坚持，即便是这些因素造成了有的酒很昂贵，但是卖得贵的酒通常也确实是口感上佳的酒。问题是和批评者相比，他们拿不出任何有效的数据说明这点。</p>

<p>于是有些媒体就出现了“<a href="http://io9.com/wine-tasting-is-bullshit-heres-why-496098276">品红酒就是扯淡</a>”这样的文章。</p>

<p>但这么说公平吗？</p>

<h1 id="section">口感其实并不是仅仅来自味蕾</h1>

<p>要明白这是为什么你首先要知道味蕾只是舌头上让你感知食物的酸甜苦辣的部分，这些是味觉但不是口感。口感的形成是视觉、嗅觉、味觉等五官都有参与的。</p>

<p>要试验这点儿你可以试试捏着鼻子吃饭，或者你想想为什么自己上次感冒的时候吃东西不香。和味蕾一样，人的感觉器官特别是嗅觉和视觉会在你对酒的口感做出评价时起到非常巨大的作用，这点对于其他食物和饮料也一样适用。</p>

<p>以颜色为例，类似前面说的在white wine里面加色素可以让品酒师都犯错认为它是red wine一样，New York Times报道过：</p>

<p><blockquote><p>When tasteless yellow coloring is added to vanilla pudding, consumers say it tastes like banana or lemon pudding. And when mango or lemon flavoring is added to white pudding, most consumers say that it tastes like vanilla pudding. Color creates a psychological expectation for a certain flavor that is often impossible to dislodge, [food chemist] Dr. Shelke said.</p></blockquote></p>

<p>味蕾之外的其他感觉影响口感的例子还有很多。比如环境，<a href="http://www.amsciepub.com/doi/abs/10.2466/01.PR0.111.4.228-232">研究表明</a>人们在柔光的环境下就餐觉得更舒服。比如预期，我们过往的<a href="http://www.huffingtonpost.com/Menuism/does-the-way-we-see-food-affect-taste_b_1872204.html">经验</a>，食物的<a href="http://www.jstor.org/discover/10.2307/3152198?uid=3739560&amp;uid=2&amp;uid=4&amp;uid=3739256&amp;sid=21102447342477">品牌</a>，<a href="http://www.griffithhack.com.au/mediacentre-Canafoodsbrandaffectyourperceptionsoftaste">包装</a>和<a href="http://www.psychologytoday.com/blog/evolved-primate/201002/does-price-tag-have-taste">价格</a>都会影响我们对它的口感。</p>

<h1 id="section-1">并非所有的酒都一样</h1>

<p>公认的最好的品酒师，被称为 <code>Master Sommeliers</code> ，在全世界只有不到200名。这些人要获得 <code>Master Sommeliers</code> 的称号，必须蒙上眼睛鉴别出6种不同葡萄酒的葡萄品种、产地和年份。如果这些人不是酒行业养的神棍，而是真有这样的本领，那么是否意味着不同的酒确实口感是不一样的呢？</p>

<p>《今日心理学》上面<a href="http://www.psychologytoday.com/blog/sensory-superpowers/200908/you-drink-what-you-think">有篇文章</a>对此做了解答，认为专业品酒师主要靠的是良好的分析能力和大量的练习积累的知识：</p>

<p><blockquote><p>Research shows that contrary to common thought, wine experts do not have more sensitive palates, per se. They don’t, for example, have lower thresholds for detecting a wine’s tannin and alcohol content. Experts are also no better than novices at tasting whether two wines are the same or different. </p></p><p><p>What makes [Master Sommelier] Steven Poe an expert is how he brings his formal knowledge of wine production to what he tastes. For example, Poe would be familiar with the flavor outcomes of malolactic fermentation —a process of secondary wine fermentation. In a blind tasting, he might notice one of the flavors associated with the process—a buttery texture, for example—and then attend to the other likely flavor results of malolactic fermentation including hints of yogurt and sauerkraut. This could help Poe narrow down a wine’s region and vintage.</p></blockquote></p>

<p>换句话说即使是Master Sommelier也有可能把染色的white wine搞成red wine，或者是在盲测的时候觉得一种便宜的酒比贵的酒还好喝。他们像福尔摩斯一样，是根据线索和知识解开口中的酒是什么样的酒的谜题，而不可能像广告里面一口入喉，就击掌高呼：“哇，这酒太好喝了，这一定是xxx年份的xxx。” </p>

<h1 id="so">So?</h1>

<p>人们知道十几块一瓶的红酒和几万块的味道没太大的区别后，反应是非常激烈的。特别是因为众所知周的原因，品红酒这种本来没啥大不了的活动在天朝更容易因为和“小资”甚至“奢侈”挂钩而备受非议。</p>

<p>而看完本文我们应该要明白，实际上我们的口感本来就是由各种各样因素影响的假象。不仅是品红酒，任何食物的口感都可以被人为因素改变：特别是食品添加剂和食品加工如此“发达”的天朝，如果你说昂贵的红酒是扯淡，那深究起来，有哪样吃的东西不扯淡呢？</p>

<p>因此，我觉得首先你应该鼓励自己和身边的人都试试没那么贵的酒，可能喝起来也相当不错。然后，如果别人花了大价钱买来一支，你也不要觉得这就是装逼：喝起来痛不痛快，本来就是别人自己的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Importance of Deploy As Will]]></title>
    <link href="http://lenciel.cn/2013/05/the-importance-of-deploy-as-will/"/>
    <updated>2013-05-29T22:41:00+08:00</updated>
    <id>http://lenciel.cn/2013/05/the-importance-of-deploy-as-will</id>
    <content type="html"><![CDATA[<p>最近公司里面两个比较资深的开发兄弟在我座位旁边进行了一场关于“代码优化到什么程度才算好”的争论。</p>

<p>他们一起工作的项目是一个比较小的python模块（几百行的规模吧），用来在嵌入式设备对接入的手机进行一些操作。其中一个人希望把这部分代码重构到“如果需求有这样那样的改变能够承受。并且即便不是我们两个来继续这个模块，任何一个人拿到都能很容易的扩展和维护”；而另一个人则认为“这个模块的规模很小不需要那么大精力做重构，并且在需求出现的时候再开始在现有代码基础上重构比先设想可能的需求来重构有意义”。</p>

<p>他们争的时候都有眼神投射到小弟这边，但是我没有加入：因为其实两个人的说法都还挺有道理的，他们的分歧我感觉是因为背景不同：一个是在我大M出道的（慢工出细活的平台中间件公司），一个是在互联网公司出道的。</p>

<h2 id="dev">追求品质是成为优秀dev的不二法门</h2>

<p>首先，作为一个dev，最优秀的品质大概就是一直想要优化自己的产出(扎克伯格的致员工信里面特别强调了这个很多次）。程序员的产出可以优化的东西是很多的：大到设计、算法、接口、自动化测试和部署，小到变量名、函数名、注释等等。自觉地重构和优化可以给你在技能和思考方式上带来很大的提升。而在自己入行的早期有幸遇到一个严格要求品质的mentor逼着被动的追求重构和优化，并且挺过来（挺过来很重要，要有学习能力并且有胸怀），更是能在工作方式和思考方式上得到很多非常正面的影响。我大M在我呆过的公司里面，这方面绝对是做得最好的。</p>

<h2 id="deploy">什么时候够好要看你的deploy成本</h2>

<p>但是，就这个项目而言，我个人是比较同意后面这位弟兄的看法的。软件项目可以做的重构和优化几乎是没有止境的，如何来衡量什么时候就“够好了”，业界其实有很多标准。但是我自己最喜欢的是Martin Fowler在一个演讲的时候提到的例子。他说：</p>

<blockquote>
  <p>假设你被要求设计一个电脑控制的手枪，要求在50米内自动瞄准并击中目标。需求只有这么一个。一种做法是设计一个复杂的系统，采集并计算各种可能的变量(风速、海拔、温度等等)，以这些变量为基础瞄准并最后击发。还有一种是设计一个简单的系统，可以快速的击发，并且能够统计每一击距离目标多远。然后它根据收集回来的距离数据校正并迅速击中目标。</p>
</blockquote>

<p>你可能会因为上下文觉得第二种方式当然是最好的，但其实上面两种方式是没有绝对的最优的：决定性的因素在于子弹的价钱。如果一个测量风速的模块都贵得可以买一车的子弹了，那么谁更好是显而易见的。</p>

<p>对于软件项目而言，Martin Fowler的例子中的目标就是你的用户，子弹的价钱就是你软件的deploy成本(当然，不要忘记了健全的用户反馈机制也很重要)。如果我们在造一个高可靠性的系统，比如发射火箭，显然是没法承受射出去一颗不行再来一颗的；如果我们在做一个小模块或者是小项目，那么一开始就很完美地设计并不断重构它，可能性价比确实不高。</p>

<p>对于Web开发者，理解Martin Fowler的例子显得特别重要。一般来说网站上线的初期(一年左右)，是属于deploy成本比较低的时候。这时候在线的用户一般是抱着试玩的心态，对新功能的渴望远远超过对稳定性的要求，并且能够给出很多反馈意见。这个阶段迅速的deploy新功能，迅速的处理反馈并设计下一个新功能非常重要，而有一定时间的宕机或者回退用户并不那么在乎。所以那位互联网公司出道的兄弟有他那样的想法，也就不足为奇了。</p>

<p>到了用户量上去，或者重要的用户进场之后，deploy的成本就变得很高了。这个时候如果没有一整套严格的测试和运维流程，可能系统就玩不转。</p>

<h2 id="section">结论</h2>

<p>对于我司而言，目前和很长一段时间内的大多数产品都处于子弹不那么贵的阶段。个人感觉目前我们的CI和收集处理反馈这两方面是需要加强的，只有做到了”deploy as will”，我们才有底气来以做互联网的方式来开发我们自己的产品。</p>

<p>而从长期来看，全面的提高项目品质，不仅需要dev自己有重构的自觉性，还需要我们有健全的融入到CI的测试以及成熟的运维团队。</p>
]]></content>
  </entry>
  
</feed>
