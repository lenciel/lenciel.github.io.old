<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rants | @Lenciel]]></title>
  <link href="http://lenciel.cn/blog/categories/rants/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2014-01-05T02:08:00+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Is Wine Bullshit]]></title>
    <link href="http://lenciel.cn/2013/07/is-wine-bullshit/"/>
    <updated>2013-07-01T15:05:00+08:00</updated>
    <id>http://lenciel.cn/2013/07/is-wine-bullshit</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/wine.jpeg" alt="Raw git log output" title="Don't touch me..." /></p>

<p>一瓶Lafite Rothschild Bordeaux最少要几千块，一瓶Charles Shaw或者Franzia卖十几块。我们经常可以看到那些红酒的广告宣扬着高档红酒的品质和口感是多么美妙。但其实很多人不知道，按照”酒类经济学家”的说法，葡萄酒的价格和口感之间的关系可能不是那么紧密。他们中不少人甚至声称，葡萄酒的价格根本就是乱来的，而那些号称能被品出来的万千滋味不过是付钱过后脑袋里面的自我安慰。</p>

<p>比如，一份2008年发表在《The Journal of Wine Economics》上的<a href="http://www.wine-economics.org/aawe/wp-content/uploads/2012/10/Vol.3-No.1-2008-Evidence-from-a-Large-Sample-of-Blind-Tastings.pdf">文章</a>说，当消费者不知道自己的酒的价格时，他们对实际上更便宜的酒的口感评价甚至稍稍好过那些更贵的酒。而且不光是一般消费者，即使是那些专家也不会对更贵的酒评价更高：</p>

<p><blockquote><p>“In sum, we ﬁnd a non-negative relationship between price and overall rating for experts. Due to the poor statistical signiﬁcance of the price coefﬁcient for experts, it remains an open question whether this coefﬁcient is in fact positive.”</p></blockquote></p>

<p>在<a href="http://www.newyorker.com/online/blogs/frontal-cortex/2012/06/wine-taste.html">另一项实验</a>中，被试者喝过red wine和white wine之后，对两种酒的评价就分别是一些典型的red wine和white wine的评价。而实际上用于测试的酒都是white wine，所谓的red wine只是加了一些对口感没有影响的食用色素。</p>

<p>另一类的研究着眼于品酒师Robert M. Parker Jr.发明的风靡全球的100制评分标准的准确度。退休的统计学家Robert Hodgson也是一位业余的酿酒爱好者。他发现同样的酒多次让品酒师打分，分数非常不稳定：</p>

<p><blockquote><p>“The judges’ wine ratings typically varied by ±4 points on a standard ratings scale running from 80 to 100. A wine rated 91 on one tasting would often be rated an 87 or 95 on the next. Some of the judges did much worse, and only about one in 10 regularly rated the same wine within a range of ±2 points.”</p></blockquote></p>

<p>随着类似的研究结果不断被刷新，越来越多的主流媒体开始质疑酒究竟是如何定价的。</p>

<p>酿酒工业的巨头们也出来承认：酒定价的主要影响因素不是宣传中的那些有关酒的口感等品质相关的要点，而是产量、品牌、大量中间环节的成本以及人们对浪漫或华贵生活的期许。但酒商们仍然坚持，即便是这些因素造成了有的酒很昂贵，但是卖得贵的酒通常也确实是口感上佳的酒。问题是和批评者相比，他们拿不出任何有效的数据说明这点。</p>

<p>于是有些媒体就出现了“<a href="http://io9.com/wine-tasting-is-bullshit-heres-why-496098276">品红酒就是扯淡</a>”这样的文章。</p>

<p>但这么说公平吗？</p>

<h1 id="section">口感其实并不是仅仅来自味蕾</h1>

<p>要明白这是为什么你首先要知道味蕾只是舌头上让你感知食物的酸甜苦辣的部分，这些是味觉但不是口感。口感的形成是视觉、嗅觉、味觉等五官都有参与的。</p>

<p>要试验这点儿你可以试试捏着鼻子吃饭，或者你想想为什么自己上次感冒的时候吃东西不香。和味蕾一样，人的感觉器官特别是嗅觉和视觉会在你对酒的口感做出评价时起到非常巨大的作用，这点对于其他食物和饮料也一样适用。</p>

<p>以颜色为例，类似前面说的在white wine里面加色素可以让品酒师都犯错认为它是red wine一样，New York Times报道过：</p>

<p><blockquote><p>When tasteless yellow coloring is added to vanilla pudding, consumers say it tastes like banana or lemon pudding. And when mango or lemon flavoring is added to white pudding, most consumers say that it tastes like vanilla pudding. Color creates a psychological expectation for a certain flavor that is often impossible to dislodge, [food chemist] Dr. Shelke said.</p></blockquote></p>

<p>味蕾之外的其他感觉影响口感的例子还有很多。比如环境，<a href="http://www.amsciepub.com/doi/abs/10.2466/01.PR0.111.4.228-232">研究表明</a>人们在柔光的环境下就餐觉得更舒服。比如预期，我们过往的<a href="http://www.huffingtonpost.com/Menuism/does-the-way-we-see-food-affect-taste_b_1872204.html">经验</a>，食物的<a href="http://www.jstor.org/discover/10.2307/3152198?uid=3739560&amp;uid=2&amp;uid=4&amp;uid=3739256&amp;sid=21102447342477">品牌</a>，<a href="http://www.griffithhack.com.au/mediacentre-Canafoodsbrandaffectyourperceptionsoftaste">包装</a>和<a href="http://www.psychologytoday.com/blog/evolved-primate/201002/does-price-tag-have-taste">价格</a>都会影响我们对它的口感。</p>

<h1 id="section-1">并非所有的酒都一样</h1>

<p>公认的最好的品酒师，被称为 <code>Master Sommeliers</code> ，在全世界只有不到200名。这些人要获得 <code>Master Sommeliers</code> 的称号，必须蒙上眼睛鉴别出6种不同葡萄酒的葡萄品种、产地和年份。如果这些人不是酒行业养的神棍，而是真有这样的本领，那么是否意味着不同的酒确实口感是不一样的呢？</p>

<p>《今日心理学》上面<a href="http://www.psychologytoday.com/blog/sensory-superpowers/200908/you-drink-what-you-think">有篇文章</a>对此做了解答，认为专业品酒师主要靠的是良好的分析能力和大量的练习积累的知识：</p>

<p><blockquote><p>Research shows that contrary to common thought, wine experts do not have more sensitive palates, per se. They don’t, for example, have lower thresholds for detecting a wine’s tannin and alcohol content. Experts are also no better than novices at tasting whether two wines are the same or different. </p></p><p><p>What makes [Master Sommelier] Steven Poe an expert is how he brings his formal knowledge of wine production to what he tastes. For example, Poe would be familiar with the flavor outcomes of malolactic fermentation —a process of secondary wine fermentation. In a blind tasting, he might notice one of the flavors associated with the process—a buttery texture, for example—and then attend to the other likely flavor results of malolactic fermentation including hints of yogurt and sauerkraut. This could help Poe narrow down a wine’s region and vintage.</p></blockquote></p>

<p>换句话说即使是Master Sommelier也有可能把染色的white wine搞成red wine，或者是在盲测的时候觉得一种便宜的酒比贵的酒还好喝。他们像福尔摩斯一样，是根据线索和知识解开口中的酒是什么样的酒的谜题，而不可能像广告里面一口入喉，就击掌高呼：“哇，这酒太好喝了，这一定是xxx年份的xxx。” </p>

<h1 id="so">So?</h1>

<p>人们知道十几块一瓶的红酒和几万块的味道没太大的区别后，反应是非常激烈的。特别是因为众所知周的原因，品红酒这种本来没啥大不了的活动在天朝更容易因为和“小资”甚至“奢侈”挂钩而备受非议。</p>

<p>而看完本文我们应该要明白，实际上我们的口感本来就是由各种各样因素影响的假象。不仅是品红酒，任何食物的口感都可以被人为因素改变：特别是食品添加剂和食品加工如此“发达”的天朝，如果你说昂贵的红酒是扯淡，那深究起来，有哪样吃的东西不扯淡呢？</p>

<p>因此，我觉得首先你应该鼓励自己和身边的人都试试没那么贵的酒，可能喝起来也相当不错。然后，如果别人花了大价钱买来一支，你也不要觉得这就是装逼：喝起来痛不痛快，本来就是别人自己的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Importance of Deploy As Will]]></title>
    <link href="http://lenciel.cn/2013/05/the-importance-of-deploy-as-will/"/>
    <updated>2013-05-29T22:41:00+08:00</updated>
    <id>http://lenciel.cn/2013/05/the-importance-of-deploy-as-will</id>
    <content type="html"><![CDATA[<p>最近公司里面两个比较资深的开发兄弟在我座位旁边进行了一场关于“代码优化到什么程度才算好”的争论。</p>

<p>他们一起工作的项目是一个比较小的python模块（几百行的规模吧），用来在嵌入式设备对接入的手机进行一些操作。其中一个人希望把这部分代码重构到“如果需求有这样那样的改变能够承受。并且即便不是我们两个来继续这个模块，任何一个人拿到都能很容易的扩展和维护”；而另一个人则认为“这个模块的规模很小不需要那么大精力做重构，并且在需求出现的时候再开始在现有代码基础上重构比先设想可能的需求来重构有意义”。</p>

<p>他们争的时候都有眼神投射到小弟这边，但是我没有加入：因为其实两个人的说法都还挺有道理的，他们的分歧我感觉是因为背景不同：一个是在我大M出道的，一个是在互联网公司出道的。</p>

<h2 id="dev">追求品质是成为优秀dev的不二法门</h2>

<p>首先，做为一个dev，最优秀的品质大概就是一直想要优化自己的产出(扎克伯格的致员工信里面特别强调了这个很多次）。程序员的产出可以优化的东西是很多的：大到设计、算法、接口、自动化测试和部署，小到变量名、函数名、注释等等。自觉地重构和优化可以给你在技能和思考方式上带来很大的提升。而在自己入行的早期有幸遇到一个严格要求品质的mentor逼着被动的追求重构和优化，并且挺过来（挺过来很重要，要有学习能力并且有胸怀），更是能在工作方式和思考方式上得到很多非常正面的影响。我大M在我呆过的公司里面，这方面绝对是做得最好的。</p>

<h2 id="deploy">什么时候够好要看你的deploy成本</h2>

<p>但是，就这个项目而言，我个人是比较同意后面这位弟兄的看法的。软件项目可以做的重构和优化几乎是没有止境的，如何来衡量什么时候就“够好了”，业界其实有很多标准。但是我自己最喜欢的是Martin Fowler在一个演讲的时候提到的例子。他说：</p>

<blockquote>
  <p>假设你被要求设计一个电脑控制的手枪，要求在50米内自动瞄准并击中目标。需求只有这么一个。一种做法是设计一个复杂的系统，采集并计算各种可能的变量(风速、海拔、温度等等)，以这些变量为基础瞄准并最后击发。还有一种是设计一个简单的系统，可以快速的击发，并且能够统计每一击距离目标多远。然后它根据收集回来的距离数据校正并迅速击中目标。</p>
</blockquote>

<p>你可能会因为上下文觉得第二种方式当然是最好的，但其实上面两种方式是没有绝对的最优的：决定性的因素在于子弹的价钱。如果一个测量风速的模块都贵得可以买一车的子弹了，那么谁更好是显而易见的。</p>

<p>对于软件项目而言，Martin Fowler的例子中的目标就是你的用户，子弹的价钱就是你软件的deploy成本(当然，不要忘记了健全的用户反馈机制也很重要)。如果我们在造一个高可靠性的系统，比如发射火箭，显然是没法承受射出去一颗不行再来一颗的；如果我们在做一个小模块或者是小项目，那么一开始就很完美地设计并不断重构它，可能性价比确实不高。</p>

<p>对于Web开发者，理解Martin Fowler的例子显得特别重要。一般来说网站上线的初期(一年左右)，是属于deploy成本比较低的时候。这时候在线的用户一般是抱着试玩的心态，对新功能的渴望远远超过对稳定性的要求，并且能够给出很多反馈意见。这个阶段迅速的deploy新功能，迅速的处理反馈并设计下一个新功能非常重要，而有一定时间的宕机或者回退用户并不那么在乎。所以那位互联网公司出道的兄弟有他那样的想法，也就不足为奇了。</p>

<p>到了用户量上去，或者重要的用户进场之后，deploy的成本就变得很高了。这个时候如果没有一整套严格的测试和运维流程，可能系统就玩不转。</p>

<h2 id="section">结论</h2>

<p>对于我司而言，目前和很长一段时间内的大多数产品都处于子弹不那么贵的阶段。个人感觉目前我们的CI和收集处理反馈这两方面是需要加强的，只有做到了”deploy as will”，我们才有底气来以做互联网的方式来开发我们自己的产品。</p>

<p>而从长期来看，全面的提高项目品质，不仅需要dev自己有重构的自觉性，还需要我们有健全的融入到CI的测试以及成熟的运维团队。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The myth of productivity]]></title>
    <link href="http://lenciel.cn/2013/05/the-myth-of-productivity/"/>
    <updated>2013-05-02T01:11:00+08:00</updated>
    <id>http://lenciel.cn/2013/05/the-myth-of-productivity</id>
    <content type="html"><![CDATA[<p>在从公司辞职出来的之前，我们对创业的期望是不降低大家的生活质量。我们对自己这么说，对我们拉入伙的兄弟们也这么说。这里的生活质量当然除开收入之外，很大的一方面就是不加班。</p>

<p>但是实际上的情况是：五一之前整个公司度过了一个非常特别的时期：产品团队不停地根据用户的输入，修改产品需求；服务器端和客户端两个开发组都疯狂加班，彻夜不眠；测试每天没有东西可以测试。</p>

<p>假期我回忆了一下自己参与过的所有的软件项目，大到IBM的存储或者Ericsson的基站，小到自己做着玩的一些prototype，有跨时区的几个团队合作的，也有每天都可以互相抛媚眼的死党一起撸的，它们有一个共同的特点：居然没有一个是能够按照预估的时间交付的。</p>

<p>假期我和一个老一辈无产阶级革命家聊起了这个问题：每次一个项目出现这样那样的情况，不能按时交付，我们都反思、开会、总结，希望下一个项目能吸取所有的经验，不再犯同样的错误。为什么最后的结果还是一样？</p>

<p>他推荐了Daniel Kahneman的<a href="http://vdisk.weibo.com/s/8nUJx">Thinking, Fast and Slow</a>。这是一本心理学著作，探讨了人类认知的很多方面，其中有不少观点挺值得软件开发从业人员思考的，特别是想不明白为什么我们做的estimation永远不准的软件从业人员。</p>

<h2 id="section">原因一：开发软件面向的问题域在你深入之前是不完全可知的</h2>

<p>可以通过编写软件完美解决一个问题的前提是，我们对问题域了解得“足够深入”，以至于我们可以细致而精确地告诉计算机“如何”解决一个问题。</p>

<p>但是矛盾的地方在于，一般我们了解到这个程度的问题，都已经有现成的软件或者是库了。需要我们进行开发的总是来自一些新需求：引入不确定性的那些新需求。</p>

<p>新需求引入的不确定性是多方面的：第三方接口提供者不能按时提供可靠的接口，所以你要自己做适配；选定的数据库服务器之间不能互联互通需要VPS提供商开通3306端口互访。当然，不那么具体但是绝对会遇到的不确定性一般来自客户：产品release了，但是他们发现自己需要的并不他们最开始描述的这个东西，他们要这里那里做一些“小改动”…</p>

<p>这其实也是历史上钻出来那么多specification文档的原因：有一些管理层希望能通过在文档阶段对需求足够细化来避免不确定性对项目的影响。但结果大家都知道了，细化的文档被整个软件行业唾弃的原因是越来越多的证据说明，如果你掌握的细节足够多，你就该直接去写软件。如果你掌握的细节不够多，那么写文档也没足够细的可能。</p>

<p>有趣的地方在于，无论做工程师的时候大家对估开发时间多么的不屑，一旦到了管理层，你工作的核心就是估开发时间。而且有不少前一个月还在为没有按时delivery睡不着的苦逼工程师，一升到管理层就无比相信自己估的开发时间了。无论项目的实际情况如何，他们都会push整个团队苦干蛮干，这就是另外一个问题了。</p>

<h2 id="section-1">原因二：过度自信和效率神话</h2>

<p>这次雅安地震那位预测四川多少多少年不会有大地震的专家又成了笑柄。这当然不是专家第一次或者最后一次因为错误的预测成为笑柄。Kahneman在书里面专门花了一些篇幅写“专家”的预测为什么在大多数情况下是毫无用处的，最核心的三点在于：</p>

<ul>
  <li>事实证明专家的预测常常会出错</li>
  <li>但作出预测的专家会对自己有绝对的自信</li>
  <li>即便后来发现自己的预测是错误的，专家对自己的自信不会减少</li>
</ul>

<p>最后这一点特别有趣。即便事实证明预测是错误的，即便明白只是人类认知中必然可能出现的问题，专家仍然会对自己的预测继续充满自信。原因何在？</p>

<h2 id="iii">系统I/系统II以及我们是如何做预估的</h2>

<p>在<a href="http://vdisk.weibo.com/s/8nUJx">Thinking, Fast and Slow</a>里面Kahneman的解释了人类其实有两套决策系统：系统II负责谨慎、理性、分析性的思考；系统I复杂快速、基于模式、基于直觉的思考。</p>

<p>重要的是，在进化的过程中，一个主要变化就是系统II慢慢少被使用了：耗时长的系统，仅仅在极其少的必须的情况下被唤醒。但是这里有个显而易见的矛盾是，如果没有经过思考，你怎么知道应该使用系统I还是系统II呢？</p>

<p>这就是做预估的时候总是估不准的根本原因。做预估的时候，因为你是要在没有仔细分析（甚至一般也没用仔细分析的输入）的情况下使用系统I来做出判断。所以你的预估“一个任务需要花多少时间”的时候，其实多半是在根据“这个任务你有多少自信”。</p>

<p>所以，一般来说我们报这个任务我需要3天的时候，其实是因为“这个东西看起来非常简单，而且我十分清楚如何做”。如果报这个任务我需要3个月，则是因为“这个东西看起来很难，我也不知道怎么做，但是我相信我能搞懂是怎么做”。</p>

<h2 id="section-2">避免凭直觉做预估就能得到准确预估吗?</h2>

<p>你看到这里肯定会觉得，为了避免这些虚幻的估计，我们应该通过各种手段使用系统II来通过仔细地分析得到准确的数据。</p>

<p>Bravo！恭喜你发明了“瀑布开发流程”。基本上来说”在开始编码之前我们先编写文档”就是为了让你切换到系统II。但是为什么使用瀑布的项目也会失败？</p>

<p>说白了，还是软件开发在初始阶段即使使用系统II也不能做出精确的判断：知道的太少，变化的太多。那么究竟该怎么办？</p>

<h2 id="section-3">什么样的预测是比较有效的？</h2>

<p>Kahneman和其他一些专家通过研究，得出了什么时候做预测是比较保险的：</p>

<blockquote>
  <p>“To know whether you can trust a particular intuitive judgment, there are two questions you should ask: Is the environment in which the judgment is made sufficiently regular to enable predictions from the available evidence? The answer is yes for diagnosticians, no for stock pickers. Do the professionals have an adequate opportunity to learn the cues and the regularities?”</p>
</blockquote>

<p>这里的”adequate opportunity”意味着大量的实践经验用于可控的周期内的稳定环境中，并且具备了反馈机制可以随时修正准确度。以此为根据，0-12个小时的task，如果这些task一被建立就能立刻得到执行，那么：</p>

<ul>
  <li>在这么短的时间内，虽然仍然有可能会出现变化，基本环境应该是稳定的</li>
  <li>你可以很快的得到结果并且知道自己估计的准确度</li>
</ul>

<p>在这种情况下，你是尽可能的先利用系统I开始工作，并且通过迅速得到的反馈来修正自己的结果，达到目标。</p>

<h2 id="section-4">打破效率神话</h2>

<p>创业团队出现过于乐观的估计除开过度自信之外，还有很重要的一个原因是因为相信效率神话。Evernote，AnyDo，OmniFocus等等GTD工具和各种关于同时做n件事情还每件都做好的江湖传说很容易把焦头烂额的创业团队坑进去。接受你不可能做出一个准确的预估然后向客户承诺的事实，转而思考如何在规定时间内最大化的输出对客户有用的价值时，关于效率需要牢记下面的事实：</p>

<ul>
  <li>一天只有24个小时，即使团队的沟通成本很低，仍然需要在使用你们选用的agile工具，开会，互相之间同步信息，迭代和对外汇报等等上花时间；</li>
  <li>人的生活还有各种不确定性，如生病、怀孕、过劳、休假、结婚、家长会、禽流感等等；</li>
  <li>你的系统会有一些非常难以找到root cause的bug需要花你估计的十倍以上的时间才能根除</li>
  <li>你的客户会给你各种乱七八糟的输入并且提出各种来时已晚的需求</li>
  <li><a href="https://medium.com/r/?url=http%3A%2F%2Fwww.inc.com%2Fjessica-stillman%2Fwhy-working-more-than-40-hours-a-week-is-useless.html">一周工作的超过40个小时之后的部分已经被认为是无效的</a></li>
  <li><a href="https://medium.com/r/?url=http%3A%2F%2Flifehacker.com%2F246988%2Fmultitasking-makes-you-less-productive-%2B-take-ten">工作被打断后需要15到20分钟才能恢复</a></li>
  <li><a href="https://medium.com/r/?url=http%3A%2F%2Fwww.kens5.com%2Fnews%2FStudy-Average-worker-spends-60-percent-of-time-cyberloafing-190195401.html">人们上班的时候花了非常多的时间干和工作无关的事情</a></li>
</ul>

<p>接受现实，摒弃对效率神话的膜拜，用心思考在有限的时间内如何最大化的输出对用户有价值的东西，比任何流程、方法论、工具都要重要。这一方面在团队内部倡导了一种科学并且诚实的做事方式，一方面会让你更能分清工作任务和资源的优先级。它最大的好处是让你专心地根据实际的优先级做出判断，把精力放到最关键的事情上去。</p>

<p>这，是对整个团队最重要的事情。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Gone of Google Reader]]></title>
    <link href="http://lenciel.cn/2013/03/the-gone-of-google-reader/"/>
    <updated>2013-03-15T21:25:00+08:00</updated>
    <id>http://lenciel.cn/2013/03/the-gone-of-google-reader</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/google_reader.png" alt="Google reader is gone" title="Don't touch me..." /></p>

<p>Google Reader关掉的消息出来做之后网上的反应其实是很耐人寻味的。</p>

<p>用户们的抱怨声是<a href="http://www.theverge.com/2013/3/14/4105432/google-reader-shuts-down">满坑满谷</a>：的确，它是很多人(包括本座在内)每天都用的工具。相比之下，所有RSS行业的人(如果这个行业还在的话)几乎都在叫好。</p>

<p>跟一个朋友聊起来的时候，他说这就像当年王菲说姐不唱了，歌迷们是一片哀号，而很多唱歌的姑娘却长舒了一口气一样。</p>

<p>不过其实这里面的原因并没有这么简单。一个RSS阅读器虽然算不上多么复杂的软件，但是服务器端做到Google Reader的稳定性和及时性就不容易了。由于Google Reader在这方面的质量一骑绝尘又有开放接口，使得很多其他的RSS阅读器都不再自己同步各个feed来源，而是直接使用Google Reader作为来源，在外面加壳。</p>

<p>这样发展的结果是，实际上市面上就只有一款RSS阅读器和若干皮肤而已。只要看看<a href="http://feedburner.google.com/">feedburner</a>好像出土文物一样的页面就知道这样的发展对这个行业来说是什么样灾难的后果了。</p>

<p>所以说Google Reader这种服务的倒掉，在短期内当然是巨大的损失。不过这样一来，似乎又唤醒了一个行业沉睡多年的创造力。看看<a href="http://inside.flipboard.com/2013/03/14/weve-got-your-rss-covered-save-your-google-reader-feeds-now/">Flipboard</a>、<a href="http://feedly.com/">Feedly</a>、<a href="http://feedafever.com/">Fever</a>、<a href="http://www.newsblur.com/">Newsblur</a>的反应你就会觉得，说不定会有比Google Reader更好的服务被孵化出来。</p>

<p>因为，我实在是不觉得那些乱七八糟的SNS能代替一个干干净净的阅读器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[走进科学]]></title>
    <link href="http://lenciel.cn/2013/02/science-is-not-that-easy/"/>
    <updated>2013-02-01T23:40:00+08:00</updated>
    <id>http://lenciel.cn/2013/02/science-is-not-that-easy</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/black_and_white.jpg" alt="Black and White" title="Don't touch me…" /></p>

<p>最近波音787曝出锂电池起火燃烧的<a href="http://finance.sina.com.cn/world/mzjj/20130130/140414451075.shtml">问题</a>。全世界人民，特别是中国人民纷纷摇头叹息：以精密和严谨著称的日本人，现在终归是堕落了。奇怪的是，如果你想稍微深入一点儿去搜索日本制造的锂电池究竟出了什么问题，答案就欠奉了。于是本座花了点儿时间试图去把这事情弄明白。</p>

<p>人类对锂电池最初的开发是在上世纪六十年代。由于在金属中，锂元素有着最小的密度和最大的电负性，故而具有最高的比能量。但由于锂的活性非常强，所以一直都有严重的安全问题没法投产。</p>

<p>80年代开始出现了所谓的“摇椅式锂电池”。其正极为不同类型的含锂化合物，负极则由石墨一类的物质形成层状结构，Li+可填充于其中。在充电时，阴极部分的锂离子离开含锂化合物，透过电解液中的隔膜向阳极移动，并嵌入到阳极的层状结构中；反之在放电时，锂离子在负极脱离，移向正极并结合于正极的化合物之中。与传统锂电池不同的是，被氧化还原的物质不再是Li和Li+，锂离子只是伴随着两极材料本身发生放电而产生的氧化态的变化而反复脱嵌与嵌入，往返于两极之间，故称为“摇椅式”。</p>

<p>这种锂电池要求选用的电解液必须不和锂盐发生反应，并且在相当宽的温度范围内保持液态，所以合适的选择非常少。一开始，普遍使用的是碳酸丙烯酯。不过这种溶剂有很大的缺陷：它会渗透石墨烯，使得电池效率低下，安全性也随之降低。</p>

<p>到了90年代初，Sony的研究人员发现使用碳酸乙烯酯，问题解决了：反应中生成的粘稠的物质正好可以阻碍溶剂本身的分子渗透到石墨烯，同时又不会阻碍锂电子穿透进入石墨烯。于是锂电池正式投入大规模商用。</p>

<p>不过，虽然好死不死的商用了20来年，至今都没人搞明白那粘稠的物质究竟是啥，而从碳酸丙烯酯到碳酸乙烯酯这微小的结构变化为何带来这么巨大的差异。很多论文发表了，很多理论被提出了，有志于此的公司投入了大量人力财力，但似乎，用句四川话来说，“还没有摸到火门”。</p>

<p>本座常常听人说我们处在一个知识大爆炸的年代。但实际上，我们仅仅是处在一个获取知识很容易的时代而已（感谢Google和其他开放的Web service）。在书店里面就可以买到华丽的《时间简史》，打开电脑可以看BBT这种动不动就要来段术语或者方程式的剧，让我们感觉好像过得很”科学“，有时候就会有一种自己很聪明的幻觉。</p>

<p>于是可能我们看到787的新闻时也就会觉得，这帮日本人啊，电池都造不好。写下这篇blog，希望自己记住今天的这份感觉：全世界用来发这条新闻，看这条新闻，尽情评论的人，其实也不知道自己用的笔记本里面锂电池是怎么工作的。这不是什么弦理论，不是地球形成之初的疑问，不需要什么超强的抽象思维能力和高智商。每个人都可以打开电池开始研究，但就是没人知道。</p>

<p>因为科学其实是很枯燥又很寂寞的事情啊。</p>

]]></content>
  </entry>
  
</feed>
