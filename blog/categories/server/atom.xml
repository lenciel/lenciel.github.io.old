<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: server | @Lenciel]]></title>
  <link href="http://lenciel.github.io/blog/categories/server/atom.xml" rel="self"/>
  <link href="http://lenciel.github.io/"/>
  <updated>2013-11-17T22:41:10+08:00</updated>
  <id>http://lenciel.github.io/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[uWSGI, Gunincorn, 啥玩意儿?]]></title>
    <link href="http://lenciel.github.io/2013/08/why-you-need-something-like-gunicorn/"/>
    <updated>2013-08-01T14:36:00+08:00</updated>
    <id>http://lenciel.github.io/2013/08/why-you-need-something-like-gunicorn</id>
    <content type="html"><![CDATA[<p>因为nginx等优秀的开源项目，有不少本来不是做服务器的同学也可以写很多服务器端的程序了。但是在聊天中会发现，大家虽然写了不少代码，但是对wsgi是什么，gunicorn是什么，反向代理又是什么并不了解，也就是说对基本概念并没有一个全局的了解。</p>

<h3 id="section">服务器</h3>

<p>到了服务器组你会发现原来有各种各样的服务器，那些叫法很多是有历史沉淀的，不需要太深究能对上号就行，因为本来也是乱七八糟的。</p>

<h4 id="http">HTTP服务器</h4>

<p>如果网站是HTML/CSS/JS（不包括node.js这种<a href="http://en.wikipedia.org/wiki/Comparison_of_server-side_JavaScript_solutions">SSJS</a>）组成的，那么这是一个静态的网站。</p>

<p>用户访问这个网站的时候，HTTP请求被浏览器发送，经过DNS等被送到网站的服务器。服务器处理HTTP请求，将浏览器能够处理的响应返回给用户的浏览器。所以这个场景下的服务器一般被称为HTTP服务器，常见的有Apache的httpd和Nginx。</p>

<h4 id="application">Application服务器</h4>

<p>如果你的网站是动态的，比如是用Django写的。</p>

<p>那么客户端上来的请求要能够被Djano的Application处理。WSGI就是这样的<a href="http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface">一个协议</a>：它是一个Python程序和用户请求之间的接口。WSGI服务器的作用就是接受并分析用户的请求，调用相应的python对象完成对请求的处理，然后返回相应的结果。</p>

<p>WSGI服务器的选择很多，包括uWSGI和gunicorn。它们都可以处理所有的请求，包括确实应该由python对象处理的，也包括不该python对象处理的，比如静态的图像，css，js等文件。所有理论上你可以把整个动态网站都用WSGI服务器承载起来，也就是整个应用完全跑在Application服务器上。</p>

<h4 id="section-1">代理服务器</h4>

<p>代理无非是A来做B干的事情。在服务器语境下，代理就是一台服务器干另外一台服务器的事情。这个是平常不会有很多人聊到的，多说两句。</p>

<h5 id="section-2">前向代理服务器</h5>

<p>大多数的代理都是前向代理。假设网络上有三台机器:</p>

<ul>
  <li>X：你的电脑</li>
  <li>Y：代理服务器，proxy.eg.org</li>
  <li>Z：你实际想访问的服务器，www.eg.org</li>
</ul>

<p>没有代理的情况下，访问是 <code>X---&gt;Z</code>，但是在某些情况下，访问者会先让代理服务器从实际放内容的服务器把数据取回来，也就是<code>X---&gt;Y</code>，然后<code>Y----&gt;Z</code>，最后<code>X----&gt;Y</code> 。</p>

<p>这里说的某些情况下典型的包括（作为天朝网民你居然没有领悟我很失望）：</p>

<ol>
  <li>X的网络管理员封了Z
    <ul>
      <li>Z可能是一个臭名昭著的病毒网站：<code>familypostcard2008.com</code>等</li>
      <li>Z可能是一个让你上班精力分散的网站：<code>Facebook.com</code>等</li>
      <li>Z可能是一个让你明白真相的网站：Hmmmm</li>
    </ul>
  </li>
  <li>Z的网络管理员封了X
    <ul>
      <li>Z可能是一个论坛或者blog什么的，X在对它进行扫描</li>
    </ul>
  </li>
</ol>

<h5 id="section-3">反向代理服务器</h5>

<p>没有代理的情况下，访问仍然是 <code>X---&gt;Z</code>，但是在某些情况下，Z的管理者决定限制资源被直接访问。用户必须现在Y上做访问，Y再访问Z。整个流程是<code>X---&gt;Y</code>，然后<code>Y----&gt;Z</code>，最后<code>X----&gt;Y</code> 。</p>

<p>没错，细心的你注意到了，前向和反向代理服务器的流程都是<code>X--&gt;Y--&gt;Z</code>。没办法，代理就是这么个意思。它们两者的核心区别在于，用户对反向代理服务器的存在是无感的。换句话说，X不需要做特别的配置甚至不需要察觉Y的存在，就可以使用Y这个反向代理。这种请求方无感而被请求方反过来提供代理服务就是“反向”的意义所在。</p>

<p>使用反向代理的典型场景当然是Z希望所有发给自己特定请求都从Y过一遍：</p>

<ol>
  <li>Z可能是一个超大的网站，每天有全世界各地的用户在访问。于是Z搭建了一个反向代理，把某个地域的用户的访问导入到离他最近的服务器上去处理。没有错，这就是CDN。</li>
  <li>Z可能是一个坏坏的网站。它的拥有者希望把坏坏的数据放到特定的服务器，然后核心数据放到别的服务器。比如黄色网站，一般那些色情的内容放在一些专门的服务器上，即使被查封，也不会对其业务产生决定性的影响。</li>
</ol>

<p>继续我们前面的例子，很快你会发现uWSGI等应用服务器处理静态文件的请求的performance很废材，于是开始寻找直接用nginx来处理静态内容的办法。那么你就需要区分哪些请求是请求的静态页面，哪些是请求的动态内容。</p>

<p>然后你就会发现，原来nginx不止是一个HTTP服务器，它还是一个<a href="http://en.wikipedia.org/wiki/Reverse_proxy">反向代理服务器</a>：它可以把请求重定向到uWSGI或者任何别的服务器，然后把下游服务器的响应集成再返回给用户。于是你就可以配置对静态内容的请求直接在nginx完成，而动态内容的请求发送给uWSGI服务器。</p>

<h4 id="section-4">负载均衡服务器</h4>

<p>在我自己的心中，负责均衡服务器不过是反向代理的一种（你看CDN我也觉得是反向代理的一种），但是很多地方这种服务器是被拿出来专门讨论的。</p>

<p>随着你的网站访问量不断增大，你用一个nginx集中所有的请求再分发就显得性能不够了。这个时候你可以配置专门用于进行请求分发处理的负载均衡服务器，比如<a href="http://haproxy.1wt.eu/">HAProxy</a>，而负载均衡服务器背后是集群。</p>

<h4 id="section-5">缓存服务器</h4>

<p>随着网站访问量的继续增大，你的VPS流量又扛不住了。你调查发现有一些多媒体文件被经常请求，这个时候你部署了缓存服务器。</p>

<p>“缓存”这个经常被提到的术语，核心就是把常用的信息放在一个读取成本很低地方(比如内存中或者是虚拟内存中），从而避免每次查找它的时候昂贵的操作。比如HTTP缓存解决的是在服务器上找信息的过程。而Redis或者Memcached这些缓存则是解决在数据库里面找信息的过程。
面。</p>

<h3 id="uwsgigunicorn">那，我们为什么需要uwsgi或者gunicorn?</h3>

<p>一句话：因为你需要有东西在服务器上运行Python，但是Python不是处理所有的请求都很强。</p>

<p>那么是选uWSGI还是Gunicorn？我觉得都可以，还是那句老话，不是它们好不好的问题，是你够不够好的问题，毕竟代码都摆在那里的。</p>

<p>不过Gunicorn可以多说几句。它的崛起在我看来是有时代背景的：在过去，我们部署一个应用的时候，几乎总是要分布在多台机器的（比如4台HTTP服务器把动态请求分发到两台Application服务器上，并且它们都访问一个数据库服务器）。但是随着机器的能力在增强，而互联网应用的覆盖面从业务逻辑极其复杂的银行业电信业到了送盒饭选泡面的小行业，越来越多的Application服务器和Web服务器合体了（以django圈子举例，有httpd+mod_wsgi或者Nginx+mod_uwsgi）。而且很多时候这种小应用的数据库也host在同一台机器上。</p>

<p>Gunicorn（从Ruby下面的Unicorn得到的启发）应运而生：依赖Nginx的代理行为，同Nginx进行功能上的分离。由于不需要直接处理用户来的请求（都被Nginx先处理），Gunicorn不需要完成相关的功能，其内部逻辑非常简单：接受从Nginx来的动态请求，处理完之后返回给Nginx，由后者返回给用户。</p>

<p>由于功能定位很明确，Gunicorn得以用纯Python开发：大大缩短了开发时间的同时，性能上也不会很掉链子。同时，它也可以配合Nginx的代理之外的别的Proxy模块工作，其配置也相应比较简单。</p>

<p>配置上的简单，大概是它流行的最大的原因。</p>

<h3 id="good-refs">Good Refs</h3>

<h4 id="section-6">正向代理服务器软件</h4>

<ul>
  <li><a href="http://www.jmarshall.com/tools/cgiproxy/">cgi-proxy</a></li>
  <li><a href="http://sourceforge.net/projects/poxy">phproxy</a> (中断了)</li>
  <li><a href="http://www.glype.com/">glype</a></li>
  <li><a href="http://en.cship.org/wiki/Category%3aWebproxy">Internet censorship wiki: List of Web Proxies</a></li>
</ul>

<h4 id="section-7">反向代理服务器软件</h4>

<ul>
  <li><a href="http://wiki.apache.org/cocoon/ApacheModProxy">apache mod_proxy</a></li>
  <li><a href="http://www.squid-cache.org/">squid</a></li>
  <li><a href="http://nginx.net/">HAProxy</a></li>
  <li><a href="http://www.danga.com/perlbal/">perlbal</a></li>
  <li><a href="http://portfusion.sf.net/">portfusion</a></li>
  <li><a href="http://www.apsis.ch/pound/">pound</a></li>
</ul>

<h4 id="tcp">TCP上的反向代理服务器软件</h4>

<ul>
  <li><a href="http://www.inlab.de/balance.html">balance</a></li>
  <li><a href="http://www.delegate.org/delegate/nvproxy/">delegate</a></li>
  <li><a href="http://siag.nu/pen/">pen</a></li>
  <li><a href="http://portfusion.sf.net/">portfusion</a></li>
  <li><a href="http://web.archive.org/web/20080113185334/http://plb.sunsite.dk/index.html">pure load balancer</a></li>
  <li><a href="http://pythondirector.sourceforge.net/">python director</a></li>
</ul>

<h4 id="section-8">其他</h4>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Content_Delivery_Network">Wikipedia - Content Delivery Network</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Category%3aReverse_proxy">Wikipedia - Category:Reverse_proxy</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Load_balancing_%28computing%29">Wikipedia - Load Balancing</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Scalability">Wikipedia - Scalability</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First steps on a new server]]></title>
    <link href="http://lenciel.github.io/2013/04/first-steps-on-a-new-server/"/>
    <updated>2013-04-04T08:44:00+08:00</updated>
    <id>http://lenciel.github.io/2013/04/first-steps-on-a-new-server</id>
    <content type="html"><![CDATA[<p>一般来说，新开张的小团队不会养专职的运维和部署团队。一般服务器开发的项目组会有人兼职做这部分的事情。刚开始的时候这部分的工作量一般也不大，但是随着租用的服务器越来越多，兼职的人就会发现自己是在打上甘岭战役————坡越来越陡。</p>

<p>因此，一个简单而有效的标准流程是非常必要的。ZooM团队的服务器都会配置两个固定的帐号： <code>root</code> 和 <code>deploy</code> 。 <code>deploy</code>  这个用户具有 <code>sudo</code> 的权限。开发人员使用deploy但是不通过用户名密码登录而是用 <code>public key</code> 。这样一来，只需要保证所有机器的 <code>authorized_keys</code> 文件同步即可。后面要做的改进是：</p>

<ul>
  <li>在所有机器禁止通过 root 账号进行ssh</li>
  <li>在所有机器上限制可以ssh的IP范围</li>
</ul>

<p>这样的实施方案对 <code>authorized_keys</code> 的保密性和正确性要求是很高的，但是在没有专门IT的时候，对我们这样的小团队基本是够用的。下面是详细的步骤：</p>

<p>我们拿到的第一台机器是Ubuntu的，因为 <code>Gitlab</code> 只有Debian的版本。后面的机器大多会是CentOS，所以使用的命令可能会稍微有调整，但是意思是不变的。</p>

<h2 id="root">更换root密码</h2>

<p><code>bash
passwd
</code></p>

<p>可以很长很复杂（反正也不需要记得），保存在某个地方在你忘记 <code>sudo</code> 密码或者是不能正常 <code>ssh</code> 的时候能找出来用就可以了。</p>

<h2 id="section">更新系统</h2>

<p><code>bash
apt-get update
apt-get upgrade
</code></p>

<h2 id="fail2ban">安装Fail2ban</h2>

<p><code>bash
apt-get install fail2ban
</code></p>

<p>Fail2ban是一个用来监控登录尝试的 <code>daemon</code> ，可以有效侦测和防止可疑行为的发生。这个工具文档很全，而且出厂配置就很齐全，几乎不需要定制就能投入使用了。</p>

<h2 id="deploy">添加deploy用户</h2>

<p><code>bash
useradd deploy
mkdir /home/deploy
mkdir /home/deploy/.ssh
chmod 700 /home/deploy/.ssh
</code></p>

<h2 id="public-key">配置 <code>public key</code></h2>

<p>使用密码的日子已经慢慢过时了，这方面Github很有<a href="https://help.github.com/categories/56/articles">贡献</a>。只需要：</p>

<p><code>bash
vim /home/deploy/.ssh/authorized_keys
</code></p>

<p>把 <code>id_rsa.pub</code> 的内容拷贝进去。然后：</p>

<p><code>bash
chmod 400 /home/deploy/.ssh/authorized_keys
chown deploy:deploy /home/deploy -R
</code></p>

<p>当然你也可以使用 <code>id_rsa.pub</code> 之外的key，然后在本地的 <code>~/.ssh/config</code> 里面对 <code>IdentityFile</code> 做指定。具体方式可以查看 <code>~/.ssh/config</code>的说明。</p>

<h2 id="deploy-sudo-">测试deploy用户并赋予 <code>Sudo</code> 权限</h2>

<p>先测试deploy是否能够正常登录，然后使用 <code>root</code> 账号设置密码：</p>

<p><code>bash
passwd deploy
</code></p>

<p>这是团队要用来 <code>sudo</code> 的账号，所以要弄得有意义好记一点儿。接下来：</p>

<p><code>bash
visudo
</code></p>

<p>注释掉所以已经存在的用户、用户组权限，然后加上：</p>

<p><code>bash
root    ALL=(ALL) ALL
deploy  ALL=(ALL) ALL
</code></p>

<h2 id="ssh">锁定SSH</h2>

<p>设置ssh，禁止使用密码ssh，禁止使用 <code>root</code> 账号ssh。</p>

<p><code>bash
vim /etc/ssh/sshd_config
</code></p>

<p>添加下面的设置：</p>

<p><code>bash
PermitRootLogin no
PasswordAuthentication no
</code></p>

<p>如果有需要还可以限定可以ssh的ip地址：</p>

<p><code>bash
AllowUsers deploy@(your-ip) deploy@(another-ip-if-any)
</code>
重启ssh：</p>

<p><code>bash
service ssh restart
</code></p>

<h2 id="section-1">设置防火墙</h2>

<p>Ubuntu提供了 <code>ufw</code>，所以只需要：</p>

<p><code>bash
ufw allow from {your-ip} to any port 22
ufw allow 80
ufw allow 443
ufw enable
</code></p>

<h2 id="section-2">打开自动安全更新</h2>

<p>虽然很多习惯好的服务器使用者会知道运行<code>apt-get update/upgrade</code> 但是如果服务器很多，总会有一些不那么被经常登录的机器，系统会比较陈旧。特别是做负载均衡的机器，可能很少有人登录。为了保证所有的机器都有足够的安全性需要打开自动更新（作为习惯控制一切的开发人员，自动更新总是一件让我很抗拒的事情，但是安全漏洞更让人抗拒）：</p>

<p><code>bash
apt-get install unattended-upgrades
vim /etc/apt/apt.conf.d/10periodic
</code></p>

<p>在文件里面修改成：</p>

<p><code>bash
APT::Periodic::Update-Package-Lists "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "7";
APT::Periodic::Unattended-Upgrade "1";
</code></p>

<p>接着修改：</p>

<p><code>bash
vim /etc/apt/apt.conf.d/50unattended-upgrades
</code></p>

<p>修改文件成：</p>

<p><code>bash
Unattended-Upgrade::Allowed-Origins {        
    "Ubuntu lucid-security";
    //"Ubuntu lucid-updates"; 只更新安全更新
};
</code></p>

<h2 id="logwatch">安装Logwatch</h2>

<p>Logwatch是一个监控你的日志并发送邮件通知的daemon。</p>

<p><code>bash
apt-get install logwatch
vim /etc/cron.daily/00logwatch
</code></p>

<p>在文件中添加：</p>

<p><code>bash
/usr/sbin/logwatch --output mail --mailto lenciel@gmail.com --detail high
</code></p>

<h2 id="whats-next">What’s Next</h2>

<ul>
  <li>使用Puppet自动化这些配置</li>
  <li>在基础的配置上，把一个fresh的机器如果配置成各种形态的（Django/Web/Database/LoadBalance/…)</li>
</ul>

]]></content>
  </entry>
  
</feed>
