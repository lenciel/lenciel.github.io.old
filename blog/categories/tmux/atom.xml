<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tmux | @Lenciel]]></title>
  <link href="http://lenciel.cn/blog/categories/tmux/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2014-10-08T20:44:01+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[tmux: Introduction and Tips]]></title>
    <link href="http://lenciel.cn/2013/07/tmux-introduction-and-tips/"/>
    <updated>2013-07-21T14:02:00+08:00</updated>
    <id>http://lenciel.cn/2013/07/tmux-introduction-and-tips</id>
    <content type="html"><![CDATA[<p><img src="/downloads/images/tmux_tips_1.png" alt="tmux screenshot 1" title="Don't touch me..." /></p>

<h3 id="section"><strong>简介</strong></h3>

<p><code>tmux</code> ,其实就是 <code>terminal multiplexer</code> 的简称。使用tmux你可以把多个任务同时运行起来，使用不同的 <code>tmux</code> 窗口来查看它们。你也可以 <code>detach</code> 一个 <code>session</code>，也就是让一个窗口的活动，比如编译这种耗时你又不希望断开的活动，放到后台去运行。如果你使用过 <code>screen</code> 对 <code>detach</code> 一个 <code>session</code> 应该非常熟悉。其实初用 <code>tmux</code> 的时候，它很大程度上就像一个 <code>GNU-Session</code> 外加很多窗口管理的功能。而且由于 <code>tmux</code> 使用了 <code>client-server</code> 架构，我们可以在一个总控的地方去操作所有的窗口和pannel，甚至可以在一个窗口里面切换不同的 <code>session</code>。</p>

<h4 id="tmux"><strong>tmux的安装</strong></h4>

<p>用你的Linux package manager或者如果你和我一样在OSX可以用<code>brew</code>。另外，iTerm2<a href="http://code.google.com/p/iterm2/wiki/TmuxIntegration">集成了</a>对<code>tmux</code>的支持，它也是很多Mac上的<a href="http://tangledhelix.com/blog/2012/04/28/iterm2-keymaps-for-tmux/">程序员</a>最爱的Terminal。</p>

<h4 id="session"><strong>创建一个具名的Session</strong></h4>

<p>由于使用 <code>tmux</code> 可以在一个电脑上创建多个 <code>session</code> ，为了更好的管理它们我们一般可以使用名字来辨识这些 <code>session</code> 。
比如下面的命令可以创建一个叫 <code>basic</code> 的 <code>session</code>：</p>

<p><code>bash
$ tmux -new -s basic
</code></p>

<p>回车之后就会进入一个新的 <code>session</code> 里面。可以看到具名的<code>session</code>的<code>terminal</code>和正常打开<code>iTerm2</code>大致相同，没有特别之处。
这个时候我们敲<code>exit</code>就会回到原来的<code>terminal</code>中去。</p>

<h4 id="detaching--attaching"><strong>Detaching 和 Attaching</strong></h4>

<p>使用<code>tmux</code>一大好处就是我们可以启动<code>terminal</code>，运行一个任务在后台，然后<code>detach</code>这个<code>session</code>。如果在一般的<code>session</code>里面工作，一旦我们关闭了窗口，跑在里面的所有程序都会被退出。
但是如果是使用了<code>detach</code>，我们可以再<code>attach</code>回去。下面演示一个例子。</p>

<p>在创建的具名<code>session</code> “basic”里面运行<code>top</code>，然后使用<code>Ctrl-b + d</code>来<code>detach</code>这个<code>session</code>。</p>

<p>首先来学习一下<code>Ctrl+b</code>这样的<code>Command Prefix</code>。因为<code>tmux</code>是一个terminal管家，我们需要有一个办法告诉<code>tmux</code>我们敲击的是需要<code>tmux</code>处理的命令还是传给terminal的。如果定义了<code>Ctrl-b</code>为命令前缀，就是说我们一定要先敲这个前缀，然后执行一个命令，比如<code>d</code>，表示我们要<code>detach</code>。要记住前缀输入之后要松开手，不要在不松手的情况下发命令给<code>tmux</code>。</p>

<p>由于这个前缀是可以自定义的，所以后面我们记为<code>Prefix</code>而不再用<code>Ctrl-b</code>。</p>

<p>然后我们可以使用下面的命令对<code>session</code>进行<code>list</code>、<code>attach</code>和<code>delete</code>：</p>

<p><code>bash
$ tmux ls
0: 1 windows (created Thu Sep 27 10:16:16 2012) [121x22]
basic: 1 windows (created Thu Sep 27 14:32:50 2012) [122x22]
</code></p>

<p>可以看到目前有两个存活的<code>session</code>，一个是刚刚创建的<code>basic</code></p>

<p><code>bash
$ tmux kill-session -t 0
</code></p>

<p>杀掉我们不需要的那个</p>

<p><code>bash
$ tmux ls
basic: 1 windows (created Thu Sep 27 14:32:50 2012) [122x22]
</code></p>

<p>再次attach的时候可以不带<code>-t</code>，因为只有<code>basic</code>这个<code>session</code>还活着。</p>

<p><code>bash
$ tmux attach
</code></p>

<p>后面我们可以看到在session之间进行切换还有更多更方便的办法。</p>

<h4 id="section-1"><strong>窗口</strong></h4>

<p>很多时候我们都需要打开窗口运行多个任务。这种情况比较适用于<code>tmux</code>的窗口概念：用起来和现代操作系统里面的<code>tab</code>类似。</p>

<p>新建一个窗口很容易</p>

<p><code>bash
tmux new -s windows -n shell
</code> </p>

<p><code>-s</code>是对<code>session</code>进行命名的，<code>-n</code>是用来对窗口进行命名的。</p>

<ul>
  <li>在当前的<code>session</code>里面新建一个窗口: <code>Prefix+C</code></li>
  <li>要给窗口命名：<code>Prefix+</code></li>
  <li>在已有的窗口间跳转： <code>Prefix+n/Prefix+p</code></li>
  <li>窗口较多的时候跳转： <code>Prefix+序列号</code></li>
  <li>要关掉窗口： <code>exit</code>或者<code>Prefix+&amp;</code></li>
  <li>要搜索窗口：<code>Prefix+f</code>或者 <code>Prefix+w</code></li>
</ul>

<h4 id="section-2"><strong>分栏</strong></h4>

<ul>
  <li>竖分: <code>Prefix+%</code></li>
  <li>横分: <code>Prefix+"</code>   </li>
  <li>在分栏中切换: <code>Prefix+o</code>   </li>
  <li>在分栏中切换: <code>Prefix+方向键</code></li>
  <li>在不同的布局间切换: <code>Prefix+space</code></li>
  <li>关闭: <code>Prefix+x</code></li>
</ul>

<h4 id="section-3"><strong>命令行模式</strong></h4>

<p><code>Prefix+:</code></p>

<h4 id="section-4"><strong>取得所有的快捷键</strong></h4>

<p><code>Prefix+?</code></p>

<p>二、配置tmux</p>

<p>首先在系统设置里面把<code>CapsLock</code>这枚废材按键map成<code>ctrl</code>。然后是把Prefix配置成<code>ctrl+a</code>而不是<code>ctrl+b</code>，这样主要是为了按起来方便顺手。</p>

<p>另外可以让窗口的序列号从1开始分配，这样初始窗口不会是0，那个你需要手伸很远才能按到的键。</p>

<p><code>bash
set -g base-index 1
</code> </p>

<p>同理分栏的序列号也可以从1开始：</p>

<p><code>bash
setw -g pane-base-index 1
</code> </p>

<p>另外一般需要把发送命令的延迟设置为没延迟</p>

<p><code>bash
set -sg escape-time 1
</code> </p>

<p>完整的配置文件在<a href="https://github.com/lenciel/oh-my-zsh/blob/master/dot_files/tmux.conf">这里</a>：</p>

<p>{% include_code tmux.conf lang:bash %}</p>
]]></content>
  </entry>
  
</feed>
