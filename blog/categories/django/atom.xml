<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: django | @Lenciel]]></title>
  <link href="http://lenciel.cn/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://lenciel.cn/"/>
  <updated>2014-06-09T11:05:44+08:00</updated>
  <id>http://lenciel.cn/</id>
  <author>
    <name><![CDATA[Lenciel Li]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[uWSGI, Gunincorn, 啥玩意儿?]]></title>
    <link href="http://lenciel.cn/2013/08/why-you-need-something-like-gunicorn/"/>
    <updated>2013-08-01T14:36:00+08:00</updated>
    <id>http://lenciel.cn/2013/08/why-you-need-something-like-gunicorn</id>
    <content type="html"><![CDATA[<p>因为nginx等优秀的开源项目，有不少本来不是做服务器的同学也可以写很多服务器端的程序了。但是在聊天中会发现，大家虽然写了不少代码，但是对wsgi是什么，gunicorn是什么，反向代理又是什么并不了解，也就是说对基本概念并没有一个全局的了解。</p>

<h3 id="section">服务器</h3>

<p>到了服务器组你会发现原来有各种各样的服务器，那些叫法很多是有历史沉淀的，不需要太深究能对上号就行，因为本来也是乱七八糟的。</p>

<h4 id="http">HTTP服务器</h4>

<p>如果网站是HTML/CSS/JS（不包括node.js这种<a href="http://en.wikipedia.org/wiki/Comparison_of_server-side_JavaScript_solutions">SSJS</a>）组成的，那么这是一个静态的网站。</p>

<p>用户访问这个网站的时候，HTTP请求被浏览器发送，经过DNS等被送到网站的服务器。服务器处理HTTP请求，将浏览器能够处理的响应返回给用户的浏览器。所以这个场景下的服务器一般被称为HTTP服务器，常见的有Apache的httpd和Nginx。</p>

<h4 id="application">Application服务器</h4>

<p>如果你的网站是动态的，比如是用Django写的。</p>

<p>那么客户端上来的请求要能够被Djano的Application处理。WSGI就是这样的<a href="http://en.wikipedia.org/wiki/Web_Server_Gateway_Interface">一个协议</a>：它是一个Python程序和用户请求之间的接口。WSGI服务器的作用就是接受并分析用户的请求，调用相应的python对象完成对请求的处理，然后返回相应的结果。</p>

<p>WSGI服务器的选择很多，包括uWSGI和gunicorn。它们都可以处理所有的请求，包括确实应该由python对象处理的，也包括不该python对象处理的，比如静态的图像，css，js等文件。所有理论上你可以把整个动态网站都用WSGI服务器承载起来，也就是整个应用完全跑在Application服务器上。</p>

<h4 id="section-1">代理服务器</h4>

<p>代理无非是A来做B干的事情。在服务器语境下，代理就是一台服务器干另外一台服务器的事情。这个是平常不会有很多人聊到的，多说两句。</p>

<h5 id="section-2">前向代理服务器</h5>

<p>大多数的代理都是前向代理。假设网络上有三台机器:</p>

<ul>
  <li>X：你的电脑</li>
  <li>Y：代理服务器，proxy.eg.org</li>
  <li>Z：你实际想访问的服务器，www.eg.org</li>
</ul>

<p>没有代理的情况下，访问是 <code>X---&gt;Z</code>，但是在某些情况下，访问者会先让代理服务器从实际放内容的服务器把数据取回来，也就是<code>X---&gt;Y</code>，然后<code>Y----&gt;Z</code>，最后<code>X----&gt;Y</code> 。</p>

<p>这里说的某些情况下典型的包括（作为天朝网民你居然没有领悟我很失望）：</p>

<ol>
  <li>X的网络管理员封了Z
    <ul>
      <li>Z可能是一个臭名昭著的病毒网站：<code>familypostcard2008.com</code>等</li>
      <li>Z可能是一个让你上班精力分散的网站：<code>Facebook.com</code>等</li>
      <li>Z可能是一个让你明白真相的网站：Hmmmm</li>
    </ul>
  </li>
  <li>Z的网络管理员封了X
    <ul>
      <li>Z可能是一个论坛或者blog什么的，X在对它进行扫描</li>
    </ul>
  </li>
</ol>

<h5 id="section-3">反向代理服务器</h5>

<p>没有代理的情况下，访问仍然是 <code>X---&gt;Z</code>，但是在某些情况下，Z的管理者决定限制资源被直接访问。用户必须现在Y上做访问，Y再访问Z。整个流程是<code>X---&gt;Y</code>，然后<code>Y----&gt;Z</code>，最后<code>X----&gt;Y</code> 。</p>

<p>没错，细心的你注意到了，前向和反向代理服务器的流程都是<code>X--&gt;Y--&gt;Z</code>。没办法，代理就是这么个意思。它们两者的核心区别在于，用户对反向代理服务器的存在是无感的。换句话说，X不需要做特别的配置甚至不需要察觉Y的存在，就可以使用Y这个反向代理。这种请求方无感而被请求方反过来提供代理服务就是“反向”的意义所在。</p>

<p>使用反向代理的典型场景当然是Z希望所有发给自己特定请求都从Y过一遍：</p>

<ol>
  <li>Z可能是一个超大的网站，每天有全世界各地的用户在访问。于是Z搭建了一个反向代理，把某个地域的用户的访问导入到离他最近的服务器上去处理。没有错，这就是CDN。</li>
  <li>Z可能是一个坏坏的网站。它的拥有者希望把坏坏的数据放到特定的服务器，然后核心数据放到别的服务器。比如黄色网站，一般那些色情的内容放在一些专门的服务器上，即使被查封，也不会对其业务产生决定性的影响。</li>
</ol>

<p>继续我们前面的例子，很快你会发现uWSGI等应用服务器处理静态文件的请求的performance很废材，于是开始寻找直接用nginx来处理静态内容的办法。那么你就需要区分哪些请求是请求的静态页面，哪些是请求的动态内容。</p>

<p>然后你就会发现，原来nginx不止是一个HTTP服务器，它还是一个<a href="http://en.wikipedia.org/wiki/Reverse_proxy">反向代理服务器</a>：它可以把请求重定向到uWSGI或者任何别的服务器，然后把下游服务器的响应集成再返回给用户。于是你就可以配置对静态内容的请求直接在nginx完成，而动态内容的请求发送给uWSGI服务器。</p>

<h4 id="section-4">负载均衡服务器</h4>

<p>在我自己的心中，负责均衡服务器不过是反向代理的一种（你看CDN我也觉得是反向代理的一种），但是很多地方这种服务器是被拿出来专门讨论的。</p>

<p>随着你的网站访问量不断增大，你用一个nginx集中所有的请求再分发就显得性能不够了。这个时候你可以配置专门用于进行请求分发处理的负载均衡服务器，比如<a href="http://haproxy.1wt.eu/">HAProxy</a>，而负载均衡服务器背后是集群。</p>

<h4 id="section-5">缓存服务器</h4>

<p>随着网站访问量的继续增大，你的VPS流量又扛不住了。你调查发现有一些多媒体文件被经常请求，这个时候你部署了缓存服务器。</p>

<p>“缓存”这个经常被提到的术语，核心就是把常用的信息放在一个读取成本很低地方(比如内存中或者是虚拟内存中），从而避免每次查找它的时候昂贵的操作。比如HTTP缓存解决的是在服务器上找信息的过程。而Redis或者Memcached这些缓存则是解决在数据库里面找信息的过程。
面。</p>

<h3 id="uwsgigunicorn">那，我们为什么需要uwsgi或者gunicorn?</h3>

<p>一句话：因为你需要有东西在服务器上运行Python，但是Python不是处理所有的请求都很强。</p>

<p>那么是选uWSGI还是Gunicorn？我觉得都可以，还是那句老话，不是它们好不好的问题，是你够不够好的问题，毕竟代码都摆在那里的。</p>

<p>不过Gunicorn可以多说几句。它的崛起在我看来是有时代背景的：在过去，我们部署一个应用的时候，几乎总是要分布在多台机器的（比如4台HTTP服务器把动态请求分发到两台Application服务器上，并且它们都访问一个数据库服务器）。但是随着机器的能力在增强，而互联网应用的覆盖面从业务逻辑极其复杂的银行业电信业到了送盒饭选泡面的小行业，越来越多的Application服务器和Web服务器合体了（以django圈子举例，有httpd+mod_wsgi或者Nginx+mod_uwsgi）。而且很多时候这种小应用的数据库也host在同一台机器上。</p>

<p>Gunicorn（从Ruby下面的Unicorn得到的启发）应运而生：依赖Nginx的代理行为，同Nginx进行功能上的分离。由于不需要直接处理用户来的请求（都被Nginx先处理），Gunicorn不需要完成相关的功能，其内部逻辑非常简单：接受从Nginx来的动态请求，处理完之后返回给Nginx，由后者返回给用户。</p>

<p>由于功能定位很明确，Gunicorn得以用纯Python开发：大大缩短了开发时间的同时，性能上也不会很掉链子。同时，它也可以配合Nginx的代理之外的别的Proxy模块工作，其配置也相应比较简单。</p>

<p>配置上的简单，大概是它流行的最大的原因。</p>

<h3 id="good-refs">Good Refs</h3>

<h4 id="section-6">正向代理服务器软件</h4>

<ul>
  <li><a href="http://www.jmarshall.com/tools/cgiproxy/">cgi-proxy</a></li>
  <li><a href="http://sourceforge.net/projects/poxy">phproxy</a> (中断了)</li>
  <li><a href="http://www.glype.com/">glype</a></li>
  <li><a href="http://en.cship.org/wiki/Category%3aWebproxy">Internet censorship wiki: List of Web Proxies</a></li>
</ul>

<h4 id="section-7">反向代理服务器软件</h4>

<ul>
  <li><a href="http://wiki.apache.org/cocoon/ApacheModProxy">apache mod_proxy</a></li>
  <li><a href="http://www.squid-cache.org/">squid</a></li>
  <li><a href="http://nginx.net/">HAProxy</a></li>
  <li><a href="http://www.danga.com/perlbal/">perlbal</a></li>
  <li><a href="http://portfusion.sf.net/">portfusion</a></li>
  <li><a href="http://www.apsis.ch/pound/">pound</a></li>
</ul>

<h4 id="tcp">TCP上的反向代理服务器软件</h4>

<ul>
  <li><a href="http://www.inlab.de/balance.html">balance</a></li>
  <li><a href="http://www.delegate.org/delegate/nvproxy/">delegate</a></li>
  <li><a href="http://siag.nu/pen/">pen</a></li>
  <li><a href="http://portfusion.sf.net/">portfusion</a></li>
  <li><a href="http://web.archive.org/web/20080113185334/http://plb.sunsite.dk/index.html">pure load balancer</a></li>
  <li><a href="http://pythondirector.sourceforge.net/">python director</a></li>
</ul>

<h4 id="section-8">其他</h4>

<ul>
  <li><a href="http://en.wikipedia.org/wiki/Content_Delivery_Network">Wikipedia - Content Delivery Network</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Category%3aReverse_proxy">Wikipedia - Category:Reverse_proxy</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Load_balancing_%28computing%29">Wikipedia - Load Balancing</a></li>
  <li><a href="http://en.wikipedia.org/wiki/Scalability">Wikipedia - Scalability</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vagrant for Django I: Basic]]></title>
    <link href="http://lenciel.cn/2013/06/vagrant-on-mac-os-x/"/>
    <updated>2013-06-19T15:19:00+08:00</updated>
    <id>http://lenciel.cn/2013/06/vagrant-on-mac-os-x</id>
    <content type="html"><![CDATA[<p>Vagrant<a href="http://www.vagrantup.com/vmware">最近支持了VMWare</a>，但是要钱的东西我们玩不起。本系列主要分享一下Vagrant+VirtualBox搭配起来如何使用。</p>

<h2 id="virtualbox">安装VirtualBox</h2>

<p>VirtualBox是Oracle的动态创建、可配置、可移植的轻量虚拟机系统。在Windows、MacOSX、Linux和Solaris上都发行了相应版本。</p>

<p>目前Vagrant支持的是VirtualBox4.0.x、4.1.x和4.2.x版本</p>

<p><code>bash
http://www.virtualbox.org/wiki/Downloads
</code></p>

<h2 id="vagrant">安装Vagrant</h2>

<p><code>bash
http://downloads.vagrantup.com/
</code></p>

<p>Windows和Mac OS X下面安装完毕后要把 <code>vagrant</code> 命令放到 <code>PATH</code> 下面，而其他系统下面需要把整个 <code>/opt/vagrant/bin</code> 放到PATH下面。
完成后可以先安装一个32位的ubuntu10.04版本来测试一下：</p>

<p><code>bash
vagrant box add lucid32 http://files.vagrantup.com/lucid32.box
vagrant init lucid32
vagrant up
</code></p>

<h2 id="vagrant-1">Vagrant的好处</h2>

<p>软件开发，特别是Web应用的开发正处于环境异常复杂的年代。为了在开发和实际部署的环境直接做到无缝切换，虚拟化技术被大规模的使用。与此同时，自动的配置管理，如 <code>Chef</code> 或者 <code>Puppet</code> 也在发挥着巨大的作用。Vagrant就是在这些技术的基础上进行了集成，从而完成（虚拟化+自动配置管理）的效果。</p>

<p><em>对个人开发者</em></p>

<p>对于开发者来说要想使用一个开发环境应付所有的开发任务变得非常困难了。每个项目都有自己独特的依赖，如类库，消息队列，数据库，框架等等。每个依赖也常常有版本上的差异。Vagrant提供了方便，可以为每个项目创建独立的开发环境，并且只在项目需要的时候把这些环境运行起来。</p>

<p><em>对项目组</em></p>

<p>同一个项目组的组员理论上都是有相同的开发环境的：同样的依赖，每个依赖都是同样的版本，采用同样的配置等等。但是现实往往不是这样。比如采用了ORM框架的Django，同一个项目组可能有人用着 <code>sqlite3</code> ，有人用 <code>mysql</code> 。而且每个人自己开发环境中服务器的配置也常常是不同的。这种异构的环境往往最终会带来大大小小的麻烦。Vagrant提供了一个方便，让大家都被强制的使用统一的开发环境。</p>

<p><em>对公司</em></p>

<p>如果管理过大型项目，你就知道新人和新设计的引入往往是非常大的考验。大量的环境搭建工作，都可以由Vagrant来代替。并且Vagrant的配置只需要写一次，然后分发给大家用就行了，省掉了大量的时间。</p>

<h2 id="vagrant-2">Vagrant可执行文件</h2>

<p>Vagrant安装好之后，主要是通过命令行使用。 <code>vagrant</code> 命令带很多子命令，如 <code>vagrant up</code> ， <code>vagrant ssh</code> ， <code>vagrant package</code> 等等。敲 <code>vagrant</code> 就可以看到有哪些可用的命令。</p>

<h2 id="vagrantfile">Vagrantfile配置文件</h2>

<p><code>Vagrantfile</code> 对于Vagrant就像 <code>Makefile</code> 对Make的作用一样：它被放置在每个Vagrant项目的根目录，用来配置Vagrant以及它创建的虚拟机的行为。一个最简单的配置文件如下：</p>

<p><code>ruby
Vagrant:Config.run do |config|
     # setup the box
     config.vim.box="my_box"
end
</code></p>

<p>可以看到，<code>Vagrantfile</code> 是用标准的Ruby代码写成的。需要注意的是在大版本之间<code> Vagrantfile</code> 是不兼容的。</p>

<h2 id="setup">基本setup</h2>

<p>首选创建项目目录，然后在项目目录中初始化：</p>

<p><code>bash
mkdir vagrant_guide
cd vagrant_guide
vagrant init
</code></p>

<p>init命令会创建一个基本的Vagrantfile，暂时先不修改它。下一篇我们来看如何添加Django开发需要的配置以及如果build一个 <code>base box</code> 来给其他人使用。</p>
]]></content>
  </entry>
  
</feed>
